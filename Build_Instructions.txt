
Instructions for building ACCESS
(See the bottom of the file for contact information)

The ACCESS system uses imake to generate Makefiles for each of its
modules.  To build the ACCESS system you must first build and install
imake and its associated tools, set your ACCESS environment variable
and path, then generate Makefiles for ACCESS to build and install
ACCESS.

1) Unpack the ACCESS distribution in the directory of your choice
   % tar -zxvf seacas.tar.gz
   ... This will create a directory that will be referred to as
       SEACAS-XXXX-XX-XX in the instructions that follow. You can
       rename this directory to any other name you desire.

2) Download netcdf.  The most recent released version is recommended. 

   * Download netcdf-4.2.1.1.tar.gz (or the most recent version) from 
     http://www.unidata.ucar.edu/downloads/netcdf/ftp
     and put it inside SEACAS-XXXX-XX-XX/TPL/netcdf
   * cd TPL/netcdf
   * tar zxvf netcdf-4.2.1.1.tar.gz
   * If the untar does not create a netcdf-4.2.1.1 directory, modify the
     Imakefile in the current directory such that V_NUM specifies the
     correct name
   * Modify the following defines in 
     SEACAS-XXXX-XX-XX/TPL/netcdf/netcdf-4.2.1.1/include/netcdf.h

#define NC_MAX_DIMS     65536    /* max dimensions per file */
#define NC_MAX_VARS     524288   /* max variables per file */
#define NC_MAX_VAR_DIMS 8        /* max per variable dimensions */

3) Download hdf5 and get it ready to be built by the buildSEACAS
   script below.
   * Download hdf5 from http://www.hdfgroup.org/HDF5/release/obtain5.html
     and put it inside SEACAS-XXXX-XX-XX/TPL/hdf5
   * untar it, creating a directory will will refer to as hdf5-X.X.X
   * In the directory /SEACAS-XXXX-XX-XX/TPL/hdf5/, create a symbolic
     link from hdf5-X.X.X to hdf5-source
     -- The command for this is: "ln -s hdf5-X.X.X hdf5-source"

4) cd back to the top-level SEACAS-XXXX-XX-XX subdirectory

3) The current directory (SEACAS-XXXX-XX-XX unless you renamed if) will be your
   ACCESS root.  Set the environment variable ACCESS to point to this
   area. 
   -- setenv ACCESS `pwd`  (csh/tcsh)
   -- export ACCESS=`pwd`  (sh/bash)

   If you do an 'ls $ACCESS/ACCESS', you should see something similar to:

applications  Imakefile  itools  libraries  scripts  


NOTE: The site.def and platform.cf files describe below are processed 
      by the C preprocessor (CPP). Therefore, all data in the files must be 
      valid CPP syntax:
      * XCOMM indicates a comment line that will appear in the
        processed file
      * /* .... */ is a C-comment that will be removed by the CPP
      * The '#' indicates code processed by CPP; typically the files
        use #define, #else, #endif, and #ifdef to determine options
	and define values.
      * Most other syntax will cause problems.

4) Move into the $ACCESS/ACCESS/itools/config/cf directory and edit
   the 'site.def' and the configuration file associated with your
   platform (e.g. linux.cf for linux OS; darwin.cf for MacOS)

   ------------------------------------------------------------------------
   a) The 'site.def' file contains settings that determine where ACCESS
      is going to be installed, who owns the source, and where the
      X11 libraries and includes files are located on your system
      The following setting should be entered in the site.def file:

   #define        Owner owner_username
   #define        Group group_name 
      The owner and group name of the user installing the code should
      be set.  We have created a group called seacas on our systems for
      the support staff that installs and maintains the ACCESS system
      If you do not have or need a group, you can delete the #define Group line.
      Example 2
                   #define        Owner gdsjaar
                   #define        Group seacas 

   #define AccessRoot - path to ACCESS source directory
      It should be the same directory path as you set as the ACCESS
      environment variable.

   #define BuildSharedExodusLibrary YES
      Leave this set to YES unless there are problems building
      shared libraries on your system.

   #define UseNetcdf4 NO or YES
      Set to YES to use the new hdf5-based netcdf-4;
      leave as NO to use the classic netcdf-4.
      
   #define HDF5_Root AccessRoot
      If UseNetcdf4 is YES, then HDF5_Root needs to point to the root of
      an installed HDF5 library (both libhdf5.a and libhdf5_hl.a) and
      include files.  HDF5_Root/lib holds the libs and HDF5_Root/include
      has the include files. Leave the value as AccessRoot unless you
      have an external installation of HDF5 that you want to use.
         
   #define Platform normal
      For most cases, leave the Platform define as "normal"; however,
       * if building on "interix", define it as interix;
       * if building for "redstorm", define it as redstorm;
       * if you need to enter BootsStrapCFlags, define as "prompt"

   ------------------------------------------------------------------------
   b) platform.cf (platform=hardware or os type) [linux.cf, darwin.cf, ?.cf]

      If you are building on a 64-bit system, define Build64BitAccess YES.

      NOTE: If you are using a gcc version prior to 4.1, then you
      cannot build the fortran-based utilities for 64-bit systems; you
      must do a 32-bit build. I can tell you the details if you
      want...  If you are using a non-gnu compiler or using gcc-4.1.0
      or later (which gfortran as the fortran compiler), you can do a
      64-bit build.

      NOTE: If you are building on MacOS and using the Mac ports
      compilers, then define USE_MACPORTS as the version number of the
      compiler (4.4, 4.5, 4.6, ...)

       The platform.cf configuration file contains system-specific
      settings; in particular compiler paths.  The linux.cf file is the
      most complicated due to the multitude of compilers available.  Pick
      the define corresponding to the compilers you will be using and
      then search for that #if block and make sure paths are correct; the
      paths typically only need changing for parallel compiles and if
      your system has multiple versions of compilers.

5) Use the script ACCESS/scripts/buildSEACAS, which enters the commands
   for you.  You should be in the directory specified as your AccessRoot
   in step 3 above. Then enter:

      sh ACCESS/scripts/buildSEACAS -auto

6) If you have any problems, send an email to 'gdsjaar@sandia.gov'.
   Include any log files that were created during your attempted build.
   These will be in ACCESS and in ACCESS/itools.  Also include the
   site.def and platform.cf (e.g. linux.cf, darwin.cf).  The subject of
   your email should include "SEACAS build error".

   You can call me, but I will probably just tell you to email the
   information in the previous paragraph.

   -- Greg Sjaardema  (gsjaardema@gmail.com,  gdsjaar@sandia.gov)
      
