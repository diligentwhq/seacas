/*
        ACCESS System configuration ACCESS.rules
*/

/***********************************************************************/
/* Object Rules                                                        */
/***********************************************************************/

/*
 * NormalObjectRule - Interface for building a C, C++, and FORTRAN programs
 * There are several variations below due to system idiosyncracies...
 *
 * AIXArchitecture: Seems to not handle f90 suffix, so file is copied to .f
 *                  and then compiled; then .f is removed.
 *
 * NeedCapFRule: If the Fortran compile cannot compile a .F file directly,
 *               then we manually preprocess the file to a .f using cpp
 *               and then compile that.  The .f is left around so the debugger
 *               works...
 *
 * DarwinArchitecture: The filesystem is "case aware, but not case sensitive"
 *                     which messes up the .F conversion to .f since it sees
 *                     both files as the same. If NeedCapFRule is also defined,
 *                     then preprocess name.F to nameF.f and compile that.
 * 
 * Note that this was changed recently (NeedCapFRule added), so there may be
 * systems that need the rule defined, but don't have it defined in the .cf file.
 * 
 */
#ifdef NormalObjectRule
# undef NormalObjectRule
#endif
#if defined(AIXArchitecture)
#define NormalObjectRule()                                              @@\
.SUFFIXES: .F .f .f90 .c .C .cpp                                        @@\
.c.o:                                                                   @@\
	$(CC) -c $(CFLAGS) $*.c						@@\
.C.o:                                                                   @@\
	$(CXX) -c $(CXXFLAGS) $*.C					@@\
.cpp.o:                                                                 @@\
	$(CXX) -c $(CXXFLAGS) $*.cpp					@@\
.f.o:                                                                   @@\
	$(FC) -c $(STATICFLAGS) $(FFLAGS) $*.f				@@\
.f90.o:                                                                 @@\
	$(CP) $*.f90 $*.f						@@\
	$(F90C) -c $(STATICFLAGS) $(F90FLAGS) $*.f			@@\
	$(RM) $*.f							@@\
.F.f:                                                                   @@\
	RemoveTargetProgram($@)                                         @@\
	$(CPP) -P $(F77CPPFLAGS) $(DEFINES) $*.F $*.f                   @@\
.f90.mod:                                                               @@\
	$(F90C) -c $(STATICFLAGS) $(F90FLAGS) $*.f90                    @@\
.mod.o:                                                                 @@\
.F.o:                                                                   @@\
	RemoveTargetProgram($@)                                         @@\
	RemoveTargetProgram($*.f)                                       @@\
	$(CPP) -P $(F77CPPFLAGS) $(DEFINES) $*.F $*.f                   @@\
	$(FC) -c $(STATICFLAGS) $(FFLAGS) $*.f
#elif defined(DarwinArchitecture) && defined(NeedCapFRule)
#define NormalObjectRule()                                              @@\
.SUFFIXES: .F .f .f90 .c .C .cpp                                        @@\
.c.o:                                                                   @@\
	$(CC) -c $(CFLAGS) $*.c                                         @@\
.C.o:                                                                   @@\
	$(CXX) -c $(CXXFLAGS) $*.C                                      @@\
.cpp.o:                                                                 @@\
	$(CXX) -c $(CXXFLAGS) $*.cpp					@@\
.f.o:                                                                   @@\
	$(FC) -c $(STATICFLAGS) $(FFLAGS) $*.f                          @@\
.f90.o:                                                                 @@\
	$(F90C) -c $(STATICFLAGS) $(F90FLAGS) $*.f90			@@\
.F.f:                                                                   @@\
	RemoveTargetProgram($@)                                         @@\
	$(CPP) -P $(F77CPPFLAGS) $(DEFINES) $*.F >& $*.f                @@\
.mod.o:									@@\
.F.o:                                                                   @@\
	RemoveTargetProgram($@)                                         @@\
	RemoveTargetProgram($*.f)                                       @@\
	$(CPP) -P $(F77CPPFLAGS) $(DEFINES) $*.F >& $*.f                @@\
	$(FC) -c $(STATICFLAGS) $(FFLAGS) $*.f				@@\
.f90.mod:                                                               @@\
	$(F90C) -c $(STATICFLAGS) $(F90FLAGS) $*.f90                   
#elif defined(NeedCapFRule)
#define NormalObjectRule()                                              @@\
.SUFFIXES: .F .f .f90 .c .C .cpp                                        @@\
.c.o:                                                                   @@\
	$(CC) -c $(CFLAGS) $*.c						@@\
.C.o:                                                                   @@\
	$(CXX) -c $(CXXFLAGS) $*.C					@@\
.cpp.o:                                                                 @@\
	$(CXX) -c $(CXXFLAGS) $*.cpp					@@\
.f.o:                                                                   @@\
	$(FC) -c $(STATICFLAGS) $(FFLAGS) $*.f				@@\
.F.f:                                                                   @@\
	RemoveTargetProgram($@)                                         @@\
	$(CPP) -P $(F77CPPFLAGS) $*.F $*.f                              @@\
.f90.o:                                                                 @@\
	$(F90C) -c $(STATICFLAGS) $(F90FLAGS) $*.f90                    @@\
.f90.mod:                                                               @@\
	$(F90C) -c $(STATICFLAGS) $(F90FLAGS) $*.f90                    @@\
.mod.o:                                                                 @@\
.F.o:                                                                   @@\
	RemoveTargetProgram($@)                                         @@\
	RemoveTargetProgram($*.f)                                       @@\
	$(CPP) -P $(F77CPPFLAGS) $(DEFINES) $*.F $*.f                   @@\
	$(FC) -c $(STATICFLAGS) $(FFLAGS) $*.f
#else
#define NormalObjectRule()                                              @@\
.SUFFIXES: .F .f .f90 .c .C .cpp                                        @@\
.c.o:                                                                   @@\
	$(CC) -c $(CFLAGS) $*.c						@@\
.C.o:                                                                   @@\
	$(CXX) -c $(CXXFLAGS) $*.C					@@\
.cpp.o:                                                                 @@\
	$(CXX) -c $(CXXFLAGS) $*.cpp					@@\
.f.o:                                                                   @@\
	$(FC) -c $(STATICFLAGS) $(FFLAGS) $*.f				@@\
.f90.o:                                                                 @@\
	$(F90C) -c $(STATICFLAGS) $(F90FLAGS) $*.f90                    @@\
.f90.mod:                                                               @@\
	$(F90C) -c $(STATICFLAGS) $(F90FLAGS) $*.f90                    @@\
.mod.o:                                                                 @@\
.F.o:                                                                   @@\
	$(FC) -c $(STD_CPP_DEFINES) $(F77CPPFLAGS) $(DEFINES) $(STATICFLAGS) $(FFLAGS) $*.F
#endif

/*
 * NormalLibraryObjectRule - Same as NormalObjectRule above
 * This is maintained for backwards compatibility. 
 */
#ifdef NormalLibraryObjectRule
# undef NormalLibraryObjectRule
#endif
#define NormalLibraryObjectRule()                                       @@\
NormalObjectRule()

/***********************************************************************/
/* Utility Rules                                                       */
/***********************************************************************/

/*
 * ProgramTargetHelper - Rule to make and install a program in ETCDIR
 */
#ifdef ProgramTargetHelper
# undef ProgramTargetHelper
#ifdef WIN32
#define ProgramTargetHelper(program,srcs,objs,deplib,locallib,syslib)	@@\
ProgramTargetName(program): $(objs:.o=.obj) $(deplib)			@@\
	RemoveTargetProgram($@)						@@\
	LinkRule($@,$(LDOPTIONS),$(objs:.o=.obj),locallib $(LDLIBS) syslib) @@\
									@@\
InstallProgram(program,$(ETCDIR))					@@\
InstallManPage(program,$(MANDIR))
#else
#define	ProgramTargetHelper(program,srcs,objs,deplib,locallib,syslib)	@@\
ProgramTargetName(program): $(objs) $(deplib)				@@\
	RemoveTargetProgram($@)						@@\
	LinkRule($@,$(LDOPTIONS),$(objs),locallib $(LDLIBS) syslib)	@@\
									@@\
CenterProgramTarget(program,$(srcs),$(objs),locallib,syslib)		@@\
SentinelProgramTarget(program,$(objs) $(deplib),$(objs) locallib $(LDLIBS) syslib) @@\
PurifyProgramTarget(program,$(objs) $(deplib),$(objs) locallib $(LDLIBS) syslib) @@\
ProofProgramTarget(program,$(objs) $(deplib),$(objs) locallib $(LDLIBS) syslib) @@\
									@@\
InstallProgram(program,$(ETCDIR))					@@\
InstallManPage(program,$(MANDIR))
#endif
#endif

/*
 * CopyFile - Rule to copy filename to dest
 */
#ifdef CopyFile
# undef CopyFile
#endif
#define CopyFile(filename,dest) $(CP) filename dest

/*
 * MoveFile - Rule to move filename to dest
 */
#ifdef MoveFile
# undef MoveFile
#endif
#define MoveFile(filename,dest) $(MV) filename dest

/*
 * ExtraStuffToClean - Clean extra files that are not normally
 * deleted with the default clean target
 */
#ifdef ExtraStuffToClean
# undef ExtraStuffToClean
#endif
#define ExtraStuffToClean(extra)                                        @@\
clean::                                                                 @@\
	$(RM) extra

/*
 * CleanupCapF - Clean the preprocessed .f files generated if the fortran
 * compiler doesn't handle automatic .F.o compilation.
 */
#ifdef CleanupCapF
#undef CleanupCapF
#endif
#if defined(NeedCapFRule)
#define CleanupCapF(extra)                                     @@\
clean::                                                        @@\
	$(RM) extra
#else
#define CleanupCapF(extra)    /**/                                 
#endif

/*
 * InstallItem
 */
#ifdef InstallItem
# undef InstallItem
#endif
#define InstallItem(msg,path,item,dest)                                 @@\
install::                                                               @@\
	@echo msg ;\                                                    @@\
	(cd path && if [ -d dest ]; then set +x; \                      @@\
	else (set -x; $(MKDIRHIER) dest); fi; \                         @@\
	$(INSTALL) $(INSTALLFLAGS) $(INSTLIBFLAGS) item dest)

/*
 * PreprocessFile
 */
#ifdef PreprocessFile
# undef PreprocessFile
#endif
#define PreprocessFile(infile,outfile,flags)				@@\
	AllTarget(outfile)						@@\
outfile: infile								@@\
	RemoveTargetProgram(outfile)					@@\
	$(CPP) flags infile outfile


/***********************************************************************/
/* Soft Link Rules                                                     */
/***********************************************************************/

/*
 * FortranIncludesLink - Make soft links from installed include files
 * to current directory.
 * This is maintained for backwards compatibility. 
 */
#ifdef FortranIncludesLink
# undef FortranIncludesLink
#endif
#define FortranIncludesLink(step,incdir,incfiles)                       @@\
all depend link step::							@@\
	@for j in incfiles; \                                           @@\
	do \                                                            @@\
		$(RM) ./$$j ; \                                         @@\
		echo "Creating "$(LN) incdir/$$j ./; \                  @@\
		$(LN) incdir/$$j ./ ; \                                 @@\
	done

/*
 * CommonCodeDirs - Rule to make soft links from common files to
 * current directory.
 * NOTE: step is unused in this rule.
 *       If placed on the 'all depend link step' line, it conflicts with
 *       gnu make rules.
 */
#ifdef CommonCodeDirs
# undef CommonCodeDirs
#endif
#define CommonCodeDirs(step,srcs,locsubs,linkdir1,linkdir2,subdirs)     @@\
all depend link:: srcs                                                  @@\
srcs:                                                                   @@\
	@if test -f $@; then exit 0 ; \                                 @@\
	else \                                                          @@\
	   for j in locsubs; do \                                       @@\
		if test -f ./$$j/$@; then \                             @@\
		   echo "$(LN)" ./$$j/$@; \                             @@\
		   $(LN) ./$$j/$@ ./; \                                 @@\
		   exit 0; \                                            @@\
		fi; \                                                   @@\
	   done; \                                                      @@\
	   for j in subdirs; do \                                       @@\
		if test -f linkdir1/$$j/$@; then \                      @@\
		   echo "$(LN)" linkdir1/$$j/$@; \                      @@\
		   $(LN) linkdir1/$$j/$@ ./; \                          @@\
		   exit 0; \                                            @@\
		else \                                                  @@\
		   if test -f linkdir2/$$j/$@; then \                   @@\
			echo "$(LN)" linkdir2/$$j/$@; \                 @@\
			 $(LN) linkdir2/$$j/$@ ./; \                    @@\
			exit 0; \                                       @@\
		   fi; \                                                @@\
		fi; \                                                   @@\
	   done \                                                       @@\
	fi                                                              @@\
clean unlink::                                                          @@\
	find . -type l -exec rm -f {} \;

/*
* CommonCodeMany - Make soft links from common files to current directory.
* Multiple directories.
*/
#ifdef CommonCodeMany
# undef CommonCodeMany
#endif
#define CommonCodeMany(step,srcs,linkdirs,subdirs)			@@\
all depend link step:: srcs						@@\
srcs:									@@\
	@if test -f $@; then echo ; \					@@\
	else \								@@\
	   for j in subdirs; do \					@@\
		for k in linkdirs; do \					@@\
		   if test -f $@; then echo > /dev/null ; \		@@\
		   else \						@@\
			if test -f $$k/$$j/$@; then \			@@\
			   echo "$(LN)" $$k/$$j/$@; \			@@\
			   $(LN) $$k/$$j/$@ ./; \			@@\
			fi \						@@\
		   fi \							@@\
		done \							@@\
	   done \							@@\
	fi								@@\
clean unlink::								@@\
	find . -type l -exec rm -f {} \;

/***********************************************************************/
/* Library building Rules                                              */
/***********************************************************************/

/*
 * MakeAllLibraries - If subdirectory exists, move into the subdirectory,
 * build and install the targets
 */
#ifdef MakeAllLibraries
# undef MakeAllLibraries
#endif
#define MakeAllLibraries(subdir,flags)					@@\
all::									@@\
	@for j in subdir ; \						@@\
	do \                                                            @@\
		if test -d $$j; then \                                  @@\
		echo "making all in $$j" ; \				@@\
		(cd $$j && $(MAKE) $(MFLAGS) flags all) ; \		@@\
		(cd $$j && $(MAKE) install) ; \				@@\
		fi; \                                                   @@\
	done

/*
 * LibraryTargetSubdirsCopy - Build a library and copy the library to
 * another destination. Used for building ExodusII libraries
 */
#ifdef LibraryTargetSubdirsCopy
# undef LibraryTargetSubdirsCopy
#endif
#define LibraryTargetSubdirsCopy(libname,objlist,dest)			@@\
AllTarget(libname)                                                      @@\
libname: objlist                                                        @@\
	MakeLibrary($@,$?)                                              @@\
	RanLibrary($@)                                                  @@\
	_LinkBuildLibrary($@)                                           @@\
	CopyFile(libname,dest)

/*
 * LibraryTargetSubDirs - Build a library with the source in multiple
 * subdirectories. Used for building chaco.  May soon be obsolete.
 */
#ifdef LibraryTargetSubDirs
# undef LibraryTargetSubDirs
#endif
#define LibraryTargetSubDirs(libname,objlist,dest)                      @@\
AllTarget(Concat(dest,libname))                                         @@\
Concat(dest,libname):: objlist                                          @@\
	MakeLibrary($@,$?)						@@\
	RanLibrary($@)							@@\
libname:: Concat(dest,libname)

/*
 * LibraryTargetSubDirs - Build a library with the source in multiple
 * subdirectories. Used for building supes and supesdp.
 */
#ifdef LibraryTargetSubdirs
# undef LibraryTargetSubdirs
#endif
#define LibraryTargetSubdirs(libname,objlist,dest)                      @@\
AllTarget(libname Concat(dest,libname))                                 @@\
libname:: objlist                                                       @@\
	MakeLibrary(Concat(dest,libname),$?)				@@\
	RanLibrary(Concat(dest,libname))

/***********************************************************************/
/* Library Installation Rules                                          */
/***********************************************************************/

/*
 * InstallRenamedLibrary - Copy libname to newlibname and install
 */
#ifdef InstallRenamedLibrary
# undef InstallRenamedLibrary
#endif
#define	InstallRenamedLibrary(step,libname,newlibname,dest)		@@\
step:: libname								@@\
	MakeDir(dest)							@@\
	CopyFile(libname,newlibname)					@@\
	$(INSTALL) $(INSTALLFLAGS) $(INSTLIBFLAGS) newlibname dest	@@\
	RanLibrary($(RANLIBINSTFLAGS) dest/newlibname)

/***********************************************************************/
/* Target Building Rules                                               */
/***********************************************************************/

/*
 * MakeAllTargets - If subdirectory exists, move into the subdirectory
 * and execute a make all.
 */
#ifdef MakeAllTargets
# undef MakeAllTargets
#endif
#define MakeAllTargets(subdir,flags)					@@\
all::									@@\
	@for j in subdir ; \						@@\
	do \                                                            @@\
		if test -d $$j; then \                                  @@\
		echo "making all in $$j" ; \				@@\
		(cd $$j && $(MAKE) $(MFLAGS) flags all); \		@@\
		fi; \                                                   @@\
	done

/*
 * MakeAllResults - If subdirectory exists, move into the subdirectory
 * and execute a make results.
 */
#ifdef MakeAllResults
# undef MakeAllResults
#endif
#define MakeAllResults(subdir,flags)					@@\
results::								@@\
	@for j in subdir ; \						@@\
	do \                                                            @@\
		if test -d $$j; then \                                  @@\
		echo "making all in $$j" ; \				@@\
		(cd $$j && $(MAKE) $(MFLAGS) flags results); \		@@\
		fi; \                                                   @@\
	done

/*
 * MakeAllDiffs - If subdirectory exists, move into the subdirectory
 * and execute a make diff.
 */
#ifdef MakeAllDiffs
# undef MakeAllDiffs
#endif
#define MakeAllDiffs(subdir,flags)					@@\
diff::									@@\
	@for j in subdir ; \						@@\
	do \                                                            @@\
		if test -d $$j; then \                                  @@\
		echo "making all in $$j" ; \				@@\
		(cd $$j && $(MAKE) $(MFLAGS) flags diff); \		@@\
		fi; \                                                   @@\
	done

/*
 * NormalFortran90Target - generate rules to compile and link the indicated
 * program
 */
#ifdef NormalFortran90Target
# undef NormalFortran90Target
#endif
#define NormalFortran90Target(program,objects,deplibs,locallibs,syslibs)@@\
AllTarget(program)                                                      @@\
ProgramTargetName(program):: objects deplibs                            @@\
	F90LinkRule($@,$(LDOPTIONS),objects locallibs,$(LDLIBS) syslibs $(F90EXTRALIBRARIES))                                                           @@\
                                                                        @@\
clean::                                                                 @@\
	RemoveFile(ProgramTargetName(program))
 
/*
 * F90LinkRule - link a fortran program
 */
#ifdef F90LinkRule
# undef F90LinkRule
#endif
#define F90LinkRule(program,options,objects,libraries) \
$(F90C) -o program options objects $(LIBPATH) libraries $(EXTRA_LOAD_FLAGS) $(F90EXTRALDOPTIONS)
 
/*
 * NormalFortranTarget - generate rules to compile and link the indicated
 * program
 */
#ifdef NormalFortranTarget
# undef NormalFortranTarget
#endif
#define NormalFortranTarget(program,objects,deplibs,locallibs,syslibs)  @@\
AllTarget(program)                                                      @@\
ProgramTargetName(program):: objects deplibs                            @@\
	F77LinkRule($@,$(LDOPTIONS),objects locallibs,$(LDLIBS) syslibs)@@\
                                                                        @@\
clean::                                                                 @@\
	RemoveFile(ProgramTargetName(program))

/*
 * F77LinkRule - link a fortran program
 */
#ifndef F77LinkRule
#define F77LinkRule(program,options,objects,libraries) \
$(FC) -o program options objects $(LIBPATH) libraries $(EXTRA_LOAD_FLAGS)
#endif

#ifdef NormalCTarget
# undef NormalCTarget
#endif
#define NormalCTarget(program,objects,deplibs,locallibs,syslibs)        @@\
AllTarget(program)                                                      @@\
ProgramTargetName(program):: objects deplibs                            @@\
	CCLinkRule($@,$(LDOPTIONS),objects locallibs,$(LDLIBS) syslibs) @@\
                                                                        @@\
clean::                                                                 @@\
	RemoveFile(ProgramTargetName(program))

/*
 * CCLinkRule - link a fortran program
 */
#ifdef CCLinkRule
# undef CCLinkRule
#endif
#define CCLinkRule(program,options,objects,libraries) \
$(CC) -o program options objects $(LIBPATH) libraries $(EXTRA_LOAD_FLAGS)

#ifdef NormalCCTarget
# undef NormalCCTarget
#endif
#define NormalCCTarget(program,objects,deplibs,locallibs,syslibs)       @@\
AllTarget(program)                                                      @@\
ProgramTargetName(program):: objects deplibs                            @@\
	CCPlusLinkRule($@,$(CXXLDOPTIONS),objects locallibs,$(CXXLDLIBS) syslibs) @@\
                                                                        @@\
clean::                                                                 @@\
	RemoveFile(ProgramTargetName(program))

/*
 * CCPlusLinkRule - link a fortran program
 */
#ifdef CCPlusLinkRule
# undef CCPlusLinkRule
#endif
#define CCPlusLinkRule(program,options,objects,libraries) \
$(CXX) -o program options objects $(LIBPATH) libraries $(EXTRA_LOAD_FLAGS)


/***********************************************************************/
/* Makeinclude Rules                                                   */
/***********************************************************************/

/*
 * InstallIncludeList - Install list of include files.
 */
#ifdef InstallIncludeList
# undef InstallIncludeList
#endif
#define InstallIncludeList(step,includes,dest)				@@\
step::									@@\
	@for j in includes ; \                                          @@\
	do \                                                            @@\
		echo "installing $$j in "dest ; \                       @@\
		$(RM) dest/$$j ; \                                      @@\
		$(INSTALL) -c $(INSTINCFLAGS) $$j dest/$$j ; \          @@\
	done 

/*
 * InstallSubdirIncludeList - Install list of include files from a subdirectory.
 */
#ifdef InstallSubdirIncludeList
# undef InstallSubdirIncludeList
#endif
#define InstallSubdirIncludeList(step,subdir,includes,dest)		@@\
step::									@@\
	@for j in includes ; \                                          @@\
	do \                                                            @@\
		echo "installing $$j in "dest ; \                       @@\
		$(RM) dest/$$j ; \                                      @@\
		(cd subdir && $(INSTALL) -c $(INSTINCFLAGS) $$j dest/$$j); \ @@\
	done 

/***********************************************************************/
/* Generate Script Rules                                               */
/***********************************************************************/

/*
 * Translate XCOMM into pound sign with sed, rather than passing -DXCOMM=XCOMM
 * to cpp, because that trick does not work on all ANSI C preprocessors.
 * Also delete line numbers from the cpp output (-P is not portable, I guess).
 */
#ifdef CppSedMagic
# undef CppSedMagic
#endif
#define CppSedMagic sed -e '/^#  *[0-9][0-9]*  *.*$$/d' -e '/^XCOMM$$/s//#/' -e '/^XCOMM[^a-zA-Z0-9_]/s/^XCOMM/#/' -e '/^[        ]*$$/d' -e '/^#line/d' -e '/^#pragma/d'  -e '/^@@/s/^@@//'

/*
 * CppScriptTarget - generate rules to create a shell script by running the
 * input through cpp.  If the ExecableScripts configuration parameter is not
 * set, then make sure that the first line begins with a colon.
 */
#ifdef AccessScripts
# undef AccessScripts
#endif
#if ExecableScripts             /* can use #! instead of colon */
#if NeedsScriptPatch
#define AccessScripts(dst,basename,defs,deplist)			@@\
AllTarget(dst)                                                          @@\
dst:: basename.c basename.h deplist					@@\
	$(CC) -P defs basename.c					@@\
	RemoveFile($@)                                                  @@\
	CppSedMagic basename.i >$@					@@\
	rm basename.i							@@\
	chmod a+x $@                                                    @@\
                                                                        @@\
clean::                                                                 @@\
	RemoveFile(dst)
#else
#define AccessScripts(dst,basename,defs,deplist)			@@\
AllTarget(dst)                                                          @@\
dst:: basename.c basename.h deplist                                     @@\
	RemoveFile($@)                                                  @@\
	$(CPP) defs <basename.c | CppSedMagic >$@                       @@\
	chmod a+x $@                                                    @@\
                                                                        @@\
clean::                                                                 @@\
	RemoveFile(dst)
#endif
#else
#define AccessScripts(dst,src,defs,deplist)				@@\
AllTarget(dst)                                                          @@\
dst::  src deplist                                                      @@\
	RemoveFile($@)                                                  @@\
	echo \: >$@                                                     @@\
	sed '1d' src | $(CPP) defs | CppSedMagic >>$@                   @@\
	chmod a+x $@                                                    @@\
                                                                        @@\
clean::                                                                 @@\
	RemoveFile(dst)
#endif /* ExecableScripts */

/***********************************************************************/
/* Generate GUI Rules                                                  */
/***********************************************************************/

/*
 * InstallSubdirIncludeList - Install list of include files from a subdirectory.
 */
#ifdef RapGui
# undef  RapGui
#endif
#define RapGui()							@@\
all rap::								@@\
	@$(CP) rap_orig rap; \                                          @@\
	if [ -f rap_tmp ]; then $(RM) rap_tmp; fi; \                    @@\
	sed -e "s%rap_location%$(ACCESSSRC)/guis/rap%" rap > rap_tmp; \ @@\
	$(MV) rap_tmp rap


/***********************************************************************/
/* Modified Rules from Imake.rules file.  Check if directory exists    */
/* before executing rules                                              */
/***********************************************************************/

/*
 * NamedTargetSubdirs - recursively make a series of steps if the 
 * directory exist
 */
#if defined(NamedTargetSubdirs) && !defined(WIN32)
# undef NamedTargetSubdirs
#define NamedTargetSubdirs(name,dirs,verb,flags,subname)                @@\
name::                                                                  @@\
	@MakeFlagsToShellFlags(ik,set +e); \                            @@\
	for i in dirs ;\                                                @@\
	do \                                                            @@\
		if test -d $$i; then \                                  @@\
		echo verb "in $(CURRENT_DIR)/$$i..."; \                 @@\
		(cd $$i &&  $(MAKE) $(MFLAGS) flags subname); \         @@\
		fi; \                                                   @@\
	done
#endif

/*
 * MakeMakeSubdirs - generate rules to recursively recreate Makefiles as part
 * of the specified step in the build.  If $(TOP) is set to an absolute path, 
 * do not prepend the ../ prefix.  This makes running things outside of the 
 * source tree much easier.
 * $(ONESUBDIR)/Makefile exists as a separate, explicit target so that
 * clearmake will know what its goal is and do wink-in.
 * CHANGE: Added if -test -d $$i to check for directory existance
 */
#ifdef MakeMakeSubdirs
#ifndef WIN32
#undef MakeMakeSubdirs
#define MakeMakeSubdirs(dirs,target)					@@\
$(ONESUBDIR)/Makefile:							@@\
	@MakeFlagsToShellFlags(n,executeit="no"); \			@@\
	cd $(ONESUBDIR); \						@@\
	if [ "$$executeit" != "no" ]; then \				@@\
	  case "$(ONECURDIR)" in \					@@\
	   "") CurrentTopDir=$(ONESUBDIR) ;; \				@@\
	    *) CurrentTopDir=`echo $(ONECURDIR) | sed "s%/.*%%"` ;; \	@@\
	  esac; \							@@\
	  if [ "$$CurrentTopDir" = "$(PARNETCDFSRC)" -o \		@@\
	       "$$CurrentTopDir" = "$(PARLIBRARIESSRC)" ]; then \	@@\
		ImakeSubCmdHelper $(PARALLELIMAKEFLAG) \		@@\
				  -DTOPDIR=$(IMAKETOP) \		@@\
	                          -DCURDIR=$(ONECURDIR)$(ONESUBDIR); \  @@\
	  else \ 							@@\
		ImakeSubCmdHelper -DTOPDIR=$(IMAKETOP) \		@@\
	                          -DCURDIR=$(ONECURDIR)$(ONESUBDIR); \  @@\
	  fi; \								@@\
	fi;								@@\
									@@\
target::								@@\
	-@MakeFlagsToShellFlags(ik,set +e); \				@@\
	MakeFlagsToShellFlags(n,executeit="no"); \			@@\
	for i in dirs ;\						@@\
	do \								@@\
		if test -d $$i; then \                                  @@\
		case "$(CURRENT_DIR)" in \				@@\
		.) curdir= ;; \						@@\
		*) curdir=$(CURRENT_DIR)/ ;; \				@@\
		esac; \							@@\
		echo "making Makefiles in $$curdir$$i..."; \		@@\
		itmp="$$i" \						@@\
		curtmp="$(CURRENT_DIR)" \				@@\
		toptmp=""; \						@@\
		case "$$itmp" in \					@@\
		    ../?*) \ 						@@\
			while echo "$$itmp" | grep '^../' > /dev/null;\	@@\
			  do \						@@\
			     toptmp="/`basename $$curtmp`$$toptmp"; \	@@\
			     curtmp="`dirname $$curtmp`"; \		@@\
			     itmp="`echo $$itmp | sed 's;../;;'`"; \	@@\
			  done \					@@\
		    ;; \						@@\
		esac; \							@@\
		case "$$itmp" in \					@@\
		*/?*/?*/?*/?*)	newtop=../../../../..;; \		@@\
		*/?*/?*/?*)	newtop=../../../..;; \			@@\
		*/?*/?*)	newtop=../../..;; \			@@\
		*/?*)		newtop=../..;; \			@@\
		*)		newtop=..;; \				@@\
		esac; \							@@\
		newtop="$$newtop$$toptmp"; \				@@\
		case "$(TOP)" in \					@@\
		/?*) imaketop=$(TOP) \					@@\
		     imakeprefix= ;; \					@@\
		.) imaketop=$$newtop \					@@\
		   imakeprefix=$$newtop/ ;; \				@@\
		*) imaketop=$$newtop/$(TOP) \				@@\
		   imakeprefix=$$newtop/ ;; \				@@\
		esac; \							@@\
		RemoveFile($$i/Makefile.bak); \				@@\
		if [ -f $$i/Makefile ]; then \				@@\
			echo "	$(MV) Makefile Makefile.bak"; \		@@\
			if [ "$$executeit" != "no" ]; then \		@@\
				$(MV) $$i/Makefile $$i/Makefile.bak; \	@@\
			fi; \						@@\
		fi; \							@@\
		$(MAKE) $(MFLAGS) $(MAKE_OPTS) ONESUBDIR=$$i ONECURDIR=$$curdir IMAKETOP=$$imaketop IMAKEPREFIX=$$imakeprefix $$i/Makefile; \	@@\
		cd $$i;	\						@@\
		$(MAKE) $(MFLAGS) Makefiles; \				@@\
		cd $$newtop; \						@@\
		fi; \                                                   @@\
	done

#ifdef UseInstalled
#ifdef ImakeSubCmdHelper
#undef ImakeSubCmdHelper
#define ImakeSubCmdHelper $(IMAKE_CMD)
#endif
#else
#ifdef ImakeSubCmdHelper
#undef ImakeSubCmdHelper
#define ImakeSubCmdHelper $(IMAKEPREFIX)$(IMAKE) -I$(IMAKEPREFIX)$(IRULESRC) $(IMAKE_DEFINES) $(ITOOLS_DEFINES)
#endif
#endif
#endif
#endif

/***********************************************************************/
/* Parallel Building Rules                                             */
/***********************************************************************/

/*
 * MakeParallelSetup() - copy the libraries that reside in
 * the libraries directory into the parallellibraries directory.
 * Also, copy the netcdf library into the parallelnetcdf directory.
 * If access is built on a parallel machine, two sets of libraries
 * need to be built. One set of libraries is used to build/run the
 * pre/post codes on the service nodes.  The parallellibraries are
 * used to build the analysis codes which run on the compute nodes.
 *
 */
#ifdef MakeParallelSetup
# undef MakeParallelSetup
#endif
#define MakeParallelSetup(dirs1,dirs2)					@@\
parallelsetup::								@@\
	for i in dirs1 ; \						@@\
	do \								@@\
		if test -d $(LIBRARIESSRC)/$$i; then \			@@\
		($(CP) -r $(LIBRARIESSRC)/$$i $(PARLIBRARIESSRC)); \	@@\
		fi; \							@@\
	done ; \							@@\
	for i in dirs2 ; \						@@\
	do \								@@\
		if test -d $(NETCDFSRC)/$$i; then \			@@\
		($(CP) -r $(NETCDFSRC)/$$i $(PARNETCDFSRC)); \		@@\
		fi; \							@@\
	done ; \                                                        @@\
        ($(CP) $(NETCDFSRC)/runconfigure.in $(PARNETCDFSRC))
        

/***********************************************************************/
/* Building and Installing Netcdf                                      */
/***********************************************************************/

/*
 * MakeNetcdfMakefiles - generate the netcdf Makefiles by running
 * the configure script and install the include files.
 */
#ifdef MakeNetcdfMakefiles
# undef MakeNetcdfMakefiles
#endif
#define MakeNetcdfMakefiles(netcdfpath,accesspath,custom)		@@\
Makefiles:: runconfigure						@@\
	@echo "Making Makefiles for netcdfpath on arch $(NETDEFS)"; \	@@\
	      (cd netcdfpath; \						@@\
	      if [ -f makefiles.log ]; then $(RM) makefiles.log; fi; \	@@\
	      if [ -f config.cache ]; then $(RM) config.cache; fi; \	@@\
	      ./runconfigure --prefix=accesspath > makefiles.log)

/*
 * MakeNetcdfmakeincludes - install the netcdf include files.
 */
#ifdef MakeNetcdfmakeincludes
# undef MakeNetcdfmakeincludes
#endif
#define MakeNetcdfmakeincludes(netcdfpath,accesspath)			@@\
makeincludes::								@@\
	@echo "Installing netcdf include files: "; \			@@\
	 echo "installing netcdf.h in accesspath/inc"; \		@@\
	      ($(CP) netcdfpath/libsrc/netcdf.h accesspath/inc)

/*
 * MakeNetcdfNoinstall - Generate the netcdf Makefiles and build
 * the library.  Does not install the libraries.
 */
#ifdef MakeNetcdfNoinstall
# undef MakeNetcdfNoinstall
#endif
#define MakeNetcdfNoinstall(netcdfpath,accesspath,custom)		@@\
noinstall::	runconfigure						@@\
	@echo "Running configure in netcdfpath for arch $(NETDEFS)"; \	@@\
	 (cd netcdfpath; \						@@\
	      if [ -f makefiles.log ]; then $(RM) makefiles.log; fi; \	@@\
	      if [ -f config.cache ]; then $(RM) config.cache; fi; \	@@\
	      ./runconfigure --prefix=accesspath > makefiles.log); \	@@\
	      echo "making all..."; \					@@\
	      (cd netcdfpath; $(MAKE) all);

/*
 * MakeCrossNetcdfNoinstall - cross compiler version of
 *                            MakeNetcdfNoinstall
 */
#ifdef MakeCrossNetcdfNoinstall
# undef MakeCrossNetcdfNoinstall
#endif
#define MakeCrossNetcdfNoinstall(netcdfpath,accesspath,custom)		@@\
noinstall::	runconfigure						@@\
	@echo "Running configure in netcdfpath for arch $(NETDEFS)"; \	@@\
	 (cd netcdfpath; \						@@\
	      if [ -f makefiles.log ]; then $(RM) makefiles.log; fi; \	@@\
	      if [ -f config.cache ]; then $(RM) config.cache; fi; \	@@\
	      ./runconfigure --prefix=accesspath > makefiles.log); \	@@\
	      echo "making all..."; \					@@\
	      (cd netcdfpath/libsrc; \					@@\
	         $(CP) ncconfig_$(custom).h ncconfig.h ); \		@@\
	      (cd netcdfpath; $(MAKE) all)

/*
 * MakeNetcdfParallelNoinstall - Generate the parallelnetcdf Makefiles
 * and build the library.  Does not install the libraries.
 */
#ifdef MakeNetcdfParallelNoinstall
# undef MakeNetcdfParallelNoinstall
#endif
#define MakeNetcdfParallelNoinstall(netcdfpath,accesspath,custom)	@@\
noinstall::	runconfigure						@@\
	@echo "Running configure in netcdfpath for arch $(NETDEFS)"; \	@@\
	 (cd netcdfpath; \						@@\
	      if [ -f makefiles.log ]; then $(RM) makefiles.log; fi; \	@@\
	      if [ -f config.cache ]; then $(RM) config.cache; fi; \	@@\
	      ./runconfigure --prefix=accesspath > makefiles.log); \	@@\
	      echo "making all in netcdfpath/libsrc"; \			@@\
	      (cd netcdfpath/libsrc; $(MAKE) all)

/*
 * MakeCrossNetcdfParallelNoinstall - cross compiler version of
 *                                    MakeNetcdfParallelNoinstall
 */
#ifdef MakeCrossNetcdfParallelNoinstall
# undef MakeCrossNetcdfParallelNoinstall
#endif
#define MakeCrossNetcdfParallelNoinstall(netcdfpath,accesspath,custom)	@@\
noinstall::	runconfigure						@@\
	@echo "Running configure in netcdfpath for arch $(NETDEFS)"; \	@@\
	 (cd netcdfpath; \						@@\
	      if [ -f makefiles.log ]; then $(RM) makefiles.log; fi; \	@@\
	      if [ -f config.cache ]; then $(RM) config.cache; fi; \	@@\
	      ./runconfigure --prefix=accesspath > makefiles.log); \	@@\
	      echo "making all in netcdfpath/libsrc"; \			@@\
	      (cd netcdfpath/libsrc; \					@@\
	         $(CP) ncconfig_$(custom).h ncconfig.h ); \		@@\
	      (cd netcdfpath; $(MAKE) all)

/***********************************************************************/
/*                                      */
/***********************************************************************/

/*
 * MakeNetcdfAll
 */
#ifdef MakeNetcdfAll
# undef MakeNetcdfAll
#endif
#define MakeNetcdfAll(netcdfpath,accesspath,custom)			@@\
all::		runconfigure						@@\
	@echo "Running configure in netcdfpath for arch $(NETDEFS)"; \	@@\
	 (cd netcdfpath; \						@@\
	      if [ -f makefiles.log ]; then $(RM) makefiles.log; fi; \	@@\
	      if [ -f config.cache ]; then $(RM) config.cache; fi; \	@@\
	      ./runconfigure --prefix=accesspath > makefiles.log); \	@@\
	      echo "making all..."; \					@@\
	      echo "installing library files in accesspath/lib" ;\	@@\
	      echo "installing include files in accesspath/inc" ;\	@@\
	      (cd netcdfpath; $(MAKE) all && $(MAKE) install)

/*
 * MakeCrossNetcdfAll - cross compiler version of
 *                      MakeNetcdfAll
 */
#ifdef MakeCrossNetcdfAll
# undef MakeCrossNetcdfAll
#endif
#define MakeCrossNetcdfAll(netcdfpath,accesspath,custom)		@@\
all::		runconfigure						@@\
	@echo "Running configure in netcdfpath for arch $(NETDEFS)"; \	@@\
	 (cd netcdfpath; \						@@\
	      if [ -f makefiles.log ]; then $(RM) makefiles.log; fi; \	@@\
	      if [ -f config.cache ]; then $(RM) config.cache; fi; \	@@\
	      ./runconfigure --prefix=accesspath > makefiles.log); \	@@\
	      echo "making all in ./libsrc, ./ncdump and ./ncgen"; \	@@\
	      echo "installing library files in accesspath/lib" ;\	@@\
	      echo "installing include files in accesspath/inc" ;\	@@\
	      (cd netcdfpath/libsrc; \					@@\
	         $(CP) ncconfig_$(custom).h ncconfig.h ); \		@@\
	      (cd netcdfpath; $(MAKE) all && $(MAKE) install)

/*
 * MakeNetcdfParallelAll
 */
#ifdef MakeNetcdfParallelAll
# undef MakeNetcdfParallelAll
#endif
#define MakeNetcdfParallelAll(netcdfpath,accesspath,custom)		@@\
all::		runconfigure						@@\
	@echo "Running configure in netcdfpath for arch $(NETDEFS)"; \	@@\
	 (cd netcdfpath; \						@@\
	      if [ -f makefiles.log ]; then $(RM) makefiles.log; fi; \	@@\
	      if [ -f config.cache ]; then $(RM) config.cache; fi; \	@@\
	      ./runconfigure --prefix=accesspath > makefiles.log); \	@@\
	      echo "making all..."; \					@@\
	      echo "installing netcdf.h in accesspath/inc"; \		@@\
	      (cd netcdfpath; $(MAKE) all && $(MAKE) install)

/*
 * MakeCrossNetcdfParallelAll - cross compiler version of
 *                              MakeNetcdfParallelAll
 */
#ifdef MakeCrossNetcdfParallelAll
# undef MakeCrossNetcdfParallelAll
#endif
#define MakeCrossNetcdfParallelAll(netcdfpath,accesspath,custom)	@@\
all::		runconfigure						@@\
	@echo "Running configure in netcdfpath for arch $(NETDEFS)"; \	@@\
	 (cd netcdfpath; \						@@\
	      if [ -f makefiles.log ]; then $(RM) makefiles.log; fi; \	@@\
	      if [ -f config.cache ]; then $(RM) config.cache; fi; \	@@\
	      ./runconfigure --prefix=accesspath > makefiles.log); \	@@\
	      echo "making all in netcdfpath/libsrc"; \			@@\
	      echo "installing netcdf.h in accesspath/inc"; \		@@\
	      (cd netcdfpath/libsrc; \					@@\
	         $(CP) ncconfig_$(custom).h ncconfig.h ); \		@@\
	      (cd netcdfpath; $(MAKE) all && $(MAKE) install)

/*
 * MakeNetcdfInstall
 */
#ifdef MakeNetcdfInstall
# undef MakeNetcdfInstall
#endif
#define MakeNetcdfInstall(netcdfpath,accesspath,custom)			@@\
install::								@@\
	@echo "Installing netcdf library files in "accesspath/lib; \	@@\
	echo "installing netcdf include files in "accesspath/inc; \	@@\
	echo "installing ncdump and ncgen in accesspath/bin"; \		@@\
	      (cd netcdfpath; $(MAKE) install)

/*
 * MakeNetcdfParallelInstall
 */
#ifdef MakeNetcdfParallelInstall
# undef MakeNetcdfParallelInstall
#endif
#define MakeNetcdfParallelInstall(netcdfpath,accesspath,custom)		@@\
install::								@@\
	@echo "Installing netcdf library files in "accesspath/plib; \	@@\
	echo "installing netcdf include files in "accesspath/inc; \	@@\
	      (cd netcdfpath; $(MAKE) install)

/*
 * MakeNetcdfTest
 */
#ifdef MakeNetcdfTest
# undef MakeNetcdfTest
#endif
#define MakeNetcdfTest(netcdfpath)					@@\
test::									@@\
	@echo "Testing in netcdf"; \					@@\
	 (cd netcdfpath; $(MAKE) test)

/*
 * MakeNetcdfClean
 */
#ifdef MakeNetcdfClean
# undef MakeNetcdfClean
#endif
#define MakeNetcdfClean(netcdfpath)					@@\
clean::									@@\
	@echo "Cleaning in netcdf"; \					@@\
	 (cd netcdfpath; $(MAKE) clean)

#ifdef MakeAllParallelLibraries
# undef MakeAllParallelLibraries
#endif
#define MakeAllParallelLibraries(list,flags)				@@\
all::									@@\
	@for j in list ; \						@@\
	do \                                                            @@\
		if test -d $$j; then \                                  @@\
		echo "making all in $$j" ; \				@@\
		(cd $$j && $(MAKE) $(MFLAGS) flags all) ; \		@@\
		(cd $$j && $(MAKE) install.plib) ; \			@@\
		fi; \							@@\
	done

/*
 * InstallParallelLibrary
 */
#ifdef InstallParallelLibrary
# undef InstallParallelLibrary
#endif
#define InstallParallelLibrary(libname,dest)				@@\
install.plib:: LibraryTargetName(libname)				@@\
	MakeDir(dest)							@@\
	$(INSTALL) $(INSTALLFLAGS) $(INSTLIBFLAGS) LibraryTargetName(libname) dest

/***********************************************************************/
/*                                                */
/***********************************************************************/

/*
 * MakegrfenvShells - create the svdi grfenv scripts
 */
#ifdef MakegrfenvShells
# undef MakegrfenvShells
#endif
#define MakegrfenvShells(list)						@@\
.SUFFIXES: .csh .sh							@@\
all::									@@\
	@for j in list ;\						@@\
	do \								@@\
	(sed "s|PATHNAME|$(ACCESSDIR)|" $$j.$(SYSTEM) > $$j) ; \	@@\
	done

#ifdef MakeAllInstall
# undef MakeAllInstall
#endif
#define MakeAllInstall(list,flags)					@@\
all::									@@\
	@for j in list ; \						@@\
	do \                                                            @@\
		if test -d $$j; then \                                  @@\
		echo "making all in $$j" ; \				@@\
		(cd $$j && $(MAKE) $(MFLAGS) flags all) ; \		@@\
		(cd $$j && $(MAKE) install) ; \				@@\
		fi; \                                                   @@\
	done

#ifdef MakeTarget
# undef MakeTarget
#endif
#define MakeTarget(step,dir,flags)					@@\
step::									@@\
	@(cd dir && $(MAKE) flags all) ;


/*
* Rule to install list of data files.
*/
#ifdef InstallDatList
# undef InstallDatList
#endif
#define InstallDatList(step,data,dest)					@@\
step::									@@\
	@for j in data ; \						@@\
	do \								@@\
		echo "installing $$j in "dest ; \			@@\
		$(RM) dest/$jj ; \					@@\
		$(INSTALL) -c $(INSTDATFLAGS) $$j dest/$$j ; \		@@\
	done

/*
 * Rule to install list of include files.
 */
#ifdef InstallScriptList
# undef InstallScriptList
#endif
#define InstallScriptList(step,scripts,dest)				@@\
step::									@@\
	@for j in scripts ; \						@@\
	do \                                                            @@\
		echo "installing $$j in "dest ; \                       @@\
		$(RM) dest/$$j ; \                                      @@\
		$(INSTALL) -c $(INSTETCFLAGS) $$j dest/$$j ; \          @@\
	done

#ifdef InstallTargets
# undef InstallTargets
#endif
#define InstallTargets(step,list,flags,dest)				@@\
step::									@@\
	@for j in list ; \						@@\
	do \                                                            @@\
		echo "installing $$j in "dest ; \                       @@\
		$(RM) dest/$$j ; \					@@\
		$(INSTALL) -c flags $$j dest/$$j ; \			@@\
	done

/*
 * NormalLibraryTarget - generate rules to create a library.
 */
#ifdef NormalLibraryTarget
# undef NormalLibraryTarget
#endif
#define NormalLibraryTarget(libname,objlist)                            @@\
AllTarget(LibraryTargetName(libname))                                   @@\
                                                                        @@\
LibraryTargetName(libname): objlist                                     @@\
	MakeLibrary($@,$?)                                              @@\
	RanLibrary($@)                                                  @@\
	_LinkBuildLibrary($@)

/*
 * get project-specific test problem rules
 */
#ifdef ProjectTestrulesFile1
# undef ProjectTestrulesFile1
#endif
/*#define ProjectTestrulesFile1	Concat3(,TopLevelProject,.testrules)*/
# define ProjectTestrulesFile1 ACCESS.testrules
#ifdef ProjectTestrulesFile2
# undef ProjectTestrulesFile2
#endif
/*#define ProjectTestrulesFile2	Concat3(<,TopLevelProject,.testrules>)*/
# define ProjectTestrulesFile2 <ACCESS.testrules>
#include ProjectTestrulesFile2
# ifndef LocalTestrulesFile
/* need this to make ANSI-style preprocessors happy */
#define LocalTestrulesFile <noop.rules>
#endif
#include LocalTestrulesFile
