#!/bin/sh
#
#  Script for building SEACAS
#

# Script version:

ScriptVersion="3.1"

# Text color variables
txtund=$(tput sgr 0 1)    # Underline
txtbld=$(tput bold)       # Bold
txtred=$(tput setaf 1)    # Red
txtgrn=$(tput setaf 2)    # Green
txtylw=$(tput setaf 3)    # Yellow
txtblu=$(tput setaf 4)    # Blue
txtpur=$(tput setaf 5)    # Purple
txtcyn=$(tput setaf 6)    # Cyan
txtwht=$(tput setaf 7)    # White
txtrst=$(tput sgr0)       # Text reset

# Print prompt line:

PromptLine() {
if [ "`echo -n`" = "-n" ]; then
   echo "$1 \c"
else
   echo -n "$1 "
fi 
}

# Clear the screen:

ClearScreen() {
    clear 2>/dev/null ||
    tput clear 2 > /dev/null ||
    for i in 1 2 3 4 5 6 7 8 9 10
      do 
      echo
    done  
}

SetupAccess() {
    ClearScreen
    GetDefaultAccessRootDir
}  

# Function for reading in BOOTSTRAPCFLAGS:

GetLocalBootStrapCFlags() {
Platform=`grep "define Platform" $DefaultAccessRootDir/$SiteConfig |cut -f3 -d' '`
if [ $? -eq 1 ]; then
  Platform="prompt"
fi

echo "Platform = $Platform"

if [ "$Platform" = "interix" ]; then
    LocalBootStrapCFlags="-Dinterix"
    LocalConfigFile=interix
    LocalExtraBootStrapCFlags="CC=gcc" 
elif [ "$Platform" = "redstorm" ]; then
    LocalBootStrapCFlags="-DCrossCompiling -Dcrossredstorm" 
    LocalConfigFile=crossredstorm
    LocalExtraBootStrapCFlags="CC=gcc" 
elif [ "$Platform" = "prompt" ]; then
    echo ""
    if [ "$UseCurrentConfigFiles" = "YES" ]; then
	echo " Please choose the BOOTSTRAPCFLAGS needed for building the Imake tools by"
    else
	if [ "$InCommandMenu" = "YES" ]; then
	    echo "    Please choose the BOOTSTRAPCFLAGS needed for building the Imake tools by"
	else
	    echo " Please choose the BOOTSTRAPCFLAGS needed for building the Imake tools by"
	fi
    fi
    echo "    selecting your machine type/operating system from the menu below or by"
    echo "    entering the bootstrap flags directly:" 
    echo ""
    echo "      0. Any system not listed below..."
    echo ""
    echo "      1. Sandia REDSTORM (cross compiling)"
    echo "      2. PC/Interix"
    echo "      3. Enter BOOTSTRAPCFLAGS"
    echo ""
    if [ "$InCommandMenu" = "YES" ]; then
	echo "      4. Return to the command menu"
    else
	echo "      4. Return to the main menu"
    fi
    echo ""
    echo "    Please enter the number corresponding to your choice: "
    PromptLine "Press <RETURN> for \"Any system not listed below...\": "
    while :
      do
      read LocalBootStrapCFlags
      test "$LocalBootStrapCFlags" || LocalBootStrapCFlags=0
      case "$LocalBootStrapCFlags" in
	  0 ) LocalBootStrapCFlags=""
              break ;;
	  1 ) LocalBootStrapCFlags="-DCrossCompiling -Dcrossredstorm" 
	      LocalConfigFile=crossredstorm
	      LocalExtraBootStrapCFlags="CC=gcc" 
	      break ;;
	  2 ) LocalBootStrapCFlags="-Dinterix" 
	      LocalConfigFile=interix
	      LocalExtraBootStrapCFlags="CC=gcc" 
	      break ;;
          3 ) PromptLine "    Please enter the BOOTSTRAPCFLAGS you want to use: "
	      read LocalBootStrapCFlags
	      break ;;
          4 ) ReturnToMenu=YES
	      break ;;
	  * ) PromptLine "    Please try again: " 
	      ;;
      esac
    done
fi
}


# Function for getting the SEACAS root directory and other settings from
# the ACCESS/itools/config/cf/site.def file

GetDefaultAccessRootDir() {
DefaultAccessRootDir=`/bin/pwd`
SiteConfig="ACCESS/itools/config/cf/site.def"    

if [ ! -d $DefaultAccessRootDir/ACCESS/itools/config/cf ]; then
    echo ""
    echo "\"$DefaultAccessRootDir/ACCESS/itools/config/cf\" does not exist!"
    echo "The basic SEACAS directory structure is not setup correctly"
    echo "or you are running the script from the wrong directory!"
    echo "Exiting the script..."
    echo ""
    exit
fi

if [ ! -f $DefaultAccessRootDir/$SiteConfig ]; then
   echo ""
   echo "\"$DefaultAccessRootDir/$SiteConfig\" does \
not exist!"
   echo "One of the main SEACAS configuration files is missing!"
   echo "Exiting the script..."
   echo ""
   exit
fi

# Check that DefaultAccessRootDir (pwd for script execution) and the
# value in site.def match...
# The cd wierdness is that sometimes two strings don't match, but they
# refer to the same path...
FileAccessRootDir=`grep "define AccessRoot" $DefaultAccessRootDir/$SiteConfig |cut -f3 -d' '`
cd $FileAccessRootDir; FileAccessRootDir=`/bin/pwd`; cd $DefaultAccessRootDir
if [ $DefaultAccessRootDir != $FileAccessRootDir ]; then
    echo "Settings conflict:"
    echo "  Your current working directory $DefaultAccessRootDir"
    echo "  Must match the AccessRoot setting in site.def: $FileAccessRootDir"
    echo ""
    echo "The script will now exit so you can correct this problem."
    exit
fi

DefaultAccessRootDirSet=YES
ACCESS=$DefaultAccessRootDir; export ACCESS
PATH=$ACCESS/etc:$ACCESS/bin:$PATH; export PATH

DefaultGroup=`grep "define Group" $DefaultAccessRootDir/$SiteConfig |cut -f3 -d' '`

#
# Check that netcdf exists...
#
nc_vers=`grep -m 1 V_NUM $DefaultAccessRootDir/ACCESS/netcdf/Imakefile |cut -f2 -d'='`
if [ ! -e $DefaultAccessRootDir/ACCESS/netcdf/$nc_vers ] ; then
    echo "${txtred}"
    echo "  ERROR: NETCDF library not found."
    echo "  The directory $DefaultAccessRootDir/ACCESS/netcdf/$nc_vers"
    echo "  does not exist.  Have you downloaded and installed netcdf?${txtrst}"
    echo ""
    echo "  The script will now exit so you can correct this problem."
    echo ""
    exit
fi
}


# Command execution function:

ExecuteCommand() {
Command=$1
LogFile=$DefaultAccessRootDir/Logs/$2
DirName=$3
LocalBootStrapCFlags=$4
NextCommand=$5
if [ \( "$LocalConfigFile" = "interix" \) -o \( "$LocalConfigFile" = "crossredstorm" \) ]; then 
   LocalExtraBootStrapCFlags=$6
fi

LocalBootStrapCFlags=`echo $LocalBootStrapCFlags | sed 's/^ *//' | sed 's/ *$//'`
if [ "$LocalBootStrapCFlags" = "" ]; then
   NoBootStrapCFlags=YES
fi

cd $DirName

echo ""
if [ "$Command" = "make World" ]; then
if [ \( "$LocalConfigFile" = "interix" \) -o \( "$LocalConfigFile" = "crossredstorm" \) ]; then 
      echo "Executing '$Command  BOOTSTRAPCFLAGS=\"$LocalBootStrapCFlags\" EXTRA_BOOTSTRAPCFLAGS=\"$LocalExtraBootStrapCFlags\"' in $DirName"
   else
      if [ "$NoBootStrapCFlags" = "YES" ]; then
         echo "Executing ${txtpur}'$Command'${txtrst} in $DirName"
      else
         echo "Executing '$Command  BOOTSTRAPCFLAGS=\"$LocalBootStrapCFlags\"' in $DirName"
      fi
   fi
else
   echo "Executing ${txtpur}'$Command'${txtrst} in $DirName"
fi
echo "   Command output is saved in $LogFile"

if [ ! -e $DefaultAccessRootDir/Logs ] ; then
   mkdir $DefaultAccessRootDir/Logs
fi

if [ -f $LogFile ]; then
        i=1
        while [ -f $LogFile.$i ]
        do
           i=`expr $i + 1`
        done
        mv $LogFile $LogFile.$i
        echo "   Previous log file moved to "$LogFile"."$i""
fi

if [ "$Command" = "make World" ]; then
if [ \( "$LocalConfigFile" = "interix" \) -o \( "$LocalConfigFile" = "crossredstorm" \) ]; then 
      (make World BOOTSTRAPCFLAGS="$LocalBootStrapCFlags" EXTRA_BOOTSTRAPCFLAGS="$LocalExtraBootStrapCFlags" 2>&1) > $LogFile
   else
      if [ "$NoBootStrapCFlags" = "YES" ]; then
         (make World 2>&1) > $LogFile
      else
         (make World BOOTSTRAPCFLAGS="$LocalBootStrapCFlags" 2>&1) > $LogFile
      fi
   fi
else
   ($Command 2>&1) > $LogFile
fi

PossibleError=NO
err_chk=0
srch_for=""
grep ERROR $LogFile |grep -v MPI_ERRORS |grep -v warning: > /dev/null 
if [ $? -eq 0 ]; then
   srch_for="${srch_for} ERROR"
   err_chk=`expr $err_chk + 1`
   PossibleError=YES
fi
grep Error $LogFile |grep -v MPI_Error |grep -v ignored |grep -v PrintErrorStackOn > /dev/null 
if [ $? -eq 0 ]; then
   srch_for="${srch_for} Error"
   err_chk=`expr $err_chk + 2`
   PossibleError=YES
fi
grep "error:" $LogFile > /dev/null 
if [ $? -eq 0 ]; then
   srch_for="${srch_for} error:"
   err_chk=`expr $err_chk + 4`
   PossibleError=YES
fi
grep -i "can't" $LogFile > /dev/null 
if [ $? -eq 0 ]; then
   srch_for="${srch_for} can't"
   err_chk=`expr $err_chk + 8`
   PossibleError=YES
fi
grep -i cannot $LogFile |grep -v optimize > /dev/null 
if [ $? -eq 0 ]; then
   srch_for="${srch_for} cannot"
   err_chk=`expr $err_chk + 16`
   PossibleError=YES
fi
grep -i "don't" $LogFile > /dev/null 
if [ $? -eq 0 ]; then
   srch_for="${srch_for} don't"
   err_chk=`expr $err_chk + 32`
   PossibleError=YES
fi
grep -i "not found" $LogFile |grep -v warning > /dev/null 
if [ $? -eq 0 ]; then
   srch_for="${srch_for} not found"
   err_chk=`expr $err_chk + 64`
   PossibleError=YES
fi
grep -i "no space" $LogFile > /dev/null 
if [ $? -eq 0 ]; then
   srch_for="${srch_for} no space"
   err_chk=`expr $err_chk + 128`
   PossibleError=YES
fi

HasOptionC=NO
SkipIt=NO

if [ "$PossibleError" = "YES" ]; then
   echo ""
   echo "   ${txtred}An error might have occured! (Code=${err_chk})${txtrst}"
   echo ""
   echo "Please enter 'e' to exit and return to the menu, or enter 'v'"
   echo "to inspect the log file $LogFile in the vi editor and"
   echo "search for the following key words in all case variations:"
   if [ "$InCommandMenu" = "NO" ]; then
      if [ \( "$Command" = "make install" \) -a \
           \( "$BuildItoolsOnly" = "YES"  \) ]; then
         PromptLine "${txtred}${srch_for}${txtrst} " 
      else
         echo "${txtred}${srch_for}${txtrst}." 
         echo "Otherwise, enter 'c' to continue (without inspecting the log file)"
         HasOptionC=YES
         if [ "$Command" = "make clean" ]; then
            PromptLine "with building the SEACAS codes: "
         elif [ "$Command" = "make install" ]; then
            if [ "$InDoMakeInstallAccess" = "YES" ]; then
               PromptLine "with setting the group privileges: "
            else
               PromptLine "$NextCommand: "
            fi
         else
            PromptLine "$NextCommand: "
         fi
      fi
   else
# in the command menu:
      if [ "$Command" = "make clean" ]; then
         if [ "$MakeCleanSelected" = "NO" ]; then
            echo "${txtred}${srch_for}${txtrst}." 
            HasOptionC=YES
            PromptLine "Otherwise, enter 'c' to continue (without inspecting the log file): "
         else
            PromptLine "${txtred}${srch_for}${txtrst}: " 
         fi
      elif [ "$Command" = "make install" ]; then
          if [ "$InDoMakeInstallAccess" = "YES" ]; then
            echo "${txtred}${srch_for}${txtrst}." 
            echo "Otherwise, enter 'c' to continue (without inspecting the log file)"
            HasOptionC=YES
            PromptLine "with setting the group privileges :"
          else
            PromptLine "${txtred}${srch_for}${txtrst}: " 
          fi
      else
         PromptLine "${txtred}${srch_for}${txtrst}: " 
      fi
   fi
# read the user input now:
   while :
   do
      read Response1 
      case "$Response1" in
        e | E ) ReturnToMenu=YES
                break ;;
        v | V ) echo "Check the log file..."
                vi -R $LogFile 
                if [ "$InCommandMenu" = "NO" ]; then
                   echo ""
                   if [ "$Command" = "make install" ]; then
                      if [ "$BuildItoolsOnly" = "NO" ]; then
                          echo "Enter 'e' to exit and return to the menu or enter 'c' to continue"
                         if [ "$InDoMakeInstallItools" = "YES" ]; then
                            PromptLine "$NextCommand: "
                         else
                            PromptLine "with setting the group privileges: "
                         fi
                      else
                         SkipIt=YES
                      fi
                   else
                      echo "Enter 'e' to exit and return to the menu or enter 'c' to continue"
                      if [ "$Command" = "make clean" ]; then
                         PromptLine "with building the SEACAS codes: "
                      else
                         PromptLine "$NextCommand: "
                      fi
                   fi
                   if [ "$SkipIt" = "NO" ]; then
                      while :
                      do
                         read Response2
                         case "$Response2" in
                            c | C ) break ;;
                            e | E ) ReturnToMenu=YES
                                    break ;;
                                * ) PromptLine "Please try again: " 
                                    ;;
                         esac
                      done
                   fi
                else
# in the command menu:
                   if [ "$Command" = "make install" ]; then
                      if [ "$InDoMakeInstallItools" = "NO" ]; then
                          echo "Enter 'e' to exit and return to the menu or enter 'c' to continue"
                          PromptLine "with setting the group privileges: "
                      else
                         SkipIt=YES
                      fi
                   elif [ "$Command" = "make clean" ]; then
                      if [ "$MakeCleanSelected" = "NO" ]; then
                         PromptLine "Enter 'e' to exit and return to the menu or 'c' to continue: "
                      else 
                         SkipIt=YES
                      fi
                   else
                      SkipIt=YES
                   fi
                   if [ "$SkipIt" = "NO" ]; then
                      while :
                      do
                         read Response2
                         case "$Response2" in
                            c | C ) break ;;
                            e | E ) ReturnToMenu=YES
                                    break ;;
                                * ) PromptLine "Please try again: " 
                                    ;;
                         esac
                      done
                   fi
                fi
                break
                ;;
        c | C ) if [ "$HasOptionC" = "YES" ]; then
                   break
                else
                   PromptLine "Please try again: " 
                fi
                ;;
            * ) PromptLine "Please try again: " 
                ;;
      esac
   done
else
# if the script got here, no error has occured
   echo ""
   if [ "$Command" = "make World" ]; then
if [ \( "$LocalConfigFile" = "interix" \) -o \( "$LocalConfigFile" = "crossredstorm" \) ]; then 
         echo "   Command '$Command  BOOTSTRAPCFLAGS=\"$LocalBootStrapCFlags\" EXTRA_BOOTSTRAPCFLAGS=\"$LocalExtraBootStrapCFlags\"' executed successfully."
      else
         if [ "$NoBootStrapCFlags" = "YES" ]; then
            echo "${txtgrn}   Command '$Command' executed successfully.${txtrst}"
         else
            echo "${txtgrn}   Command '$Command  BOOTSTRAPCFLAGS=\"$LocalBootStrapCFlags\"' executed successfully.${txtrst}"
         fi
      fi
   else
      echo "${txtgrn}   Command '$Command' executed successfully.${txtrst}"
   fi
   if [ "$InCommandMenu" = "NO" ]; then
       SkipIt=YES
   else
# in the command menu:
      if [ "$Command" = "make install" ]; then
         if [ "$InDoMakeInstallAccess" = "YES" ]; then
            echo "Enter 'e' to exit and return to the menu or any other key to continue"
            PromptLine "with setting the group privileges: "
            read Response
            case "$Response" in
                 e | E ) ReturnToMenu=YES
                         break ;;
                     * ) : ;;
            esac
         else
            PromptLine "Press <RETURN> to return to the menu... "
            read Response
         fi
      elif [ "$Command" = "make clean" ]; then
         if [ "$MakeCleanSelected" = "YES" ]; then
            PromptLine "Press <RETURN> to return to the menu... "
            read Response
         fi
      else
         PromptLine "Press <RETURN> to return to the menu... "
         read Response
      fi
   fi
fi
}
# end of ExecuteCommand


# Function for executing "make World" in ACCESS/itools:

DoMakeWorld() {
ExecuteCommand "make World" "makeWorld.log" \
               "$DefaultAccessRootDir/ACCESS/itools" "$LocalBootStrapCFlags" \
               "with 'make install' in $DefaultAccessRootDir/ACCESS/itools" \
               "$LocalExtraBootStrapCFlags"
}


# Function for executing "make install" in ACCESS/itools:

DoMakeInstallItools() {
InDoMakeInstallAccess=NO
InDoMakeInstallItools=YES
ExecuteCommand "make install" "makeInstallItools.log" \
               "$DefaultAccessRootDir/ACCESS/itools" "" \
               "with 'accmkmf' in $DefaultAccessRootDir/ACCESS/"

ACCESS=$DefaultAccessRootDir; export ACCESS
PATH=$ACCESS/etc:$ACCESS/bin:$PATH; export PATH
InDoMakeInstallItools=NO
}


# Function for executing "accmkmf" in ACCESS:

DoAccmkmf() {
   ExecuteCommand "accmkmf" "accmkmf.log" "$DefaultAccessRootDir/ACCESS" "" \
                  "with 'make Makefiles'"
}


# Making Makefiles:

DoMakeMakefiles() {
ExecuteCommand "make Makefiles" "makeMakefiles.log" \
               "$DefaultAccessRootDir/ACCESS" "" \
               "with 'make makeincludes'"
}

# Making makeincludes:

DoMakeMakeincludes() {
ExecuteCommand "make makeincludes" "makemakeincludes.log" \
               "$DefaultAccessRootDir/ACCESS" "" \
               "with 'make clean'"
               
}

# Function for executing "make clean" in specified directory:

DoMakeClean() {
ExecuteCommand "make clean" "makeclean.log" "$1" "" ""
}

# Making netCDF:

DoMakeNetcdf() {
   ExecuteCommand "make netcdf" "makenetcdf.log" \
                  "$DefaultAccessRootDir/ACCESS" "" \
                  "with 'make hdf5'"
}

# Making serial_mpi:

DoMakeSIMPI() {
ExecuteCommand "make serial_mpi" "makeserialmpi.log" \
               "$DefaultAccessRootDir/ACCESS" "" \
               "with 'make hdf5'"
}

# Making hdf5:

DoMakeHDF5() {
ExecuteCommand "make hdf5" "makehdf5.log" \
               "$DefaultAccessRootDir/ACCESS" "" \
               "with 'make libraries'"
}

# Making libraries:

DoMakeLibraries() {
   ExecuteCommand "make libraries" "makelibraries.log" \
                  "$DefaultAccessRootDir/ACCESS" "" \
                  "with 'make applications'"
}

# Making application codes:

DoMakeApplications() {
ExecuteCommand "make applications" "makeapplications.log" \
               "$DefaultAccessRootDir/ACCESS" "" \
               "with 'make scripts'"
}

# Making scripts:

DoMakeScripts() {
ExecuteCommand "make scripts" "makescripts.log" \
               "$DefaultAccessRootDir/ACCESS" "" \
               "with 'make matlab'"              
}

# Making matlab connection:

DoMakeMatlab() {
ExecuteCommand "make matlab" "makematlab.log" \
               "$DefaultAccessRootDir/ACCESS" "" \
               "with 'make analysis'"              
}

# Making analysis codes:

DoMakeAnalysis() {
ExecuteCommand "make analysis" "makeanalysis.log" \
               "$DefaultAccessRootDir/ACCESS" "" \
               "with 'make install' in $DefaultAccessRootDir/ACCESS"
}

# Making all SEACAS codes:

DoMakeAll() {
ExecuteCommand "make all" "makeall.log" \
               "$DefaultAccessRootDir/ACCESS" "" \
               "with 'make install' in $DefaultAccessRootDir/ACCESS"
}

# Installing the SEACAS codes:

DoMakeInstallAccess() {
InDoMakeInstallItools=NO
InDoMakeInstallAccess=YES
ExecuteCommand "make install" "makeinstall.log" \
    "$DefaultAccessRootDir/ACCESS" "" ""
echo ""
echo ""
echo "Setting the group id of all files to \"$DefaultGroup\"..."
cd $DefaultAccessRootDir
chgrp -R $DefaultGroup *
echo ""
echo ""
echo "Giving the \"$DefaultGroup\" group read and write permission on all SEACAS files..."
cd $DefaultAccessRootDir
find . -type d -exec chmod 775 {} \;
chmod -R g+rw *
echo ""
echo ""
cd $DefaultAccessRootDir/bin
chmod 775 *
cd $DefaultAccessRootDir/etc
chmod 775 *
if [ -f $DefaultAccessRootDir/etc/audit.log ]; then
    cd $DefaultAccessRootDir/etc
    chmod 666 audit.log
else
    cd $DefaultAccessRootDir/etc
    touch audit.log
    chmod 666 audit.log 
fi
cd $DefaultAccessRootDir
PromptLine "Press <RETURN> to return to the menu... "
read Response

InDoMakeInstallAccess=NO
}

# Check if "make clean" should be executed:

CheckMakeClean() {              
echo ""
echo "Do you want to run \"make clean\" first"
PromptLine "in $1 (y/n)? "
while :
do
   read Response
   case "$Response" in
      y | Y ) DoMakeClean "$1"
              break ;;
      n | N ) break ;;
          * ) PromptLine "Please try again: "
              ;;
    esac
done
}

# Making all SEACAS codes and installing them:

DoMakeAllDoMakeInstall() {
    DoMakeAll
    DoMakeInstallAccess
    ReturnToMenu=YES
}

# User menu function:

CommandMenu() {
echo ""
if [ "$DefaultAccessRootDirSet" != "YES" ]; then
   GetDefaultAccessRootDir
fi
while :
do
   
   echo ""
   echo ""
   echo "            *** Command Selection ***"
   echo ""
   echo ""
   echo "In $DefaultAccessRootDir/ACCESS/itools:" 
   echo ""
   echo " 1) make World                   2) make install"
   echo ""
   echo "In $DefaultAccessRootDir/ACCESS:"
   echo ""
   echo " 3) accmkmf             "         
   echo " 5) make Makefiles               6) make makeincludes" 
   echo " 7) make clean                   8) make netcdf"
   echo "                                10) make libraries"
   echo "15) make applications           16) make scripts"
   echo "17) (deleted)                   18) make matlab"
   echo "19) make analysis               20) make all"
   echo "21) make install"
   echo ""
   echo "22) Return to the main menu"
   echo ""
   PromptLine "Please enter the number corresponding to your choice: "
   MakeCleanSelected=NO
   ReturnToMenu=NO
   while :
   do
      read Response
      case "$Response" in
          1 ) GetLocalBootStrapCFlags
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              DoMakeWorld
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              break ;;
          2 ) DoMakeInstallItools
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              break ;;
          3 ) DoAccmkmf
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              break ;;
          5 ) DoMakeMakefiles
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              break ;;
          6 ) DoMakeMakeincludes
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              break ;;
          7 ) MakeCleanSelected=YES
              DoMakeClean "$DefaultAccessRootDir/ACCESS"
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              break ;;
          8 ) CheckMakeClean "$DefaultAccessRootDir/ACCESS/netcdf"
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              DoMakeNetcdf
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              break ;;
         10 ) CheckMakeClean "$DefaultAccessRootDir/ACCESS/libraries"
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              DoMakeLibraries
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              break ;;
         15 ) CheckMakeClean "$DefaultAccessRootDir/ACCESS/applications"
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              DoMakeApplications
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              break ;;
         16 ) CheckMakeClean "$DefaultAccessRootDir/ACCESS/scripts"
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              DoMakeScripts
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              break ;;
         18 ) DoMakeMatlab
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              break ;;
         19 ) CheckMakeClean "$DefaultAccessRootDir/ACCESS/analysis"
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              DoMakeAnalysis
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              break ;;
         20 ) CheckMakeClean "$DefaultAccessRootDir/ACCESS"
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              DoMakeAll
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              break ;;
         21 ) DoMakeInstallAccess
              if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
              break ;;
         22 ) ReturnToMenu=YES
              break ;;
          * ) PromptLine "Please try again: "
              ;;
      esac
   done
if [ "$ReturnToMenu" = "YES" ]; then break; fi
done
}

HelpMenu() {
echo ""
echo "1) Build all of SEACAS (including the Imake tools)"
echo ""
echo "   This option will build SEACAS from scratch. First, the configuration"
echo "   files (site.def and your_system.cf) will be modified and then the"
echo "   Imake tools will be built and installed. Next all the Makefiles are"
echo "   made and finally all the SEACAS codes are built (libraries, pre- and"
echo "   post processor, translator, graphics and analysis codes as well as the"
echo "   scripts). This option is equivalent to selecting options 2) and 3) in"
echo "   succession."
echo ""

echo "2) Build only the Imake tools"
echo ""
echo "   First the configuration files (site.def and your_system.cf) will"
echo "   be modified and then the Imake tools will be built and installed."
echo ""

echo "3) Build all of SEACAS except for the Imake tools"
echo ""
echo "   This option will make all the Makefiles and then build all the"
echo "   libraries (netCDF, Exodus, svdi,...) and all other SEACAS codes"
echo "   (pre- and post processor, translator, graphics and analysis codes"
echo "   as well as the scripts)." 
echo ""
PromptLine "Press <RETURN> to continue... "
read Response
ClearScreen
echo ""
echo ""
echo "5) Execute a specific command"
echo ""
echo "   This option will allow you to run a single command out of the"
echo "   whole build process at a time."
echo ""
echo "6) Exit"
echo ""
echo "   Exit the buildSEACAS script."
echo ""
echo ""
PromptLine "Press <RETURN> to return to the main menu... "
read Response
#while :
#do
#done
#if [ "$ReturnToMenu" = "YES" ]; then break; fi
}

# Main part of the script:

# Set default values:
 
# Default setting for $ACCESS:
GetDefaultAccessRootDir

while :
do
   ClearScreen

   echo ""
   echo "SEACAS build script buildSEACAS (version $ScriptVersion)"
   echo "---------------------------------------------"
   echo ""
   echo "1) Build all of SEACAS (including the Imake tools)"
   echo "2) Build only the Imake tools"
   echo "3) Build all of SEACAS except for the Imake tools"
   echo "5) Execute a specific command"
   echo "6) Exit/Quit"
   echo ""
   echo "This script assumes that you have already modified the configuration files"
   echo "\"site.def\" and \"your-system.cf\" (for example \"linux.cf\") required for"
   echo "this build. The files are in ACCESS/itools/config/cf."
   echo "" 
   echo "Please make sure before continuing that the settings below"
   echo "are set to what you want:"
   echo ""
   echo "   SEACAS Root:        ${txtpur}$DefaultAccessRootDir${txtrst}"
   echo "   Install group:      ${txtpur}$DefaultGroup${txtrst}"
   echo "   Current umask:      ${txtpur}`umask`${txtrst}"
   echo ""
   echo "If you have not modified the files, or the settings are wrong,"
   echo "enter 'q' to exit this script."
   echo ""
   echo "Please enter the number (1-6) corresponding to your choice"
   PromptLine "   'q' to quit, or 'h' for help on the options: "

   UseCurrentConfigFiles=NO
   ReturnToMenu=NO
   InCommandMenu=NO
   BuildItoolsOnly=NO

   while :
   do
      read Response 
      case "$Response" in
         1 ) SetupAccess
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             GetLocalBootStrapCFlags
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeWorld
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeInstallItools
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoAccmkmf
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeMakefiles
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeMakeincludes
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeClean "$DefaultAccessRootDir/ACCESS"
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeAllDoMakeInstall
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeNetcdf
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
	     DoMakeSIMPI
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
	     DoMakeHDF5
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeLibraries
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeApplications
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeScripts
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeMatlab
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeAnalysis
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeInstallAccess
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             break 
             ;;
         2 ) BuildItoolsOnly=YES
             SetupAccess
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             GetLocalBootStrapCFlags
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeWorld
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeInstallItools
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             break 
             ;;
         3 ) ClearScreen
             if [ "$DefaultAccessRootDirSet" != "YES" ]; then
                GetDefaultAccessRootDir
             fi
             DoAccmkmf
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeMakefiles
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeMakeincludes
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeClean "$DefaultAccessRootDir/ACCESS"
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeAllDoMakeInstall
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeNetcdf
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeLibraries
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeApplications
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeScripts
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeMatlab
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeAnalysis
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             DoMakeInstallAccess
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             break 
             ;;
         5 ) ClearScreen
             InCommandMenu=YES
             CommandMenu
             InCommandMenu=NO
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             break ;;
     q|Q|6 ) exit
             ;;
       h|H ) ClearScreen
             HelpMenu
             if [ "$ReturnToMenu" = "YES" ]; then ReturnToMenu=NO; break; fi
             break ;;
         * ) PromptLine "Please try again: " 
             ;;
      esac
   done
done
