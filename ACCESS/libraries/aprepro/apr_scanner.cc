#line 2 "apr_scanner.cc"

#line 4 "apr_scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SEAMSFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SEAMSalloc (yy_size_t  );
void *SEAMSrealloc (void *,yy_size_t  );
void SEAMSfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 100
#define YY_END_OF_BUFFER 101
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[679] =
    {   0,
        0,    0,   50,   50,    0,    0,   39,   39,    0,    0,
        2,    2,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  101,   98,   98,   99,   96,   97,   97,   97,
       98,   93,   50,   70,   85,   98,   67,   98,   98,   71,
       72,   63,   61,   73,   62,   49,   66,   48,   75,   74,
       77,   52,   78,   76,   51,   51,   51,   86,   87,   68,
       93,   98,   90,   64,   98,   98,   96,   97,   97,   97,
       98,   93,   42,   42,   43,   39,   42,   39,   39,   39,
       39,   42,   42,   98,    3,    3,    4,    2,    3,    2,
        2,    2,    2,    3,    3,   98,   98,   33,   96,   97,

       97,   97,   98,   93,   98,   98,   96,   98,   98,   97,
       97,   97,   98,   93,   98,   98,   19,   96,   97,   97,
       97,   98,   93,   98,   98,   23,   96,   97,   97,   97,
       98,   93,   98,   98,   27,   96,   97,   97,   97,   98,
       93,    0,    0,   97,   97,   97,   91,   92,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   50,    0,   82,
        0,   88,   83,    0,   89,   69,   55,   59,   53,   60,
       54,   49,    0,   65,   56,   49,   48,    0,   79,   81,
       80,   51,   51,   51,   57,    0,   84,    0,    0,    0,
        0,   97,   97,   97,   91,   92,    0,    0,    0,   39,

       39,   39,   39,   39,   40,   41,    0,    0,    0,    0,
        2,    2,    2,    2,    2,    0,    0,   33,    0,    0,
       97,   97,   97,   91,   92,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   97,   97,
       97,   91,   92,    0,    0,   19,    0,    0,   97,   97,
       97,   91,   92,    0,    0,    0,    0,   23,    0,    0,
       97,   97,   97,   91,   92,    0,    0,    0,    0,   27,
        0,    0,   97,   97,   97,   91,   92,    0,    0,    0,
        0,   97,   97,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   58,    0,   49,    0,   48,   51,

       51,    0,   47,   97,   97,    0,    0,   39,   39,    0,
        0,    0,    2,    2,    0,   97,   97,    0,    0,    0,
        0,    0,   13,    0,    0,    0,    0,    0,    0,    0,
       97,   97,    0,    0,   97,   97,    0,    0,    0,    0,
       97,   97,    0,    0,    0,    0,   97,   97,    0,    0,
        0,    0,    0,   94,   95,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   51,   51,   47,   94,
       95,    0,    0,   39,   39,    0,    0,    0,   35,    0,
        0,    2,    2,    0,   94,   95,    0,    0,    0,    0,
        0,    0,    0,   15,    0,    0,   13,    0,    0,   14,

        0,   94,   95,    0,    0,   94,   95,    0,    0,    0,
        0,   94,   95,    0,    0,    0,    0,   94,   95,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   31,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        6,    0,    0,    0,    0,    0,   12,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   24,
        0,    0,    0,    0,    0,   37,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   34,    0,
        0,    0,   33,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   19,    0,    0,    0,   17,    0,    0,   23,
        0,    0,    0,   21,    0,   27,    0,    0,    0,    0,
        0,    0,    0,   44,    0,    0,    8,    0,    0,    0,
        0,   47,    0,    0,    0,   38,    0,   36,    0,    0,
       29,    0,   30,    0,    0,    0,    0,    0,    0,    0,
       19,    0,    0,    0,   23,    0,    0,   27,    0,    0,

        0,    0,    0,    0,    0,   45,    0,    0,    0,   37,
        0,   47,    0,    0,   32,    0,   15,    0,    0,    0,
        0,   16,    0,    0,   20,    0,    0,    0,   46,    0,
        7,    0,    0,    0,   25,    0,   44,    0,    0,    0,
       15,    0,    0,    0,    0,   25,    0,    9,    0,    0,
        0,    0,    0,    0,   18,    0,   22,    0,    0,    0,
        0,   28,    0,    0,   26,    0,    0,    0,    0,    0,
        0,    5,    0,    0,   10,    1,   11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       29,   32,   33,   29,   29,   34,   35,   36,   37,   29,
       38,   39,   29,   40,   41,   42,   29,   43,   29,   29,
       44,   45,   46,   47,   29,    1,   48,   49,   50,   51,

       52,   53,   29,   54,   55,   29,   29,   56,   29,   57,
       58,   59,   38,   60,   61,   62,   63,   29,   64,   43,
       29,   29,   65,   66,   67,   68,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    6,
        1,    1,    1,    1,    1,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    2,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[728] =
    {   0,
        0,    0,   68,    0,  136,    0,  204,    0,  271,  272,
      337,    0,  405,    0,  473,    0,  541,    0,  609,    0,
      677,    0, 2449, 2450,  744, 2450, 2450,    0, 2405,  236,
      213,  782,  748, 2450, 2424,  276, 2450, 2437, 2435, 2450,
     2450,  268,  269, 2450,  270,  265,  267,  270, 2450, 2450,
     2421, 2420, 2419, 2450,    0, 2398,  247, 2450, 2450, 2417,
      264, 2373, 2450, 2450, 2426,  749, 2425,  838, 2393,  255,
      735,  737, 2450,  752, 2450,  755, 2450,  756,  293,  751,
      756,  236,  771,  760, 2450,  764, 2450,  770, 2450,  763,
      294,  765,  903,  237,  277, 2432,  776, 2450, 2431,  966,

     2390,  264, 1032,  905, 2420, 1035, 2419,  751,  897, 1100,
     2387,  265,  898,  775, 2426, 1038, 2450, 2425, 1168, 2384,
      267, 1234, 1033, 2423, 1237, 2450, 2422, 1302, 2381,  268,
     1368, 1035, 2420, 1371, 2450, 2419, 1436, 2378,  270, 1502,
     1042, 1505,  896,    0,  279,  744, 2450, 2450, 2365,  883,
      749, 2361, 2381, 2387, 2364,  264, 2358, 1506,  882, 2450,
      320, 2450, 2450, 2404, 2450, 2390, 2450, 2450, 2450, 2450,
     2450,  898,  772, 2450, 2450,  901, 1027,  776, 2450, 2450,
     2450,    0,  882,  886, 2450,  268, 2450, 2400, 1509, 1510,
      906,    0,  888,  892, 2399, 2398, 1039, 1513, 1240, 1514,

     1517,  778, 1234, 1239, 2450, 2450, 1046,  774, 2356, 1521,
     1522, 1518,  941, 1241, 1242, 2378, 2404, 2450, 1525, 1369,
        0,  900,  909, 2403, 2402, 1373, 1245, 2392, 1365, 1528,
     1235, 1530, 1238, 1052, 1367, 1239, 1366, 1061,    0, 1019,
     1023, 2391, 2390, 1369, 2398, 2450, 1533, 1547,    0, 1027,
     1029, 2397, 2396,  910, 1503, 1531, 2395, 2450, 1541, 1562,
        0, 1216, 1222, 2394, 2393, 1379, 1528, 1536, 2392, 2450,
     1544, 1550,    0, 1223, 1227, 2391, 2390, 1548, 1040, 1549,
     1551, 1223, 1224, 2335, 2359, 2329, 2338, 2353, 2337, 2328,
     2355, 2345, 2330, 2331, 2450, 2362, 2361, 2360, 2359, 1226,

     1344, 1554, 1046, 1346, 1347, 1550,  771, 1596, 1608, 2321,
     2315, 1611, 1613, 1615, 2336, 1348, 1349, 1565, 1249, 1621,
     1281, 1388, 2450, 1560, 1389, 1264, 1378, 1391, 1386, 1395,
     1353, 1355, 1579, 1368, 1580, 1589, 1627, 1628, 1631, 1634,
     1598, 1599, 1638, 1640, 1642, 1641, 1607, 1609, 1643, 1647,
     1649, 1653, 1651,    0,    0, 2324, 2336, 2320, 1624, 2330,
     2314, 2310, 2340, 2340, 2318, 1626,    0,    0, 2362,    0,
        0,  784, 1653, 1050, 1400, 2303, 2311, 1553, 2450, 2310,
     2310, 1660, 1663, 2333,    0,    0, 1660, 1670, 1711, 2356,
     1671, 1673, 1410, 2450, 1685, 1688, 2450, 1704, 1706, 2450,

     1708,    0,    0,  910, 1672,    0,    0, 1687, 1691, 1723,
     1692,    0,    0, 1714, 1716, 1725, 1718,    0,    0, 1730,
     1728, 1732, 1737, 1731, 2302, 1721, 2290, 2303, 2315, 2291,
     1734, 2321, 2326, 2288, 2286, 1727, 1717, 2297, 1732, 2295,
     2295, 2320, 1663, 1738, 2342, 2450, 1743, 1741, 1750, 1751,
     1757, 1730, 1736, 1746, 1734, 1747, 1752, 1800, 1763, 1764,
     1769, 1770, 1803, 1773, 1792, 2341, 1787, 1795, 2280, 2305,
     2450, 2338, 2273, 2313, 2287, 1813, 2450, 2300, 2296, 2279,
     2279, 1806, 1800, 1780, 2280, 1819, 2279, 2291, 2327, 1813,
     1830, 1816, 1817, 1814, 1834, 2326, 1824, 1835, 1840, 2325,

     1836, 2324, 1833, 1843, 1845, 2323, 2322, 1849, 2321, 2450,
     1850, 1852, 2272, 1826, 2319, 2450, 2318, 2293, 2267, 2020,
     2040, 2004, 1999, 1851, 1862, 1870, 2038, 1873, 2450, 1874,
     2007, 2036, 2450, 2035, 1884, 2034, 1894, 1891, 1896, 1899,
     1855, 2033, 2450, 2032, 1858, 2031, 2450, 1857, 2030, 2450,
     2029, 1868, 2027, 2450, 2025, 2450, 2024, 1869, 1876, 1974,
     1994, 2012, 2020, 2450, 1988, 1908, 2450, 1986, 1952, 1968,
     1918, 1906, 1911, 1922, 2014, 2450, 1931, 2450, 1981, 2012,
     2450, 2011, 2450, 1937, 2010, 1925, 1933, 1940, 1886, 2009,
     2450, 2008, 1901, 2007, 2450, 2006, 2005, 2450, 1880, 1929,

     1947, 1992, 1936, 1971, 1951, 2450, 1989, 1996, 1944, 1994,
     1962, 1957, 1985, 1992, 2450, 1958, 2450, 1964, 1965, 1943,
     1991, 2450, 1947, 1990, 2450, 1989, 1951, 1969, 2450, 1923,
     2450, 1975, 1920, 1571, 2450, 1494, 1546, 1504, 1969, 1972,
     2450, 1975, 1535, 1428, 1424, 2450, 1953, 2450, 1386, 1380,
     1409, 1250, 1979, 1277, 2450, 1276, 2450, 1250, 1952, 1078,
     1083, 2450, 1024, 1050, 2450,  925,  942,  744,  795,  781,
      268, 2450,  265,  248, 2450, 2450, 2450, 2450, 2038, 2044,
     2050, 2052, 2058, 2063, 2065, 2070, 2072, 2078, 2084, 2090,
     2096, 2102, 2108, 2114, 2120, 2126, 2132, 2138, 2144, 2150,

     2156, 2162, 2168, 2174, 2180, 2186, 2192, 2198, 2204, 2210,
     2216, 2222, 2228, 2234, 2240, 2246, 2252, 2258, 2264, 2270,
     2276, 2282, 2288, 2294, 2300, 2306, 2312
    } ;

static yyconst flex_int16_t yy_def[728] =
    {   0,
      678,    1,  678,    3,  678,    5,  678,    7,    1,    1,
      678,   11,  678,   13,  678,   15,  678,   17,  678,   19,
      678,   21,  678,  678,  678,  678,  678,  679,  679,  679,
      678,  678,  678,  678,  678,  680,  678,  678,  681,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  682,  682,  682,  678,  678,  678,
      678,  678,  678,  678,  683,  683,  683,  678,   68,   68,
      683,  683,  678,  678,  678,  684,  678,  684,  685,  685,
      685,  678,  678,  678,  678,  678,  678,  686,  678,  686,
      687,  687,  687,  678,  678,  688,  688,  678,  688,  678,

      100,  100,  688,  688,  689,  689,  689,  689,  689,  678,
      110,  110,  689,  689,  690,  690,  678,  690,  678,  119,
      119,  690,  690,  691,  691,  678,  691,  678,  128,  128,
      691,  691,  692,  692,  678,  692,  678,  137,  137,  692,
      692,  678,  678,  679,  679,  679,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      680,  678,  678,  681,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  682,  682,  682,  678,  678,  678,  683,  683,  683,
      683,   68,   68,   68,  683,  683,  683,  678,  678,  684,

      684,  685,  685,  685,  678,  678,  678,  678,  678,  678,
      686,  686,  687,  687,  687,  678,  688,  678,  688,  688,
      100,  100,  100,  688,  688,  688,  688,  689,  689,  689,
      689,  693,  689,  689,  689,  689,  689,  689,  110,  110,
      110,  689,  689,  689,  690,  678,  690,  690,  119,  119,
      119,  690,  690,  690,  690,  690,  691,  678,  691,  691,
      128,  128,  128,  691,  691,  691,  691,  691,  692,  678,
      692,  692,  137,  137,  137,  692,  692,  692,  692,  692,
      692,  679,  679,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  682,

      682,  683,  683,   68,   68,  683,  683,  685,  685,  678,
      678,  678,  687,  687,  678,  100,  100,  688,  688,  688,
      694,  693,  678,  693,  695,  689,  689,  696,  689,  689,
      110,  110,  689,  689,  119,  119,  690,  690,  690,  690,
      128,  128,  691,  691,  691,  691,  137,  137,  692,  692,
      692,  692,  692,  679,  679,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  682,  682,  678,   68,
       68,  683,  683,  685,  685,  678,  678,  678,  678,  678,
      678,  687,  687,  678,  100,  100,  688,  688,  688,  697,
      688,  688,  694,  678,  694,  695,  678,  695,  696,  678,

      696,  110,  110,  689,  689,  119,  119,  690,  690,  690,
      690,  128,  128,  691,  691,  691,  691,  137,  137,  692,
      692,  692,  692,  692,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  683,  683,  678,  678,  678,
      678,  678,  688,  688,  697,  678,  688,  688,  694,  695,
      696,  689,  689,  690,  690,  690,  690,  690,  691,  691,
      691,  691,  691,  692,  692,  698,  692,  692,  678,  678,
      678,  699,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  700,  683,  678,  678,  678,  678,  678,  701,  688,
      688,  688,  702,  689,  690,  703,  690,  690,  690,  704,

      691,  705,  691,  691,  691,  706,  707,  692,  698,  678,
      692,  692,  678,  678,  699,  678,  708,  678,  678,  678,
      678,  678,  678,  700,  700,  709,  710,  678,  678,  678,
      678,  701,  678,  711,  688,  712,  688,  702,  702,  713,
      690,  703,  678,  714,  690,  704,  678,  691,  705,  678,
      715,  691,  706,  678,  707,  678,  716,  692,  692,  678,
      678,  678,  708,  678,  678,  678,  678,  678,  678,  678,
      700,  700,  709,  709,  710,  678,  678,  678,  678,  711,
      678,  712,  678,  688,  717,  718,  713,  713,  690,  714,
      678,  719,  691,  715,  678,  720,  716,  678,  692,  692,

      678,  678,  678,  678,  678,  678,  678,  721,  678,  678,
      709,  709,  678,  717,  678,  718,  678,  718,  722,  690,
      719,  678,  691,  720,  678,  723,  692,  678,  678,  678,
      678,  678,  678,  721,  678,  678,  678,  678,  718,  722,
      678,  722,  724,  725,  723,  678,  692,  678,  678,  678,
      726,  678,  722,  724,  678,  725,  678,  727,  678,  678,
      726,  678,  678,  727,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,    0,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,

      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678
    } ;

static yyconst flex_int16_t yy_nxt[2519] =
    {   0,
       24,   25,   26,   25,   24,   24,   27,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   28,   28,   28,   28,   29,
       28,   28,   28,   28,   28,   28,   28,   30,   28,   28,
       28,   28,   28,   24,   31,   24,   24,   28,   28,   28,
       28,   29,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   32,   24,   24,   24,   24,   33,
       34,   33,   35,   36,   27,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   55,   55,   55,   56,   55,   55,

       55,   55,   55,   55,   55,   57,   55,   55,   55,   55,
       55,   58,   31,   59,   60,   55,   55,   55,   55,   56,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   61,   62,   63,   64,   65,   66,   26,   66,
       65,   65,   67,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   68,   68,   68,   68,   69,   68,   68,   68,   68,
       68,   68,   68,   70,   68,   68,   68,   68,   68,   65,
       71,   65,   65,   68,   68,   68,   68,   69,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       72,   65,   65,   65,   73,   74,   75,   76,   73,   73,
       77,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   78,   73,   73,   73,   73,   73,   73,   79,
       79,   79,   79,   80,   79,   79,   79,   79,   79,   79,
       79,   81,   79,   79,   79,   79,   79,   73,   82,   73,
       73,   79,   79,   79,   79,   80,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   83,   73,
       73,   73,   84,   84,   84,   84,  146,  147,  162,  148,
      166,  162,  168,  172,  174,  170,  176,  184,  177,  175,
      167,  169,  171,  186,  173,  194,  201,  212,  146,  178,

      205,  147,  206,  148,  223,  241,  186,  251,  263,  184,
      275,  282,  144,  144,  677,  186,  173,  194,  216,  286,
      294,  178,  162,  286,  287,  162,  223,  241,  186,  251,
      263,  676,  275,  282,  675,   61,   61,   85,   86,   87,
       88,   85,   85,   89,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   90,   85,   85,   85,   85,
       85,   85,   91,   91,   91,   91,   92,   91,   91,   91,
       91,   91,   91,   91,   93,   91,   91,   91,   91,   91,
       85,   94,   85,   85,   91,   91,   91,   91,   92,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   95,   85,   85,   85,   96,   97,   98,   97,   96,
       96,   99,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      100,  100,  100,  100,  101,  100,  100,  100,  100,  100,
      100,  100,  102,  100,  100,  100,  100,  100,   96,  103,
       96,   96,  100,  100,  100,  100,  101,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  104,
       96,   96,   96,  105,  106,   26,  106,  105,  105,  107,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  108,
      105,  109,  105,  105,  105,  105,  105,  105,  110,  110,

      110,  110,  111,  110,  110,  110,  110,  110,  110,  110,
      112,  110,  110,  110,  110,  110,  105,  113,  105,  105,
      110,  110,  110,  110,  111,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  114,  105,  105,
      105,  115,  116,  117,  116,  115,  115,  118,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  119,  119,  119,  119,
      120,  119,  119,  119,  119,  119,  119,  119,  121,  119,
      119,  119,  119,  119,  115,  122,  115,  115,  119,  119,
      119,  119,  120,  119,  119,  119,  119,  119,  119,  119,

      119,  119,  119,  119,  119,  123,  115,  115,  115,  124,
      125,  126,  125,  124,  124,  127,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  128,  128,  128,  128,  129,  128,
      128,  128,  128,  128,  128,  128,  130,  128,  128,  128,
      128,  128,  124,  131,  124,  124,  128,  128,  128,  128,
      129,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  132,  124,  124,  124,  133,  134,  135,
      134,  133,  133,  136,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

      133,  133,  137,  137,  137,  137,  138,  137,  137,  137,
      137,  137,  137,  137,  139,  137,  137,  137,  137,  137,
      133,  140,  133,  133,  137,  137,  137,  137,  138,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  141,  133,  133,  133,  142,  189,  142,  189,  158,
      190,  158,  190,  198,  201,  198,  198,  678,  200,  201,
      189,  210,  232,  210,  678,  210,  197,  210,  212,  233,
      144,  210,  207,  211,  207,  144,  283,  219,  218,  219,
      234,  201,  189,  288,  144,  296,  229,  296,  197,  298,
      297,  298,  674,  203,  299,  189,  204,  144,  283,  195,

      208,  196,  234,  209,  244,  289,  673,  214,  143,  149,
      672,  150,  159,  191,  151,  152,  199,  153,  204,  199,
      678,  373,  208,  154,  159,  209,  244,  678,  159,  311,
      287,  149,  155,  156,  159,  436,  157,  152,  188,  188,
      220,  188,  188,  188,  188,  188,  188,  188,  188,  189,
      188,  188,  188,  188,  188,  188,  192,  192,  188,  188,
      188,  188,  188,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  188,  188,  188,  188,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  188,  188,  188,  188,  212,  218,  235,  229,
      285,  186,  246,  236,  300,  237,  172,  189,  301,  172,
      304,  229,  144,  149,  305,  150,  238,  173,  151,  152,
      173,  153,  316,  186,  226,  197,  300,  227,  286,  287,
      301,  317,  304,  215,  212,  149,  305,  156,  238,  173,
      157,  152,  173,  671,  316,  670,  226,  197,  337,  227,
      144,  452,  242,  317,  243,  215,  217,  217,  218,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  221,  221,  217,  217,  217,  217,
      217,  221,  221,  221,  221,  221,  221,  221,  221,  221,

      221,  221,  221,  221,  221,  221,  221,  221,  221,  217,
      217,  217,  217,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      217,  217,  217,  217,  218,  246,  230,  258,  230,  247,
      246,  247,  270,  176,  270,  177,  229,  207,  369,  207,
      189,  331,  665,  201,  669,  332,  178,  189,  254,  335,
      266,  336,  255,  229,  267,  326,  256,  326,  268,  144,
      327,  278,  229,  331,  329,  310,  329,  332,  178,  330,
      254,  335,  266,  336,  255,  662,  267,  351,  256,  668,
      268,  279,  280,  281,  306,  307,  224,  310,  225,  231,

      228,  228,  248,  228,  228,  228,  228,  228,  228,  228,
      228,  229,  228,  228,  228,  228,  228,  228,  239,  239,
      228,  228,  228,  228,  228,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  228,  228,  228,  228,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  228,  228,  228,  228,  245,  245,
      246,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  249,  249,  245,  245,
      245,  245,  245,  249,  249,  249,  249,  249,  249,  249,

      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  245,  245,  245,  245,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  245,  245,  245,  245,  246,  201,  259,  258,
      259,  207,  201,  207,  212,  212,  229,  218,  341,  232,
      232,  218,  665,  144,  342,  347,  233,  233,  144,  348,
      144,  144,  354,  355,  244,  367,  308,  234,  234,  208,
      341,  309,  209,  313,  314,  229,  342,  347,  657,  655,
      663,  348,  327,  394,  354,  355,  244,  367,  308,  234,
      234,  208,  395,  309,  209,  313,  314,  320,  252,  388,

      253,  260,  257,  257,  258,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      261,  261,  257,  257,  257,  257,  257,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  257,  257,  257,  257,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  257,  257,  257,  257,
      258,  218,  271,  270,  271,  218,  229,  235,  229,  229,
      229,  258,  236,  368,  237,  370,  371,  385,  386,  232,
      323,  397,  402,  400,  403,  238,  327,  229,  226,  324,

      398,  227,  401,  201,  330,  368,  235,  370,  371,  385,
      386,  662,  394,  330,  402,  660,  403,  238,  405,  144,
      226,  395,  659,  227,  333,  334,  646,  343,  318,  319,
      657,  321,  264,  328,  265,  272,  269,  269,  270,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  273,  273,  269,  269,  269,  269,
      269,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  269,
      269,  269,  269,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,

      269,  269,  269,  269,  270,  246,  142,  158,  142,  158,
      302,  190,  302,  190,  198,  198,  198,  200,  678,  678,
      189,  189,  210,  210,  210,  211,  219,  218,  219,  230,
      258,  230,  323,  246,  247,  246,  247,  655,  258,  229,
      652,  324,  259,  258,  259,  271,  270,  271,  369,  246,
      270,  270,  270,  270,  378,  302,  378,  302,  338,  339,
      651,  189,  323,  379,  258,  189,  276,  218,  277,  143,
      159,  324,  254,  635,  191,  303,  255,  199,  199,  278,
      256,  678,  678,  344,  345,  159,  159,  266,  340,  220,
      229,  267,  231,  346,  254,  268,  325,  248,  255,  201,

      352,  278,  256,  349,  350,  260,  349,  353,  272,  266,
      372,  201,  378,  267,  378,  144,  212,  268,  212,  406,
      303,  379,  389,  218,  389,  387,  325,  144,  407,  246,
      246,  390,  144,  246,  144,  374,  246,  412,  413,  404,
      258,  406,  258,  258,  258,  270,  418,  375,  419,  270,
      407,  270,  382,  270,  383,  270,  428,  374,  428,  412,
      413,  380,  218,  212,  189,  218,  212,  381,  418,  375,
      419,  391,  218,  218,  382,  218,  383,  392,  428,  144,
      428,  410,  144,  229,  408,  437,  435,  394,  409,  246,
      397,  411,  416,  246,  246,  414,  395,  421,  417,  398,

      415,  424,  444,  420,  453,  423,  397,  437,  400,  422,
      400,  443,  389,  218,  389,  398,  258,  401,  258,  401,
      258,  390,  447,  448,  444,  246,  453,  258,  189,  489,
      270,  470,  270,  270,  270,  476,  246,  476,  189,  270,
      218,  229,  455,  218,  477,  218,  454,  229,  246,  246,
      458,  449,  394,  397,  246,  456,  457,  461,  462,  400,
      465,  395,  398,  465,  485,  258,  258,  460,  401,  483,
      450,  258,  258,  459,  451,  270,  463,  456,  457,  461,
      462,  464,  465,  466,  467,  465,  485,  471,  494,  270,
      490,  468,  492,  482,  270,  491,  493,  270,  472,  497,

      496,  499,  246,  499,  505,  258,  505,  495,  516,  498,
      500,  189,  485,  506,  476,  218,  476,  525,  218,  516,
      528,  503,  528,  477,  501,  229,  246,  504,  539,  529,
      502,  535,  218,  535,  485,  258,  246,  246,  258,  507,
      536,  499,  246,  499,  508,  258,  505,  258,  505,  511,
      500,  270,  270,  516,  270,  506,  561,  246,  512,  258,
      246,  562,  525,  571,  516,  571,  526,  541,  537,  548,
      258,  270,  564,  525,  528,  577,  528,  577,  270,  534,
      540,  574,  270,  529,  578,  535,  218,  535,  246,  541,
      544,  548,  545,  516,  536,  584,  218,  584,  516,  551,

      552,  564,  539,  258,  585,  558,  559,  539,  610,  605,
      588,  605,  589,  564,  593,  557,  592,  525,  606,  571,
      516,  571,  574,  611,  564,  611,  596,  617,  572,  525,
      599,  270,  577,  574,  577,  564,  618,  600,  584,  218,
      584,  578,  564,  620,  588,  246,  626,  585,  628,  258,
      628,  588,  605,  270,  605,  270,  650,  629,  623,  637,
      617,  606,  586,  611,  564,  611,  617,  641,  574,  618,
      628,  617,  628,  574,  641,  618,  642,  641,  627,  629,
      618,  641,  666,  642,  572,  649,  642,  667,  612,  648,
      642,  646,  625,  622,  615,  638,  369,  636,  635,  633,

      632,  643,  631,  630,  647,  644,  619,  598,  625,  595,
      622,  591,  615,  583,  581,  613,  576,  609,  608,  658,
      607,  604,  564,  603,  602,  601,  598,  556,  612,  554,
      639,  595,  550,  547,  591,  543,  583,  581,  533,  579,
      576,  653,  144,  144,  161,  161,  161,  161,  161,  161,
      164,  164,  164,  164,  164,  164,  182,  182,  188,  188,
      570,  188,  188,  188,  201,  569,  201,  201,  202,  202,
      202,  212,  568,  212,  212,  213,  213,  213,  217,  217,
      217,  217,  217,  217,  228,  228,  567,  228,  228,  228,
      245,  245,  245,  245,  245,  245,  257,  257,  257,  257,

      257,  257,  269,  269,  269,  269,  269,  269,  322,  322,
      322,  322,  322,  322,  393,  393,  393,  393,  393,  393,
      396,  396,  396,  396,  396,  396,  399,  399,  399,  399,
      399,  399,  445,  445,  445,  445,  445,  445,  509,  509,
      509,  509,  509,  509,  515,  515,  515,  515,  515,  515,
      524,  524,  524,  524,  524,  524,  532,  532,  532,  532,
      532,  532,  538,  538,  538,  538,  538,  538,  542,  542,
      542,  542,  542,  542,  546,  546,  546,  546,  546,  546,
      549,  549,  549,  549,  549,  549,  553,  553,  553,  553,
      553,  553,  555,  555,  555,  555,  555,  555,  563,  563,

      563,  563,  563,  563,  573,  573,  573,  573,  573,  573,
      575,  575,  575,  575,  575,  575,  580,  580,  580,  580,
      580,  580,  582,  582,  582,  582,  582,  582,  587,  587,
      587,  587,  587,  587,  590,  590,  590,  590,  590,  590,
      594,  594,  594,  594,  594,  594,  597,  597,  597,  597,
      597,  597,  614,  614,  614,  614,  614,  614,  616,  616,
      616,  616,  616,  616,  621,  621,  621,  621,  621,  621,
      624,  624,  624,  624,  624,  624,  634,  634,  634,  634,
      634,  634,  640,  640,  640,  640,  640,  640,  645,  645,
      645,  645,  645,  645,  654,  654,  654,  654,  654,  654,

      656,  656,  656,  656,  656,  656,  661,  661,  661,  661,
      661,  661,  664,  664,  664,  664,  664,  664,  566,  565,
      564,  516,  560,  510,  556,  554,  550,  547,  543,  533,
      531,  530,  527,  523,  522,  521,  520,  519,  518,  517,
      516,  514,  513,  510,  446,  488,  487,  486,  484,  481,
      480,  479,  478,  475,  474,  473,  472,  469,  446,  442,
      441,  440,  439,  438,  369,  434,  433,  432,  431,  430,
      429,  427,  426,  425,  384,  377,  376,  299,  299,  297,
      297,  366,  365,  364,  363,  362,  361,  360,  359,  358,
      357,  356,  270,  270,  270,  258,  258,  258,  246,  246,

      246,  229,  229,  229,  218,  218,  218,  315,  312,  189,
      189,  189,  295,  165,  289,  293,  292,  291,  290,  284,
      274,  270,  270,  262,  258,  258,  250,  246,  246,  240,
      229,  229,  222,  218,  218,  193,  189,  189,  187,  185,
      183,  181,  180,  179,  165,  163,  160,  145,  678,   23,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,

      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678
    } ;

static yyconst flex_int16_t yy_chk[2519] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    9,   10,    9,   10,   30,   31,   36,   31,
       42,   36,   43,   46,   47,   45,   48,   57,   48,   47,
       42,   43,   45,   61,   46,   70,   79,   91,   30,   48,

       82,   94,   82,   94,  102,  112,   95,  121,  130,   57,
      139,  145,   79,   91,  674,   61,   46,   70,   95,  156,
      156,   48,  161,  186,  186,  161,  102,  112,   95,  121,
      130,  673,  139,  145,  671,    9,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   25,   71,   25,   72,   33,
       66,   33,   66,   74,   80,   74,   76,   78,   76,   81,
       66,   84,  108,   84,   90,   86,   72,   86,   92,  108,
       80,   88,   83,   88,   83,   81,  146,   97,   97,   97,
      108,  202,  307,  151,   92,  173,  114,  173,   72,  178,
      173,  178,  670,   80,  178,  372,   81,  202,  146,   71,

       83,   71,  108,   83,  114,  151,  669,   92,   25,   32,
      668,   32,   33,   66,   32,   32,   74,   32,   81,   76,
       78,  307,   83,   32,   84,   83,  114,   90,   86,  208,
      208,   32,   32,   32,   88,  372,   32,   32,   68,   68,
       97,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   93,  104,  109,  113,
      150,  159,  254,  109,  183,  109,  172,  191,  184,  176,
      193,  404,   93,  143,  194,  143,  109,  172,  143,  143,
      176,  143,  222,  159,  104,  191,  183,  104,  150,  150,
      184,  223,  193,   93,  213,  143,  194,  143,  109,  172,
      143,  143,  176,  667,  222,  666,  104,  191,  254,  104,
      213,  404,  113,  223,  113,   93,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  103,  123,  106,  132,  106,  116,
      116,  116,  279,  177,  141,  177,  106,  207,  303,  207,
      197,  240,  664,  374,  663,  241,  177,  303,  123,  250,
      132,  251,  123,  234,  132,  234,  123,  234,  132,  374,
      234,  141,  238,  240,  238,  207,  238,  241,  177,  238,
      123,  250,  132,  251,  123,  661,  132,  279,  123,  660,
      132,  141,  141,  141,  197,  197,  103,  207,  103,  106,

      110,  110,  116,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,

      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  122,  203,  125,  125,
      125,  199,  204,  199,  214,  215,  231,  227,  262,  233,
      236,  319,  658,  203,  263,  274,  233,  236,  204,  275,
      214,  215,  282,  283,  231,  300,  203,  233,  236,  199,
      262,  204,  199,  214,  215,  326,  263,  274,  656,  654,
      652,  275,  326,  321,  282,  283,  231,  300,  203,  233,
      236,  199,  321,  204,  199,  214,  215,  227,  122,  319,

      122,  125,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      131,  220,  134,  134,  134,  226,  229,  237,  235,  334,
      244,  266,  237,  301,  237,  304,  305,  316,  317,  327,
      322,  325,  331,  328,  332,  237,  327,  329,  220,  322,

      325,  220,  328,  375,  329,  301,  330,  304,  305,  316,
      317,  651,  393,  330,  331,  650,  332,  237,  334,  375,
      220,  393,  649,  220,  244,  244,  645,  266,  226,  226,
      644,  229,  131,  235,  131,  134,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,

      137,  137,  137,  137,  140,  255,  142,  158,  142,  158,
      189,  190,  189,  190,  198,  200,  198,  200,  201,  212,
      189,  190,  210,  211,  210,  211,  219,  219,  219,  230,
      267,  230,  232,  256,  247,  247,  247,  643,  268,  230,
      638,  232,  259,  259,  259,  271,  271,  271,  637,  248,
      278,  280,  272,  281,  378,  302,  378,  302,  255,  255,
      636,  306,  324,  378,  260,  302,  140,  318,  140,  142,
      158,  324,  248,  634,  190,  189,  248,  198,  200,  272,
      248,  201,  212,  267,  267,  210,  211,  260,  256,  219,
      333,  260,  230,  268,  248,  260,  232,  247,  248,  308,

      280,  272,  248,  278,  278,  259,  281,  281,  271,  260,
      306,  309,  312,  260,  312,  308,  313,  260,  314,  335,
      302,  312,  320,  320,  320,  318,  324,  309,  336,  337,
      338,  320,  313,  339,  314,  308,  340,  341,  342,  333,
      343,  335,  344,  346,  345,  349,  347,  309,  348,  350,
      336,  351,  313,  353,  314,  352,  359,  308,  366,  341,
      342,  312,  387,  382,  373,  443,  383,  312,  347,  309,
      348,  320,  388,  391,  313,  392,  314,  320,  359,  382,
      366,  339,  383,  405,  337,  373,  366,  395,  338,  408,
      396,  340,  345,  409,  411,  343,  395,  350,  346,  396,

      344,  353,  388,  349,  405,  352,  398,  373,  399,  351,
      401,  387,  389,  389,  389,  398,  414,  399,  415,  401,
      417,  389,  391,  392,  388,  410,  405,  416,  437,  443,
      421,  426,  420,  424,  422,  431,  455,  431,  436,  423,
      444,  452,  409,  448,  431,  447,  408,  453,  454,  456,
      411,  395,  449,  450,  457,  410,  410,  416,  416,  451,
      421,  449,  450,  424,  439,  459,  460,  415,  451,  437,
      398,  461,  462,  414,  401,  464,  417,  410,  410,  416,
      416,  420,  421,  422,  423,  424,  439,  426,  453,  467,
      444,  424,  448,  436,  465,  447,  452,  468,  439,  456,

      455,  458,  458,  458,  463,  463,  463,  454,  482,  457,
      458,  483,  484,  463,  476,  490,  476,  482,  492,  493,
      486,  461,  486,  476,  459,  494,  497,  462,  493,  486,
      460,  491,  491,  491,  484,  503,  495,  498,  501,  464,
      491,  499,  499,  499,  465,  504,  505,  505,  505,  467,
      499,  508,  511,  524,  512,  505,  514,  541,  468,  548,
      545,  514,  524,  525,  525,  525,  483,  495,  492,  501,
      552,  558,  526,  525,  528,  530,  528,  530,  559,  490,
      494,  526,  599,  528,  530,  535,  535,  535,  589,  495,
      497,  501,  498,  538,  535,  537,  537,  537,  539,  503,

      504,  540,  538,  593,  537,  511,  512,  539,  572,  566,
      540,  566,  541,  573,  548,  508,  545,  572,  566,  571,
      571,  571,  573,  574,  574,  574,  552,  586,  525,  571,
      558,  600,  577,  574,  577,  587,  586,  559,  584,  584,
      584,  577,  588,  589,  587,  620,  599,  584,  601,  623,
      601,  588,  605,  627,  605,  647,  633,  601,  593,  612,
      616,  605,  539,  611,  611,  611,  618,  619,  612,  616,
      628,  639,  628,  611,  640,  618,  619,  642,  600,  628,
      639,  653,  659,  640,  571,  632,  642,  659,  574,  630,
      653,  626,  624,  621,  614,  613,  610,  609,  608,  607,

      604,  620,  603,  602,  627,  623,  588,  597,  596,  594,
      592,  590,  585,  582,  580,  579,  575,  570,  569,  647,
      568,  565,  563,  562,  561,  560,  557,  555,  611,  553,
      618,  551,  549,  546,  544,  542,  536,  534,  532,  531,
      527,  642,  679,  679,  680,  680,  680,  680,  680,  680,
      681,  681,  681,  681,  681,  681,  682,  682,  683,  683,
      523,  683,  683,  683,  684,  522,  684,  684,  685,  685,
      685,  686,  521,  686,  686,  687,  687,  687,  688,  688,
      688,  688,  688,  688,  689,  689,  520,  689,  689,  689,
      690,  690,  690,  690,  690,  690,  691,  691,  691,  691,

      691,  691,  692,  692,  692,  692,  692,  692,  693,  693,
      693,  693,  693,  693,  694,  694,  694,  694,  694,  694,
      695,  695,  695,  695,  695,  695,  696,  696,  696,  696,
      696,  696,  697,  697,  697,  697,  697,  697,  698,  698,
      698,  698,  698,  698,  699,  699,  699,  699,  699,  699,
      700,  700,  700,  700,  700,  700,  701,  701,  701,  701,
      701,  701,  702,  702,  702,  702,  702,  702,  703,  703,
      703,  703,  703,  703,  704,  704,  704,  704,  704,  704,
      705,  705,  705,  705,  705,  705,  706,  706,  706,  706,
      706,  706,  707,  707,  707,  707,  707,  707,  708,  708,

      708,  708,  708,  708,  709,  709,  709,  709,  709,  709,
      710,  710,  710,  710,  710,  710,  711,  711,  711,  711,
      711,  711,  712,  712,  712,  712,  712,  712,  713,  713,
      713,  713,  713,  713,  714,  714,  714,  714,  714,  714,
      715,  715,  715,  715,  715,  715,  716,  716,  716,  716,
      716,  716,  717,  717,  717,  717,  717,  717,  718,  718,
      718,  718,  718,  718,  719,  719,  719,  719,  719,  719,
      720,  720,  720,  720,  720,  720,  721,  721,  721,  721,
      721,  721,  722,  722,  722,  722,  722,  722,  723,  723,
      723,  723,  723,  723,  724,  724,  724,  724,  724,  724,

      725,  725,  725,  725,  725,  725,  726,  726,  726,  726,
      726,  726,  727,  727,  727,  727,  727,  727,  519,  518,
      517,  515,  513,  509,  507,  506,  502,  500,  496,  489,
      488,  487,  485,  481,  480,  479,  478,  475,  474,  473,
      472,  470,  469,  466,  445,  442,  441,  440,  438,  435,
      434,  433,  432,  430,  429,  428,  427,  425,  390,  384,
      381,  380,  377,  376,  369,  365,  364,  363,  362,  361,
      360,  358,  357,  356,  315,  311,  310,  299,  298,  297,
      296,  294,  293,  292,  291,  290,  289,  288,  287,  286,
      285,  284,  277,  276,  269,  265,  264,  257,  253,  252,

      245,  243,  242,  228,  225,  224,  217,  216,  209,  196,
      195,  188,  166,  164,  157,  155,  154,  153,  152,  149,
      138,  136,  133,  129,  127,  124,  120,  118,  115,  111,
      107,  105,  101,   99,   96,   69,   67,   65,   62,   60,
       56,   53,   52,   51,   39,   38,   35,   29,   23,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,

      678,  678,  678,  678,  678,  678,  678,  678,  678,  678,
      678,  678,  678,  678,  678,  678,  678,  678
    } ;

static yyconst flex_int16_t yy_rule_linenum[100] =
    {   0,
       92,   93,   94,   95,   99,  100,  101,  102,  103,  105,
      106,  108,  117,  118,  145,  180,  204,  210,  231,  238,
      249,  254,  268,  273,  279,  303,  310,  312,  330,  336,
      341,  346,  351,  361,  369,  377,  386,  414,  434,  435,
      436,  437,  439,  444,  467,  469,  471,  527,  528,  531,
      533,  541,  542,  543,  544,  545,  546,  547,  548,  549,
      550,  551,  552,  553,  554,  555,  556,  557,  558,  559,
      560,  561,  562,  563,  564,  565,  566,  567,  568,  569,
      570,  571,  572,  573,  574,  575,  576,  577,  583,  589,
      601,  603,  605,  620,  621,  631,  634,  635,  637

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "aprepro.ll"
/* -*- Mode: c++ -*- */
#line 3 "aprepro.ll"

#include <fstream>
#include <iostream>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <string.h>
#include <fcntl.h> 

#include "apr_scanner.h"
#include "aprepro.h"
#include "apr_util.h"

#define YY_NO_UNISTD_H
/* import the parser's token type into a local typedef */
typedef SEAMS::Parser::token token;
typedef SEAMS::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

#define show(x)   *(aprepro->infoStream) << "<" << x << ">" << std::flush;
 namespace SEAMS {
   extern int echo;
   extern char *get_temp_filename(void);
   extern char *pathopen(const char *file);
   extern void  conv_string(const char *string);
   void yyerror(const char *s);
 }
 
int ifdef;
int file_must_exist = 0; /* Global used by include/conditional include */

/* Global variables used by the looping mechanism */
int loop_lvl = 0;
std::fstream *tmp_file;
char  *temp_f;

#define MAX_IF_NESTING 64

 int if_state[MAX_IF_NESTING] = {0}; // INITIAL
 int if_case_run[MAX_IF_NESTING] = {false}; /* Has any if or elseif condition executed */
 int if_lvl = 0;
 int if_skip_level = 0;
bool suppress_nl = false;
 bool switch_active = false;   // Are we in a switch
 bool switch_case_run = false; // has there been a case which matched condition run?
 bool switch_skip_to_endcase = false;
 double switch_condition = 0.0; // Value specified in "switch(condition)"

// For substitution history
size_t curr_index = 0;
std::string history_string;
size_t hist_start = 0;

#define YY_USER_ACTION curr_index += yyleng;
 
/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SEAMSFlexLexer" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* enables the use of start condition stacks */

#line 1353 "apr_scanner.cc"

#define INITIAL 0
#define PARSING 1
#define GET_FILENAME 2
#define IF_SKIP 3
#define GET_VAR 4
#define VERBATIM 5
#define IF_WHILE_SKIP 6
#define GET_LOOP_VAR 7
#define LOOP 8
#define LOOP_SKIP 9
#define END_CASE_SKIP 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 90 "aprepro.ll"

#line 1522 "apr_scanner.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 679 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2450 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 100 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 100 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 101 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 92 "aprepro.ll"
{ BEGIN(INITIAL);   }
	YY_BREAK
case 2:
#line 94 "aprepro.ll"
case 3:
YY_RULE_SETUP
#line 94 "aprepro.ll"
{ if (echo) ECHO; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 95 "aprepro.ll"
{ if (echo) ECHO; aprepro.ap_file_list.top().lineno++;   }
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 99 "aprepro.ll"
{ BEGIN(VERBATIM);  }
	YY_BREAK
case 6:
#line 101 "aprepro.ll"
case 7:
YY_RULE_SETUP
#line 101 "aprepro.ll"
{ echo = true;	}
	YY_BREAK
case 8:
#line 103 "aprepro.ll"
case 9:
YY_RULE_SETUP
#line 103 "aprepro.ll"
{ echo = false;	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 105 "aprepro.ll"
{ aprepro.stateImmutable = true;	}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 106 "aprepro.ll"
{ aprepro.stateImmutable = aprepro.ap_options.immutable; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 108 "aprepro.ll"
{
    BEGIN(GET_LOOP_VAR);
    if (aprepro.ap_options.debugging) 
      std::cerr << "DEBUG LOOP - Found loop begin test " << yytext << " in file "
		<< aprepro.ap_file_list.top().name << "\n";
  }
	YY_BREAK


case 13:
/* rule 13 can match eol */
#line 118 "aprepro.ll"
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 118 "aprepro.ll"
{
    /* Loop control defined by integer */
    char *pt = strchr(yytext, ')');
    *pt = '\0';
    sscanf (yytext, "%lf", &yylval->val);

    if (yylval->val <= 0) {
      BEGIN(LOOP_SKIP);
    }
    else {/* Value defined and != 0. */
      temp_f = get_temp_filename();
      SEAMS::file_rec new_file(temp_f, 0, true, (int)yylval->val);
      aprepro.ap_file_list.push(new_file);

      if (aprepro.ap_options.debugging) 
	std::cerr << "DEBUG LOOP VAR = " << aprepro.ap_file_list.top().loop_count
		  << " in file " << aprepro.ap_file_list.top().name
		  << " at line " << aprepro.ap_file_list.top().lineno << "\n";

      tmp_file = new std::fstream(temp_f, std::ios::out);
      loop_lvl++;
      BEGIN(LOOP);
    }
    aprepro.ap_file_list.top().lineno++;
    aprepro.isCollectingLoop = true;
  }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 145 "aprepro.ll"
{
    /* Loop control defined by variable */
    symrec *s;
    char *pt = strchr(yytext, ')');
    *pt = '\0';
    if (!check_valid_var(yytext)) {
      aprepro.warning("Invalid variable name syntax '" + std::string(yytext) + "'");
      BEGIN(LOOP_SKIP);
    } else {
      s = aprepro.getsym(yytext);

      if (s == 0 || (s->type != token::SVAR && s->type != token::IMMSVAR && s->value.var == 0.)) {
	BEGIN(LOOP_SKIP);
      }
      else { /* Value defined and != 0. */
	temp_f = get_temp_filename();
	SEAMS::file_rec new_file(temp_f, 0, true, (int)s->value.var);
	aprepro.ap_file_list.push(new_file);
				
	if (aprepro.ap_options.debugging) 
	  std::cerr << "DEBUG LOOP VAR = " << aprepro.ap_file_list.top().loop_count
		    << " in file " << aprepro.ap_file_list.top().name
		    << " at line " << aprepro.ap_file_list.top().lineno << "\n";

	tmp_file = new std::fstream(temp_f, std::ios::out);
	loop_lvl++;
	BEGIN(LOOP);
      }
    }
    aprepro.ap_file_list.top().lineno++;
    aprepro.isCollectingLoop = true;
  }
	YY_BREAK


case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 180 "aprepro.ll"
{
    aprepro.ap_file_list.top().lineno++;
    if(loop_lvl > 0)
      --loop_lvl;

    if (loop_lvl == 0) {
      BEGIN(INITIAL);
      tmp_file->close();
      delete tmp_file;

      if(!aprepro.doLoopSubstitution)
        yy_push_state(VERBATIM);

      aprepro.isCollectingLoop = false;
				     
      yyin = aprepro.open_file(aprepro.ap_file_list.top().name, "r");
      yyFlexLexer::yypush_buffer_state (yyFlexLexer::yy_create_buffer( yyin, YY_BUF_SIZE));
      curr_index = 0;
    }
    else {
      (*tmp_file) << yytext;
    }
  }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 204 "aprepro.ll"
{
    loop_lvl++; /* Nested Loop */
    (*tmp_file) << yytext;
    aprepro.ap_file_list.top().lineno++;
  }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 210 "aprepro.ll"
{
    if(aprepro.ap_options.interactive ||
       aprepro.string_interactive())
    {
      aprepro.warning("Aborting loop(s).", false);

      // Leave the looping state and remove the loop file
      BEGIN(INITIAL);
      tmp_file->close();
      delete tmp_file;

      if(aprepro.ap_file_list.top().tmp_file) {
        remove(aprepro.ap_file_list.top().name.c_str());
        aprepro.ap_file_list.pop();
      }

      loop_lvl = 0;
      aprepro.isCollectingLoop = false;
    }
  }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 231 "aprepro.ll"
{
    (*tmp_file) << yytext;
    aprepro.ap_file_list.top().lineno++;
  }
	YY_BREAK


case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 238 "aprepro.ll"
{
    aprepro.ap_file_list.top().lineno++;
    if(loop_lvl > 0)
      --loop_lvl;

    if (loop_lvl == 0) {
      BEGIN(INITIAL);
      aprepro.isCollectingLoop = false;
    }
  }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 249 "aprepro.ll"
{
    loop_lvl++; /* Nested Loop */
    aprepro.ap_file_list.top().lineno++;
  }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 254 "aprepro.ll"
{
    if(aprepro.ap_options.interactive ||
       aprepro.string_interactive())
    {
      aprepro.warning("Aborting loops(s).", false);

      // Leave the looping state
      BEGIN(INITIAL);

      loop_lvl = 0;
      aprepro.isCollectingLoop = false;
    }
  }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 268 "aprepro.ll"
{
    aprepro.ap_file_list.top().lineno++;
  }
	YY_BREAK

case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 273 "aprepro.ll"
{
  yyless(0);
  BEGIN(INITIAL);
  switch_skip_to_endcase = false;
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 279 "aprepro.ll"
{
 aprepro.ap_file_list.top().lineno++;
 if (!switch_active) {
    yyerror("default statement found outside switch statement.");
  }

  if (!switch_case_run) {
    switch_case_run = true;
    BEGIN(INITIAL);
    switch_skip_to_endcase = false;
    if (aprepro.ap_options.debugging) 
      fprintf (stderr, "DEBUG SWITCH: 'default' code executing at line %d\n",
	       aprepro.ap_file_list.top().lineno);
  } 
  else {
    if (aprepro.ap_options.debugging) 
      fprintf (stderr, "DEBUG SWITCH: 'default' not executing since a previous case already ran at line %d\n",
	       aprepro.ap_file_list.top().lineno);
    
    /* Need to skip all code until end of case */
    BEGIN(END_CASE_SKIP);
  }
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 303 "aprepro.ll"
{
  aprepro.ap_file_list.top().lineno++;
  BEGIN(INITIAL);
  switch_active = false;
  switch_skip_to_endcase = false;
}
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 310 "aprepro.ll"
{  aprepro.ap_file_list.top().lineno++; }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 312 "aprepro.ll"
{
  aprepro.ap_file_list.top().lineno++;
  if (!switch_active) {
    yyerror("endswitch statement found without matching switch.");
  }
  switch_active = false;
}
	YY_BREAK

/* If an if was found while skipping, then eat
   * that entire if block until endif
   * found since there is no way that
   * any of the code in that if block could be executed.
   * Make sure to handle multiple levels of skipped ifs...
   *
   * NOTE: if_lvl was not incremented, so don't need to decrement when
   *       endif found.
   */
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 330 "aprepro.ll"
{
    aprepro.ap_file_list.top().lineno++;  
    if (--if_skip_level == 0)
      BEGIN(IF_SKIP);
  }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 336 "aprepro.ll"
{ 
    aprepro.ap_file_list.top().lineno++;  
    if_skip_level++;
  }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 341 "aprepro.ll"
{
    aprepro.ap_file_list.top().lineno++;  
    if_skip_level++;
  }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 346 "aprepro.ll"
{
    aprepro.ap_file_list.top().lineno++;  
    if_skip_level++;
  }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 351 "aprepro.ll"
{
    aprepro.ap_file_list.top().lineno++;
  }
	YY_BREAK


/* IF an if, ifdef, or ifndef found while skipping, then
   * skip the entire block up and including the endif.
   * The (IF_WHILE_SKIP) start condition handles this skipping.
   */
case 34:
YY_RULE_SETUP
#line 361 "aprepro.ll"
{ 
    if (aprepro.ap_options.debugging) 
      fprintf (stderr, "DEBUG IF: 'ifdef'  found while skipping at line %d\n",
	       aprepro.ap_file_list.top().lineno);
    if_skip_level = 1;
    BEGIN(IF_WHILE_SKIP);
  }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 369 "aprepro.ll"
{
    if (aprepro.ap_options.debugging) 
      fprintf (stderr, "DEBUG IF: 'ifdef'  found while skipping at line %d\n",
	       aprepro.ap_file_list.top().lineno);
    if_skip_level = 1;
    BEGIN(IF_WHILE_SKIP);
  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 377 "aprepro.ll"
{
    if (aprepro.ap_options.debugging) 
      fprintf (stderr, "DEBUG IF: 'ifndef'  found while skipping at line %d\n",
	       aprepro.ap_file_list.top().lineno);
    if_skip_level = 1;
    BEGIN(IF_WHILE_SKIP);
  }
	YY_BREAK

case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 386 "aprepro.ll"
{ 
  aprepro.ap_file_list.top().lineno++; 
  if (aprepro.ap_options.debugging) 
    fprintf (stderr, "DEBUG IF: 'else'   at level = %d at line %d\n",
	     if_lvl, aprepro.ap_file_list.top().lineno);
  if(YY_START == VERBATIM) {
    if(echo) ECHO;
  }
  else if (if_state[if_lvl] == IF_SKIP) {
    if (!if_case_run[if_lvl]) {
      BEGIN(INITIAL);
      if_state[if_lvl] = INITIAL;
      if_case_run[if_lvl] = true;
    } else {
      BEGIN(IF_SKIP);
      if_state[if_lvl] = IF_SKIP;
    }
  }
  else if (if_state[if_lvl] == INITIAL) {
    BEGIN(IF_SKIP);
    if_state[if_lvl] = IF_SKIP;
  }
  
  /* If neither is true, this is a nested 
     if that should be skipped */
}
	YY_BREAK

case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 414 "aprepro.ll"
{
    /* If any previous 'block' of this if has executed, then
     * just skip this block; otherwise see if condition is
     * true and execute this block
     */
    if (aprepro.ap_options.debugging) 
      fprintf (stderr, "DEBUG IF: 'elseif'   at level = %d at line %d\n",
	       if_lvl, aprepro.ap_file_list.top().lineno);

    if (if_case_run[if_lvl]) { /* A previous else/elseif has run */
      aprepro.ap_file_list.top().lineno++; 
      /* Already in IF_SKIP, so don't need to change state */
    } else {
      /* Need to check the elseif condition; push back and parse */
      yyless(0);
      BEGIN(INITIAL);
      if_state[if_lvl] = INITIAL;
    }
  }
	YY_BREAK
case 39:
#line 435 "aprepro.ll"
case 40:
#line 436 "aprepro.ll"
case 41:
#line 437 "aprepro.ll"
case 42:
YY_RULE_SETUP
#line 437 "aprepro.ll"
{ ; }
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 439 "aprepro.ll"
{
     aprepro.ap_file_list.top().lineno++;
   }
	YY_BREAK

case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 444 "aprepro.ll"
{
    aprepro.ap_file_list.top().lineno++;

    if(YY_START == VERBATIM) {
      if(echo) ECHO;
    }
    else {
      if (if_state[if_lvl] == IF_SKIP ||
          if_state[if_lvl] == INITIAL)
            BEGIN(INITIAL);
			   /* If neither is true, this is a nested 
			      if that should be skipped */
      if (aprepro.ap_options.debugging)
        printf ("DEBUG IF: 'endif'  at level = %d at line %d\n",
                if_lvl, aprepro.ap_file_list.top().lineno);
      if (--if_lvl < 0) {
        if_lvl = 0;
        yyerror("Improperly Nested ifdef/ifndef statements");
      }
      /* Ignore endif if not skipping */
    }
  }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 467 "aprepro.ll"
{ BEGIN(GET_FILENAME); 
                             file_must_exist = true; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 469 "aprepro.ll"
{ BEGIN(GET_FILENAME);
                             file_must_exist = !true; }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 471 "aprepro.ll"
{ BEGIN(INITIAL); 
			     {
			       symrec *s;
			       int quoted = false;
			       std::fstream *yytmp;
			       char *pt = strchr(yytext, ')');
			       *pt = '\0';
			       /* Check to see if surrounded by double quote */ 
			       if ((pt = strchr(yytext, '"')) != NULL) {
				 yytext++;
				 quoted = true;
			       }
			       if ((pt = strrchr(yytext, '"')) != NULL) {
				 *pt = '\0';
				 quoted = true;
			       }

			       if (quoted == false) {
				 /* See if this is an aprepro variable referring to a name */
				 s = aprepro.getsym(yytext);
				 if (s == 0 || (s->type != token::SVAR && s->type != token::IMMSVAR)) {
				   pt = yytext;
				 } else {
				   pt = (char*)s->value.svar;
				 }
			       } else {
				 pt = yytext;
			       }
			       
			       if (file_must_exist)
				 yytmp = aprepro.open_file(pt, "r");
			       else
				 yytmp = aprepro.check_open_file(pt, "r");
             if (yytmp != NULL) {
				 yyin = yytmp;
				 aprepro.info("Included File: '" +
					      std::string(pt) + "'", true);

				 SEAMS::file_rec new_file(pt, 0, false, 0);
				 aprepro.ap_file_list.push(new_file);

				 yyFlexLexer::yypush_buffer_state (
            yyFlexLexer::yy_create_buffer( yyin, YY_BUF_SIZE));
         curr_index = 0;

         if(!aprepro.doIncludeSubstitution)
           yy_push_state(VERBATIM);

			       } else {
				 aprepro.warning("Can't open '" +
						 std::string(yytext) + "'", false);
			       }
			       aprepro.ap_file_list.top().lineno++;
			     }
			   }
	YY_BREAK
case 48:
#line 528 "aprepro.ll"
case 49:
YY_RULE_SETUP
#line 528 "aprepro.ll"
{ sscanf (yytext, "%lf", &yylval->val);
                       return(token::NUM); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 531 "aprepro.ll"
; // Empty rule
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 533 "aprepro.ll"
{
           symrec *s;
			     s = aprepro.getsym(yytext);
			     if (s == 0)
			       s = aprepro.putsym (yytext, SEAMS::Aprepro::UNDEFINED_VARIABLE, 0);
			     yylval->tptr = s;
			     return((token::yytokentype)s->type);
			   }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 541 "aprepro.ll"
return(token::EQUAL);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 542 "aprepro.ll"
return(token::EQ_PLUS);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 543 "aprepro.ll"
return(token::EQ_MINUS);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 544 "aprepro.ll"
return(token::EQ_TIME);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 545 "aprepro.ll"
return(token::EQ_DIV);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 546 "aprepro.ll"
return(token::EQ_POW);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 547 "aprepro.ll"
return(token::EQ_POW);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 548 "aprepro.ll"
return(token::INC);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 549 "aprepro.ll"
return(token::DEC);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 550 "aprepro.ll"
return(token::PLU);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 551 "aprepro.ll"
return(token::SUB);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 552 "aprepro.ll"
return(token::TIM);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 553 "aprepro.ll"
return(token::TIM);		/* ~ is same as multiply */
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 554 "aprepro.ll"
return(token::CONCAT);	/* String concatenation */
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 555 "aprepro.ll"
return(token::DIV);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 556 "aprepro.ll"
return(token::MOD);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 557 "aprepro.ll"
return(token::POW);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 558 "aprepro.ll"
return(token::POW);
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 559 "aprepro.ll"
aprepro.ap_file_list.top().lineno++;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 560 "aprepro.ll"
return(token::LPAR);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 561 "aprepro.ll"
return(token::RPAR);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 562 "aprepro.ll"
return(token::COMMA);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 563 "aprepro.ll"
return(token::SEMI);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 564 "aprepro.ll"
return(token::COLON);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 565 "aprepro.ll"
return(token::QUEST);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 566 "aprepro.ll"
return(token::LT);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 567 "aprepro.ll"
return(token::GT);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 568 "aprepro.ll"
return(token::LE);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 569 "aprepro.ll"
return(token::GE);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 570 "aprepro.ll"
return(token::EQ);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 571 "aprepro.ll"
return(token::NE);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 572 "aprepro.ll"
return(token::LAND);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 573 "aprepro.ll"
return(token::LOR);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 574 "aprepro.ll"
return(token::NOT);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 575 "aprepro.ll"
return(token::LBRACK);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 576 "aprepro.ll"
return(token::RBRACK);
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 577 "aprepro.ll"
{
           char *pt = strrchr(yytext, '"');
			     *pt = '\0';
                             new_string(yytext+1, &yylval->string);
			     return token::QSTRING; }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 583 "aprepro.ll"
{
           char *pt = strrchr(yytext, '\'');
			     *pt = '\0';
                             new_string(yytext+1, &yylval->string);
			     return token::QSTRING; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 589 "aprepro.ll"
{
  // Add to the history string
  save_history_string();

  if (switch_skip_to_endcase)
    BEGIN(END_CASE_SKIP);
  else
    BEGIN(if_state[if_lvl]);
  return(token::RBRACE);
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 601 "aprepro.ll"
{ if (echo) LexerOutput("{", 1); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 603 "aprepro.ll"
{ if (echo) LexerOutput("}", 1); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 605 "aprepro.ll"
{
    // Check if we need to save the substitution history first.
    if(aprepro.ap_options.keep_history &&
       strcmp("_string_", aprepro.ap_file_list.top().name.c_str()) != 0)
    {
      hist_start = curr_index - yyleng;
      if(hist_start < 0)
        hist_start = 0;
    }

    BEGIN(PARSING);

    return(token::LBRACE);
  }
	YY_BREAK
case 94:
#line 621 "aprepro.ll"
case 95:
YY_RULE_SETUP
#line 621 "aprepro.ll"
{ if (aprepro.ap_options.end_on_exit)
			       {
				 if (echo) ECHO;
				 return((token::yytokentype)-1);  
			       }
                              else 
                               if (echo) ECHO;
			   }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 631 "aprepro.ll"
{ if (echo) ECHO; }
	YY_BREAK
case 97:
#line 635 "aprepro.ll"
case 98:
YY_RULE_SETUP
#line 635 "aprepro.ll"
{ if (echo && if_state[if_lvl] != IF_SKIP) ECHO; }
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 637 "aprepro.ll"
{ if (echo && !suppress_nl) ECHO; suppress_nl = false;
                             aprepro.ap_file_list.top().lineno++;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 640 "aprepro.ll"
ECHO;
	YY_BREAK
#line 2537 "apr_scanner.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PARSING):
case YY_STATE_EOF(GET_FILENAME):
case YY_STATE_EOF(IF_SKIP):
case YY_STATE_EOF(GET_VAR):
case YY_STATE_EOF(VERBATIM):
case YY_STATE_EOF(IF_WHILE_SKIP):
case YY_STATE_EOF(GET_LOOP_VAR):
case YY_STATE_EOF(LOOP):
case YY_STATE_EOF(LOOP_SKIP):
case YY_STATE_EOF(END_CASE_SKIP):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SEAMSfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SEAMSfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SEAMSrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SEAMSrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 679 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 679 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 678);

		return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SEAMSalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SEAMSalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SEAMSfree((void *) b->yy_ch_buf  );

	SEAMSfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SEAMSalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SEAMSrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SEAMSalloc(new_size  );

		else
			(yy_start_stack) = (int *) SEAMSrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SEAMSalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SEAMSrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SEAMSfree (void * ptr )
{
	free( (char *) ptr );	/* see SEAMSrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 640 "aprepro.ll"



/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

namespace SEAMS {

  Scanner::Scanner(Aprepro& aprepro_yyarg,
		   std::istream* in,
		   std::ostream* out)
    : SEAMSFlexLexer(in, out), aprepro(aprepro_yyarg)
  {
    aprepro.outputStream.push(out);
  }

  Scanner::~Scanner()
  { }

  void Scanner::LexerOutput(const char* buf, int size )
  {
    // Do this before writing so that we have the correct index in the
    // output stream.
    if(aprepro.ap_options.keep_history)
    {
      aprepro.add_history(history_string, buf);
      history_string.clear();
      hist_start = 0;
    }

    aprepro.outputStream.top()->write( buf, size );
    if (aprepro.ap_options.interactive && aprepro.outputStream.size() == 1) {
      // In interactive mode, output to stdout in addition to the
      // output stream, unless user has redirected output...
      std::cout << buf;
    }
  }

  int Scanner::yywrap()
  {
    // Clear the history string.
    history_string.clear();
    hist_start = 0;
    curr_index = 0;

    // If we are using the string interactive method, we want to return to
    // our original state if parsing was cutoff prematurely.
    if(aprepro.string_interactive() && YY_START == PARSING)
    {  


      if (switch_skip_to_endcase)
        BEGIN(END_CASE_SKIP);
      else
        BEGIN(if_state[if_lvl]);
    }


    if (aprepro.ap_file_list.size() <= 1) {		/* End of main file, not in nested include */
      return (1);
    }
    else if (aprepro.string_interactive() && loop_lvl) {
        return (1);
    }
    else {
      /* We are in an included or looping file */
      if (aprepro.ap_file_list.top().tmp_file) {
        if (aprepro.ap_options.debugging)
          std::cerr << "DEBUG LOOP: Loop count = " << aprepro.ap_file_list.top().loop_count << "\n";
        if (--aprepro.ap_file_list.top().loop_count <= 0)  {
          // On Windows, you can't remove the temp file until all the references to the
          // file object have been released, so we will delete it here.
          delete yyin;

          if (strcmp("_string_", aprepro.ap_file_list.top().name.c_str()) != 0) {
            if (!aprepro.ap_options.debugging)
              remove(aprepro.ap_file_list.top().name.c_str());	/* Delete file if temporary */

            if(!aprepro.doLoopSubstitution)
              yy_pop_state();
          }

          aprepro.ap_file_list.pop();
          yyFlexLexer::yypop_buffer_state();
        }
        else {
          // Do not pop ap_file_list; we are rereading that file...
          delete yyin;
          yyFlexLexer::yypop_buffer_state();
          yyin = aprepro.open_file(aprepro.ap_file_list.top().name, "r");
          yyFlexLexer::yypush_buffer_state (yyFlexLexer::yy_create_buffer(yyin, YY_BUF_SIZE));
          aprepro.ap_file_list.top().lineno = 0;
        }
      }
      else {
        delete yyin;
        yyFlexLexer::yypop_buffer_state();
        aprepro.ap_file_list.pop();

        /* Turn echoing back on at end of included files. */
        echo = true;

        // If we are not doing aprepro substitutions for the included file, but
        // just collecting lines, pop the state from VERBATIM back to what it
        // was previously.
        if(!aprepro.doIncludeSubstitution)
          yy_pop_state();

        /* Set immutable mode back to global immutable
        * state at end of included file*/
        aprepro.stateImmutable = aprepro.ap_options.immutable;
      }

      // Reset the current character index.
      curr_index = yyin->tellg();

      return (0);
    }
  }

  /* Print error message to standard error and return.  Note: internally
   *   'lineno' starts at zero.  To avoid confusion, we add 1 to value
   *   when it is output.
   */

  void Scanner::yyerror (const char *s)
  {
    aprepro.error(s);
  }

  char *Scanner::execute (char string[])
  {
    /* Push the contents of 'string' onto the stack to be reread.
     * 'string' will be surrounded by {} so it must be a valid expression.
     */

    /*
     * NOTE: The closing } has not yet been scanned in the call to execute();
     *       therefore, we read it ourselves using input(), then we push:
     *       '}{' + our string + '}' 
     */
    int i;
    while ((i = yyFlexLexer::yyinput ()) != '}' && i != EOF)
      curr_index++;				/* eat up values */

    // Increment curr_index to account for the '}' and save history
    curr_index++;
    save_history_string();

    /* Allocate space for string + '}' + '{' + end_of_string */
    std::string new_string;
    new_string += "}{";
    new_string += string;
    new_string += "}";

    aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));
  
    std::istringstream *ins = new std::istringstream(new_string); // Declare an input string stream.
    yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    return (NULL);
  }

  /* Push the contents of 'string' onto the stack to be reread.
   * 'string' will not be surrounded by {}.
   */

  char *Scanner::rescan (char *string)
  {
    int i;
    /*
     * NOTE: The closing } has not yet been scanned in the call to rescan();
     *       therefore, we read it ourselves using input(), then we push our
     *       string and then put the closing } back on the stack last
     *       (to be read first),
     */
    while ((i = yyFlexLexer::yyinput ()) != '}' && i != EOF)
      curr_index++;				/* eat up values */

    // Increment curr_index to account for the '}' and save history
    curr_index++;
    save_history_string();

    {
      aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));
      std::string new_string("}");
      new_string += string;

      std::istringstream *ins = new std::istringstream(new_string); // Declare an input string stream.
      yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    }
    return (NULL);
  }

  char *Scanner::if_handler(double x)
  {
    if_lvl++;
    if (if_lvl >= MAX_IF_NESTING)
      yyerror("Too many nested if statements");

    if (x == 0) {
      if_state[if_lvl] = IF_SKIP;
      if_case_run[if_lvl] = false;
    } else {
      suppress_nl = true;
      if_state[if_lvl] = INITIAL;
      if_case_run[if_lvl] = true;
    }
    if (aprepro.ap_options.debugging) 
      std::cerr << "DEBUG IF: If level " << if_lvl << " " << if_state[if_lvl] << "\n"; 
    return(NULL);
  }

  char *Scanner::elseif_handler(double x)
  {
    if (x == 0 || if_case_run[if_lvl]) {
      if_state[if_lvl] = IF_SKIP;
    } else {
      suppress_nl = 1;
      if_state[if_lvl] = INITIAL;
      if_case_run[if_lvl] = true;
    }
    if (aprepro.ap_options.debugging) 
      std::cerr << "DEBUG IF: elseif at level " << if_lvl << " " << if_state[if_lvl] << "\n";
    return(NULL);
  }

  char *Scanner::switch_handler(double x)
  {
    // save that we are in a switch statement
    // save the value of 'x' for use in deciding which case to execute
    if (switch_active) {
      yyerror("switch statement found while switch already active. Nested switch not supported.");
    }

    switch_active = true;
    switch_case_run = false;
    switch_condition = x;
    switch_skip_to_endcase = true; /* Skip everything until first case */
    suppress_nl = true;

    if (aprepro.ap_options.debugging) {
      std::cerr << "DEBUG SWITCH: 'switch' with condition = " << switch_condition
		<< " at line " << aprepro.ap_file_list.top().lineno << "\n";
    }
    return(NULL);
  }

  char *Scanner::case_handler(double x)
  {
    // make sure we are in a switch statement 
    // if 'x' matches the value saved in the switch statement 
    // and no other case has been executed, then
    // execute the code in the case and set a flag indicating
    // the switch has run;
    // if 'x' does not match the value saved, then skip to endcase
    suppress_nl = true;

    if (!switch_active) {
      yyerror("case statement found outside switch statement.");
    }

    if (!switch_case_run && x == switch_condition) {
      switch_case_run = true;
      if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG SWITCH: 'case' condition = %g matches switch condition = %g at line %d\n",
		 x, switch_condition, aprepro.ap_file_list.top().lineno);
    } 
    else {
      if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG SWITCH: 'case' condition = %g does not match switch condition = %g (or case already matched) at line %d\n",
		 x, switch_condition, aprepro.ap_file_list.top().lineno);

      // Need to skip all code until end of case
      switch_skip_to_endcase = true;
    }
    return(NULL);
  }

  void Scanner::save_history_string()
  {
    if(!aprepro.ap_options.keep_history)
      return;

    // Don't do it if the file is the one used by execute and rescan.
    if(strcmp("_string_", aprepro.ap_file_list.top().name.c_str()) == 0)
      return;

    size_t hist_end = curr_index;
    size_t len = hist_end - hist_start;

    if(len <= 0)
      return;

    // Go back in the stream to where we started keeping history.
    yyin->seekg(hist_start);

    // Read everything up to this point again and save it.
    char* tmp = new char[len+1];
    yyin->read(tmp, len);
    tmp[len] = '\0';

    history_string = tmp;
    delete [] tmp;
    hist_start = 0;
  }
}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif
int SEAMSFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int SEAMSFlexLexer::yywrap()
{
    return 1;
}




