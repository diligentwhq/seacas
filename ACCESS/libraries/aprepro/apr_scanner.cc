#line 2 "apr_scanner.cc"

#line 4 "apr_scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer SEAMSFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *SEAMSalloc (yy_size_t  );
void *SEAMSrealloc (void *,yy_size_t  );
void SEAMSfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 98
#define YY_END_OF_BUFFER 99
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[661] =
    {   0,
        0,    0,   48,   48,    0,    0,   37,   37,    0,    0,
        2,    2,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   99,   96,   96,   97,   94,   95,   95,   95,
       96,   91,   48,   68,   83,   96,   65,   96,   96,   69,
       70,   61,   59,   71,   60,   47,   64,   46,   73,   72,
       75,   50,   76,   74,   49,   49,   49,   84,   85,   66,
       91,   96,   88,   62,   96,   96,   94,   95,   95,   95,
       96,   91,   40,   40,   41,   37,   40,   37,   37,   37,
       37,   40,   40,   96,    3,    3,    4,    2,    3,    2,
        2,    2,    2,    3,    3,   96,   96,   31,   94,   95,

       95,   95,   96,   91,   96,   96,   94,   96,   96,   95,
       95,   95,   96,   91,   96,   96,   18,   94,   95,   95,
       95,   96,   91,   96,   96,   21,   94,   95,   95,   95,
       96,   91,   96,   96,   25,   94,   95,   95,   95,   96,
       91,    0,    0,   95,   95,   95,   89,   90,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   48,    0,   80,
        0,   86,   81,    0,   87,   67,   53,   57,   51,   58,
       52,   47,    0,   63,   54,   47,   46,    0,   77,   79,
       78,   49,   49,   49,   55,    0,   82,    0,    0,    0,
        0,   95,   95,   95,   89,   90,    0,    0,    0,   37,

       37,   37,   37,   37,   38,   39,    0,    0,    0,    0,
        0,    2,    2,    2,    2,    2,    0,    0,   31,    0,
        0,   95,   95,   95,   89,   90,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       95,   95,   95,   89,   90,    0,    0,   18,    0,    0,
       95,   95,   95,   89,   90,    0,    0,    0,   21,    0,
        0,   95,   95,   95,   89,   90,    0,    0,    0,   25,
        0,    0,   95,   95,   95,   89,   90,    0,    0,    0,
        0,   95,   95,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   56,    0,   47,    0,   46,   49,

       49,    0,   45,   95,   95,    0,    0,   37,   37,    0,
        0,    0,    0,    2,    2,    0,   95,   95,    0,    0,
        0,    0,    0,    0,   13,    0,    0,    0,    0,    0,
        0,    0,   95,   95,    0,    0,   95,   95,    0,    0,
        0,   95,   95,    0,    0,    0,   95,   95,    0,    0,
        0,    0,    0,   92,   93,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   49,   49,   45,   92,
       93,    0,    0,   37,   37,    0,    0,    0,    0,    0,
       33,    2,    2,    0,   92,   93,    0,    0,    0,    0,
        0,    0,    0,   15,    0,    0,   13,    0,    0,   14,

        0,   92,   93,    0,    0,   92,   93,    0,    0,    0,
       92,   93,    0,    0,    0,   92,   93,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   29,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    6,    0,    0,    0,
        0,    0,   12,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   22,    0,    0,    0,    0,    0,   35,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   32,    0,    0,    0,    0,   31,    0,    0,    0,
        0,    0,    0,    0,    0,   18,    0,    0,    0,   17,
        0,   21,    0,    0,    0,   20,    0,   25,    0,    0,
        0,    0,    0,    0,    0,   42,    0,    0,    8,    0,
        0,    0,    0,   45,    0,    0,    0,   34,    0,   36,
        0,    0,   27,    0,   28,    0,    0,    0,    0,    0,
        0,    0,   18,    0,    0,   21,    0,   25,    0,    0,
        0,    0,    0,    0,    0,   43,    0,    0,    0,   35,

        0,   45,    0,    0,   30,    0,   15,    0,    0,    0,
       16,    0,   19,    0,    0,    0,   44,    0,    7,    0,
        0,    0,   23,    0,   42,    0,    0,    0,   15,    0,
        0,   23,    0,    9,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   26,    0,    0,   24,    0,    0,    0,
        0,    0,    0,    5,    0,    0,   10,    1,   11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,    1,   26,   27,   28,   29,   30,   31,
       29,   32,   33,   29,   29,   34,   35,   36,   37,   29,
       38,   39,   29,   40,   41,   42,   29,   43,   29,   29,
       44,   45,   46,   47,   29,    1,   48,   29,   49,   50,

       51,   52,   29,   53,   54,   29,   29,   55,   29,   56,
       57,   58,   38,   29,   59,   60,   61,   29,   62,   43,
       29,   29,   63,   64,   65,   66,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    6,
        1,    1,    1,    1,    1,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    2,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[708] =
    {   0,
        0,    0,   66,    0,  132,    0,  198,    0,  263,  264,
      327,    0,  393,    0,  459,    0,  525,    0,  591,    0,
      657,    0, 2355, 2356,  722, 2356, 2356,    0, 2311,  228,
      207,  758,  726, 2356, 2330,  268, 2356, 2343, 2341, 2356,
     2356,  260,  261, 2356,  262,  257,  259,  262, 2356, 2356,
     2327, 2326, 2325, 2356,    0, 2304,  239, 2356, 2356, 2323,
      256, 2281, 2356, 2356, 2332,  727, 2331,  813, 2299,  249,
      713,  715, 2356,  730, 2356,  733, 2356,  734,  284,  729,
      734,  228,  751,  738, 2356,  748, 2356,  878, 2356,  741,
      291,  737,  742,  231,  267, 2338,  881, 2356, 2337,  944,

     2296,  258, 1008,  878, 2326, 1011, 2325,  874,  875, 1074,
     2293,  260,  877,  747, 2332, 1014, 2356, 2331, 1140, 2290,
      261, 1204,  888, 2329, 1207, 2356, 2328, 1270, 2287,  262,
     1334, 1009, 2326, 1337, 2356, 2325, 1400, 2284,  264, 1464,
      885, 1467,  991,    0,  711,  714, 2356, 2356, 2272,  868,
      713, 2268, 2287, 2293, 2271,  259, 2265, 1468,  728, 2356,
      314, 2356, 2356, 2310, 2356, 2296, 2356, 2356, 2356, 2356,
     2356,  876,  883, 2356, 2356,  879, 1003,  898, 2356, 2356,
     2356,    0,  728,  867, 2356,  708, 2356, 2306, 1471, 1472,
     1002,    0,  874,  877, 2305, 2304, 1014, 1475, 1210, 1476,

     1479,  747, 1204, 1209, 2356, 2356, 1214, 2263,  715, 2262,
     1483, 1484, 1480,  899, 1334, 1338, 2283, 2309, 2356, 1487,
     1340,    0,  883,  995, 2308, 2307, 1465, 1214, 1216, 2297,
     1333, 1490, 1017, 1492, 1203, 1022, 1484, 1208, 1209, 1036,
        0,  997, 1002, 2296, 2295, 1334, 2303, 2356, 1495, 1510,
        0, 1004, 1011, 2302, 2301, 1500,  753, 2300, 2356, 1503,
     1529,    0, 1190, 1192, 2299, 2298, 1512, 1497, 2297, 2356,
     1506, 1344,    0, 1197, 1198, 2296, 2295, 1515, 1345,  887,
     1519,  873, 1195, 2241, 2264, 2236, 2244, 2258, 2243, 2234,
     2260, 2250, 2236, 2237, 2356, 2267, 2266, 2265, 2264, 1196,

     1304, 1512, 1054, 1309, 1312, 1489, 1514, 1556, 1558, 2227,
      256, 2222, 1577, 1569, 1579, 2241, 1315, 1316,  757, 1522,
     1582, 1590, 1060, 1229, 2356, 1525, 1245,  787, 1338, 1250,
     1341, 1347, 1321, 1322, 1575, 1570, 1323, 1325, 1538, 1592,
     1548, 1546, 1551, 1549, 1597, 1599, 1563, 1564, 1604, 1607,
     1609, 1610, 1611,    0,    0, 2230, 2241, 2226, 2222, 2234,
     2219, 2215, 2244, 2244, 2222, 1008,    0,    0, 2266,    0,
        0, 1603, 1605, 1230, 1364, 2209, 2216, 2216, 2214, 1375,
     2356, 1376, 1513, 2237,    0,    0, 1618, 1619, 1623, 1622,
     1633, 2260, 1375, 2356, 1638, 1640, 2356, 1646, 1648, 2356,

     1652,    0,    0, 1616, 1633,    0,    0, 1627, 1645, 1628,
        0,    0, 1650, 1668, 1662,    0,    0, 1663, 1667, 1673,
     1677, 1672, 2207, 1670, 2196, 2208, 2219, 2197, 1680, 2225,
     2230, 2194, 2192, 1665, 1676, 2202, 2200, 2200, 1458, 2224,
     1680, 1682, 1686, 1689, 2246, 2356, 1692, 1693, 1694, 1678,
     1681, 1691, 1695, 1705, 1744, 1704, 1706, 1707, 1747, 1709,
     1710, 2245, 1712, 1713, 2186, 2209, 2356, 2242, 2179, 2217,
     2192, 1725, 2356, 2204, 2200, 2184, 2184, 1729, 1706, 2183,
     1766, 2184, 2183, 2194, 2230, 1716, 1776, 1734, 1741, 1727,
     2229, 1739, 1751, 1780, 2228, 2227, 1757, 1758, 1786, 2226,

     2225, 1761, 2224, 2356, 1490, 1763, 2176, 1736, 2222, 2356,
     2221, 2196, 2171, 2156, 2187, 2159, 1939, 1773, 1791, 1795,
     1797, 2356, 1798, 1982, 1945, 1970, 2356, 1950, 1802, 1949,
     1808, 1812, 1815, 1817, 1948, 2356, 1818, 1947, 1946, 2356,
     1945, 2356, 1819, 1944, 1943, 2356, 1942, 2356, 1941, 1822,
     1825, 1892, 1911, 1929, 1936, 2356, 1904, 1828, 2356, 1902,
     1870, 1885, 1831, 1828, 1833, 1845, 1840, 2356, 1930, 2356,
     1897, 1928, 2356, 1927, 2356, 1850, 1925, 1834, 1838, 1852,
     1924, 1923, 2356, 1922, 1921, 2356, 1920, 2356, 1835, 1855,
     1858, 1910, 1856, 1890, 1861, 2356, 1908, 1915, 1862, 1911,

     1871, 1856, 1902, 1909, 2356, 1867, 2356, 1875, 1878, 1908,
     2356, 1906, 2356, 1905, 1863, 1882, 2356, 1841, 2356, 1894,
     1862, 1892, 2356, 1826, 1868, 1728, 1885, 1886, 2356, 1889,
     1531, 2356, 1864, 2356, 1482, 1475, 1348, 1218, 1891, 1244,
     1871, 1233, 1058, 2356, 1028, 1028, 2356,  889,  889,  722,
      762,  761,  259, 2356,  251,  233, 2356, 2356, 2356, 2356,
     1950, 1956, 1962, 1964, 1970, 1975, 1977, 1982, 1984, 1990,
     1996, 2002, 2008, 2014, 2020, 2026, 2032, 2038, 2044, 2050,
     2056, 2062, 2068, 2074, 2080, 2086, 2092, 2098, 2104, 2110,
     2116, 2122, 2128, 2134, 2140, 2146, 2152, 2158, 2164, 2170,

     2176, 2182, 2188, 2194, 2200, 2206, 2212
    } ;

static yyconst flex_int16_t yy_def[708] =
    {   0,
      660,    1,  660,    3,  660,    5,  660,    7,    1,    1,
      660,   11,  660,   13,  660,   15,  660,   17,  660,   19,
      660,   21,  660,  660,  660,  660,  660,  661,  661,  661,
      660,  660,  660,  660,  660,  662,  660,  660,  663,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  664,  664,  664,  660,  660,  660,
      660,  660,  660,  660,  665,  665,  665,  660,   68,   68,
      665,  665,  660,  660,  660,  666,  660,  666,  667,  667,
      667,  660,  660,  660,  660,  660,  660,  668,  660,  668,
      669,  669,  669,  660,  660,  670,  670,  660,  670,  660,

      100,  100,  670,  670,  671,  671,  671,  671,  671,  660,
      110,  110,  671,  671,  672,  672,  660,  672,  660,  119,
      119,  672,  672,  673,  673,  660,  673,  660,  128,  128,
      673,  673,  674,  674,  660,  674,  660,  137,  137,  674,
      674,  660,  660,  661,  661,  661,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      662,  660,  660,  663,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  664,  664,  664,  660,  660,  660,  665,  665,  665,
      665,   68,   68,   68,  665,  665,  665,  660,  660,  666,

      666,  667,  667,  667,  660,  660,  660,  660,  660,  660,
      660,  668,  668,  669,  669,  669,  660,  670,  660,  670,
      670,  100,  100,  100,  670,  670,  670,  670,  670,  671,
      671,  671,  671,  675,  671,  671,  671,  671,  671,  671,
      110,  110,  110,  671,  671,  671,  672,  660,  672,  672,
      119,  119,  119,  672,  672,  672,  672,  673,  660,  673,
      673,  128,  128,  128,  673,  673,  673,  673,  674,  660,
      674,  674,  137,  137,  137,  674,  674,  674,  674,  674,
      674,  661,  661,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  664,

      664,  665,  665,   68,   68,  665,  665,  667,  667,  660,
      660,  660,  660,  669,  669,  660,  100,  100,  670,  670,
      670,  670,  676,  675,  660,  675,  677,  671,  671,  678,
      671,  671,  110,  110,  671,  671,  119,  119,  672,  672,
      672,  128,  128,  673,  673,  673,  137,  137,  674,  674,
      674,  674,  674,  661,  661,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  664,  664,  660,   68,
       68,  665,  665,  667,  667,  660,  660,  660,  660,  660,
      660,  669,  669,  660,  100,  100,  670,  670,  670,  670,
      670,  679,  676,  660,  676,  677,  660,  677,  678,  660,

      678,  110,  110,  671,  671,  119,  119,  672,  672,  672,
      128,  128,  673,  673,  673,  137,  137,  674,  674,  674,
      674,  674,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  665,  665,  660,  660,  660,  660,  660,
      670,  670,  670,  670,  679,  660,  676,  677,  678,  671,
      671,  672,  672,  672,  672,  673,  673,  673,  673,  674,
      674,  680,  674,  674,  660,  660,  660,  681,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  682,  665,  660,
      660,  660,  660,  660,  683,  670,  670,  670,  684,  671,
      685,  672,  672,  672,  686,  687,  673,  673,  673,  688,

      689,  674,  680,  660,  674,  674,  660,  660,  681,  660,
      690,  660,  660,  660,  660,  660,  660,  682,  682,  691,
      660,  660,  660,  692,  660,  683,  660,  693,  670,  694,
      670,  684,  684,  695,  685,  660,  672,  696,  686,  660,
      687,  660,  673,  697,  688,  660,  689,  660,  698,  674,
      674,  660,  660,  660,  690,  660,  660,  660,  660,  660,
      660,  660,  682,  682,  691,  691,  660,  660,  692,  660,
      660,  693,  660,  694,  660,  670,  699,  700,  695,  695,
      701,  696,  660,  702,  697,  660,  698,  660,  674,  674,
      660,  660,  660,  660,  660,  660,  660,  703,  660,  660,

      691,  691,  660,  699,  660,  700,  660,  700,  704,  701,
      660,  702,  660,  705,  674,  660,  660,  660,  660,  660,
      660,  703,  660,  660,  660,  660,  700,  704,  660,  704,
      705,  660,  674,  660,  660,  660,  706,  660,  704,  707,
      660,  660,  706,  660,  660,  707,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,    0,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,

      660,  660,  660,  660,  660,  660,  660
    } ;

static yyconst flex_int16_t yy_nxt[2423] =
    {   0,
       24,   25,   26,   25,   24,   24,   27,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   28,   28,   28,   28,   29,
       28,   28,   28,   28,   28,   28,   28,   30,   28,   28,
       28,   28,   28,   24,   31,   24,   24,   28,   28,   28,
       29,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   32,   24,   24,   24,   24,   33,   34,   33,
       35,   36,   27,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   55,   55,   55,   55,   56,   55,   55,   55,   55,

       55,   55,   55,   57,   55,   55,   55,   55,   55,   58,
       31,   59,   60,   55,   55,   55,   56,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   61,   62,
       63,   64,   65,   66,   26,   66,   65,   65,   67,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   68,   68,   68,
       68,   69,   68,   68,   68,   68,   68,   68,   68,   70,
       68,   68,   68,   68,   68,   65,   71,   65,   65,   68,
       68,   68,   69,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   72,   65,   65,   65,   73,   74,

       75,   76,   73,   73,   77,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   78,   73,   73,   73,
       73,   73,   73,   79,   79,   79,   79,   80,   79,   79,
       79,   79,   79,   79,   79,   81,   79,   79,   79,   79,
       79,   73,   82,   73,   73,   79,   79,   79,   80,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       83,   73,   73,   73,   84,   84,   84,   84,  146,  147,
      162,  148,  166,  162,  168,  172,  174,  170,  176,  184,
      177,  175,  167,  169,  171,  186,  173,  201,  146,  194,
      205,  178,  206,  147,  213,  148,  186,  659,  224,  184,

      243,  253,  264,  144,  275,  377,  186,  173,  217,  194,
      144,  378,  178,  286,  294,  658,  162,  186,  224,  162,
      243,  253,  264,  657,  275,   61,   61,   85,   86,   87,
       88,   85,   85,   89,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   90,   85,   85,   85,   85,
       85,   85,   91,   91,   91,   91,   92,   91,   91,   91,
       91,   91,   91,   91,   93,   91,   91,   91,   91,   91,
       85,   94,   85,   85,   91,   91,   91,   92,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   95,
       85,   85,   85,   96,   97,   98,   97,   96,   96,   99,

       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,  100,  100,
      100,  100,  101,  100,  100,  100,  100,  100,  100,  100,
      102,  100,  100,  100,  100,  100,   96,  103,   96,   96,
      100,  100,  100,  101,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  104,   96,   96,   96,  105,
      106,   26,  106,  105,  105,  107,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  108,  105,  109,  105,  105,
      105,  105,  105,  105,  110,  110,  110,  110,  111,  110,
      110,  110,  110,  110,  110,  110,  112,  110,  110,  110,

      110,  110,  105,  113,  105,  105,  110,  110,  110,  111,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  114,  105,  105,  105,  115,  116,  117,  116,  115,
      115,  118,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      119,  119,  119,  119,  120,  119,  119,  119,  119,  119,
      119,  119,  121,  119,  119,  119,  119,  119,  115,  122,
      115,  115,  119,  119,  119,  120,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  123,  115,  115,
      115,  124,  125,  126,  125,  124,  124,  127,  124,  124,

      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  128,  128,  128,  128,
      129,  128,  128,  128,  128,  128,  128,  128,  130,  128,
      128,  128,  128,  128,  124,  131,  124,  124,  128,  128,
      128,  129,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  132,  124,  124,  124,  133,  134,  135,
      134,  133,  133,  136,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  137,  137,  137,  137,  138,  137,  137,  137,
      137,  137,  137,  137,  139,  137,  137,  137,  137,  137,

      133,  140,  133,  133,  137,  137,  137,  138,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  141,
      133,  133,  133,  142,  189,  142,  189,  158,  190,  158,
      190,  198,  201,  198,  198,  660,  200,  201,  189,  211,
      213,  211,  660,  282,  197,  213,  283,  288,  144,  211,
      201,  211,  207,  144,  207,  248,  144,  186,  231,  219,
      300,  144,  286,  287,  282,  197,  144,  283,  289,  312,
      287,  203,  656,  655,  204,  195,  246,  196,  186,  215,
      186,  300,  216,  208,  143,  149,  654,  150,  159,  191,
      151,  152,  199,  153,  204,  199,  660,  246,  231,  154,

      159,  209,  216,  660,  210,  329,  149,  155,  156,  341,
      159,  157,  152,  188,  188,  387,  188,  188,  188,  188,
      188,  188,  188,  188,  189,  188,  188,  188,  188,  188,
      188,  192,  192,  188,  188,  188,  188,  188,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  188,  188,  188,  188,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  188,  188,  188,  188,  211,
      219,  212,  220,  219,  220,  234,  237,  270,  231,  270,
      248,  238,  235,  239,  172,  285,  296,  172,  296,  301,

      653,  297,  213,  236,  240,  173,  304,  227,  173,  305,
      228,  298,  354,  298,  278,  317,  299,  256,  144,  652,
      301,  257,  286,  287,  236,  240,  173,  304,  227,  173,
      305,  229,  354,  279,  280,  281,  317,  352,  256,  244,
      159,  245,  257,  221,  218,  218,  219,  218,  218,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  222,  222,  218,  218,  218,  218,  218,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  218,  218,  218,
      218,  222,  222,  222,  222,  222,  222,  222,  222,  222,

      222,  222,  222,  222,  222,  222,  218,  218,  218,  218,
      219,  259,  232,  189,  232,  249,  248,  249,  149,  176,
      150,  177,  231,  151,  152,  189,  153,  318,  231,  333,
      647,  197,  178,  231,  334,  328,  337,  328,  267,  149,
      329,  156,  268,  338,  157,  152,  246,  231,  318,  331,
      333,  331,  197,  178,  332,  334,  369,  337,  651,  267,
      644,  426,  394,  268,  338,  189,  433,  246,  306,  307,
      225,  395,  226,  233,  230,  230,  250,  230,  230,  230,
      230,  230,  230,  230,  230,  231,  230,  230,  230,  230,
      230,  230,  241,  241,  230,  230,  230,  230,  230,  241,

      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  230,  230,  230,
      230,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  230,  230,  230,  230,
      247,  247,  248,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  251,  251,
      247,  247,  247,  247,  247,  251,  251,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  251,  247,  247,  247,  247,  251,  251,  251,
      251,  251,  251,  251,  251,  251,  251,  251,  251,  251,

      251,  251,  247,  247,  247,  247,  248,  201,  260,  259,
      260,  207,  201,  207,  234,  207,  219,  207,  219,  234,
      237,  235,  342,  144,  343,  238,  235,  239,  144,  347,
      348,  325,  236,  201,  355,  367,  308,  236,  240,  186,
      326,  309,  208,  342,  650,  343,  647,  397,  645,  144,
      347,  348,  400,  236,  355,  367,  398,  308,  236,  240,
      209,  401,  309,  210,  310,  321,  254,  322,  255,  261,
      258,  258,  259,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  262,  262,
      258,  258,  258,  258,  258,  262,  262,  262,  262,  262,

      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  258,  258,  258,  258,  262,  262,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  262,
      262,  262,  258,  258,  258,  258,  259,  213,  271,  270,
      271,  213,  219,  368,  231,  231,  270,  270,  370,  234,
      644,  371,  231,  144,  385,  386,  329,  144,  237,  332,
      402,  403,  406,  368,  407,  332,  314,  201,  370,  227,
      315,  371,  228,  278,  385,  386,  380,  394,  380,  213,
      402,  403,  406,  144,  407,  381,  395,  314,  335,  336,
      227,  315,  351,  229,  278,  144,  265,  323,  266,  272,

      269,  269,  270,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  273,  273,
      269,  269,  269,  269,  269,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  269,  269,  269,  269,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  269,  269,  269,  269,  270,  219,  142,  158,
      142,  158,  302,  190,  302,  190,  198,  198,  198,  200,
      660,  660,  189,  189,  211,  211,  211,  212,  220,  219,
      220,  232,  270,  232,  325,  231,  249,  248,  249,  259,

      189,  231,  248,  326,  260,  259,  260,  271,  270,  271,
      642,  483,  248,  302,  259,  302,  213,  270,  641,  319,
      320,  270,  468,  189,  219,  189,  276,  325,  277,  143,
      159,  259,  144,  632,  191,  303,  326,  199,  199,  256,
      248,  660,  660,  257,  550,  159,  159,  372,  330,  221,
      248,  259,  233,  346,  339,  340,  327,  250,  267,  201,
      256,  201,  268,  373,  257,  261,  344,  345,  272,  349,
      350,  388,  213,  349,  353,  144,  303,  144,  380,  267,
      380,  231,  213,  268,  219,  411,  231,  381,  144,  327,
      412,  391,  219,  391,  248,  374,  408,  375,  144,  259,

      392,  259,  416,  417,  410,  411,  270,  413,  382,  270,
      412,  270,  270,  270,  189,  374,  189,  375,  383,  405,
      219,  219,  416,  417,  219,  219,  377,  231,  382,  248,
      248,  389,  378,  404,  391,  219,  391,  390,  383,  389,
      394,  409,  397,  392,  231,  390,  414,  248,  397,  395,
      400,  398,  259,  434,  400,  415,  419,  398,  435,  401,
      422,  421,  418,  401,  259,  270,  450,  420,  441,  270,
      259,  444,  442,  443,  270,  270,  189,  452,  453,  270,
      466,  472,  219,  472,  219,  455,  451,  189,  219,  231,
      473,  219,  231,  248,  394,  397,  400,  248,  454,  453,

      456,  457,  447,  395,  398,  401,  259,  248,  259,  259,
      448,  270,  270,  460,  270,  270,  449,  189,  219,  459,
      461,  458,  457,  462,  463,  461,  472,  479,  472,  478,
      464,  510,  490,  486,  467,  473,  219,  487,  231,  488,
      519,  248,  489,  510,  485,  494,  248,  494,  499,  259,
      499,  492,  533,  248,  495,  491,  493,  500,  498,  259,
      259,  502,  497,  270,  638,  270,  553,  521,  496,  521,
      520,  554,  505,  501,  506,  510,  522,  529,  219,  529,
      528,  494,  248,  494,  519,  531,  530,  499,  259,  499,
      495,  534,  563,  510,  563,  537,  500,  556,  521,  567,

      521,  567,  519,  529,  219,  529,  566,  522,  568,  576,
      219,  576,  530,  543,  510,  538,  551,  510,  577,  556,
      248,  259,  544,  533,  270,  549,  533,  270,  580,  595,
      600,  595,  563,  510,  563,  556,  607,  270,  596,  519,
      556,  567,  519,  567,  566,  608,  601,  556,  601,  580,
      568,  576,  219,  576,  556,  564,  566,  270,  625,  616,
      577,  616,  595,  580,  595,  270,  270,  566,  617,  607,
      369,  596,  601,  556,  601,  581,  584,  607,  608,  578,
      629,  589,  566,  616,  590,  616,  608,  607,  629,  630,
      637,  629,  617,  629,  623,  564,  608,  630,  636,  614,

      630,  648,  630,  615,  635,  634,  649,  632,  613,  602,
      611,  605,  626,  369,  624,  633,  609,  623,  621,  620,
      619,  618,  588,  586,  613,  583,  611,  605,  640,  575,
      573,  603,  570,  599,  598,  602,  597,  594,  556,  627,
      593,  592,  591,  588,  548,  546,  586,  542,  540,  583,
      536,  575,  573,  639,  144,  144,  161,  161,  161,  161,
      161,  161,  164,  164,  164,  164,  164,  164,  182,  182,
      188,  188,  527,  188,  188,  188,  201,  571,  201,  201,
      202,  202,  202,  213,  570,  213,  213,  214,  214,  214,
      218,  218,  218,  218,  218,  218,  230,  230,  562,  230,

      230,  230,  247,  247,  247,  247,  247,  247,  258,  258,
      258,  258,  258,  258,  269,  269,  269,  269,  269,  269,
      324,  324,  324,  324,  324,  324,  393,  393,  393,  393,
      393,  393,  396,  396,  396,  396,  396,  396,  399,  399,
      399,  399,  399,  399,  445,  445,  445,  445,  445,  445,
      503,  503,  503,  503,  503,  503,  509,  509,  509,  509,
      509,  509,  518,  518,  518,  518,  518,  518,  526,  526,
      526,  526,  526,  526,  532,  532,  532,  532,  532,  532,
      535,  535,  535,  535,  535,  535,  539,  539,  539,  539,
      539,  539,  541,  541,  541,  541,  541,  541,  545,  545,

      545,  545,  545,  545,  547,  547,  547,  547,  547,  547,
      555,  555,  555,  555,  555,  555,  565,  565,  565,  565,
      565,  565,  569,  569,  569,  569,  569,  569,  572,  572,
      572,  572,  572,  572,  574,  574,  574,  574,  574,  574,
      579,  579,  579,  579,  579,  579,  582,  582,  582,  582,
      582,  582,  585,  585,  585,  585,  585,  585,  587,  587,
      587,  587,  587,  587,  604,  604,  604,  604,  604,  604,
      606,  606,  606,  606,  606,  606,  610,  610,  610,  610,
      610,  610,  612,  612,  612,  612,  612,  612,  622,  622,
      622,  622,  622,  622,  628,  628,  628,  628,  628,  628,

      631,  631,  631,  631,  631,  631,  643,  643,  643,  643,
      643,  643,  646,  646,  646,  646,  646,  646,  561,  560,
      559,  558,  557,  556,  510,  552,  504,  548,  546,  542,
      540,  536,  527,  525,  524,  523,  483,  517,  516,  515,
      514,  513,  512,  511,  510,  508,  507,  504,  446,  484,
      482,  481,  480,  477,  476,  475,  474,  471,  470,  469,
      468,  465,  446,  440,  439,  438,  437,  436,  369,  432,
      431,  430,  429,  428,  427,  426,  425,  424,  423,  384,
      379,  376,  299,  299,  297,  297,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  270,  270,  270,

      259,  259,  259,  248,  248,  248,  231,  231,  231,  219,
      219,  219,  316,  313,  311,  189,  189,  189,  295,  165,
      289,  293,  292,  291,  290,  284,  274,  270,  270,  263,
      259,  259,  252,  248,  248,  242,  231,  231,  223,  219,
      219,  193,  189,  189,  187,  185,  183,  181,  180,  179,
      165,  163,  160,  145,  660,   23,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,

      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660
    } ;

static yyconst flex_int16_t yy_chk[2423] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    9,   10,    9,   10,   30,   31,
       36,   31,   42,   36,   43,   46,   47,   45,   48,   57,
       48,   47,   42,   43,   45,   61,   46,   79,   30,   70,
       82,   48,   82,   94,   91,   94,   95,  656,  102,   57,

      112,  121,  130,   79,  139,  311,   61,   46,   95,   70,
       91,  311,   48,  156,  156,  655,  161,   95,  102,  161,
      112,  121,  130,  653,  139,    9,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   25,   71,   25,   72,   33,   66,   33,
       66,   74,   80,   74,   76,   78,   76,   81,   66,   84,
       92,   84,   90,  145,   72,   93,  146,  151,   80,   86,
      202,   86,   83,   81,   83,  257,   92,  159,  114,  319,
      183,   93,  186,  186,  145,   72,  202,  146,  151,  209,
      209,   80,  652,  651,   81,   71,  114,   71,  159,   92,
       83,  183,   93,   83,   25,   32,  650,   32,   33,   66,
       32,   32,   74,   32,   81,   76,   78,  114,  328,   32,

       84,   83,   93,   90,   83,  328,   32,   32,   32,  257,
       86,   32,   32,   68,   68,  319,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   88,
      104,   88,   97,   97,   97,  108,  109,  141,  113,  280,
      123,  109,  108,  109,  172,  150,  173,  176,  173,  184,

      649,  173,  214,  108,  109,  172,  193,  104,  176,  194,
      104,  178,  282,  178,  141,  223,  178,  123,  214,  648,
      184,  123,  150,  150,  108,  109,  172,  193,  104,  176,
      194,  104,  282,  141,  141,  141,  223,  280,  123,  113,
       88,  113,  123,   97,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      103,  132,  106,  191,  106,  116,  116,  116,  143,  177,
      143,  177,  106,  143,  143,  197,  143,  224,  233,  242,
      646,  191,  177,  236,  243,  236,  252,  236,  132,  143,
      236,  143,  132,  253,  143,  143,  233,  240,  224,  240,
      242,  240,  191,  177,  240,  243,  303,  252,  645,  132,
      643,  366,  323,  132,  253,  303,  366,  233,  197,  197,
      103,  323,  103,  106,  110,  110,  116,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,

      119,  119,  119,  119,  119,  119,  122,  203,  125,  125,
      125,  199,  204,  199,  235,  207,  228,  207,  229,  238,
      239,  235,  263,  203,  264,  239,  238,  239,  204,  274,
      275,  324,  235,  374,  283,  300,  203,  238,  239,  199,
      324,  204,  199,  263,  642,  264,  640,  327,  638,  374,
      274,  275,  330,  235,  283,  300,  327,  203,  238,  239,
      199,  330,  204,  199,  207,  228,  122,  229,  122,  125,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,

      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  131,  215,  134,  134,
      134,  216,  221,  301,  231,  246,  272,  279,  304,  329,
      637,  305,  331,  215,  317,  318,  329,  216,  332,  331,
      333,  334,  337,  301,  338,  332,  215,  375,  304,  221,
      216,  305,  221,  272,  317,  318,  380,  393,  380,  382,
      333,  334,  337,  375,  338,  380,  393,  215,  246,  246,
      221,  216,  279,  221,  272,  382,  131,  231,  131,  134,

      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  140,  227,  142,  158,
      142,  158,  189,  190,  189,  190,  198,  200,  198,  200,
      201,  213,  189,  190,  211,  212,  211,  212,  220,  220,
      220,  232,  505,  232,  234,  237,  249,  249,  249,  268,

      306,  232,  256,  234,  260,  260,  260,  271,  271,  271,
      636,  439,  250,  302,  267,  302,  383,  278,  635,  227,
      227,  281,  439,  302,  320,  307,  140,  326,  140,  142,
      158,  261,  383,  631,  190,  189,  326,  198,  200,  250,
      339,  201,  213,  250,  505,  211,  212,  306,  237,  220,
      341,  344,  232,  268,  256,  256,  234,  249,  261,  308,
      250,  309,  261,  307,  250,  260,  267,  267,  271,  278,
      278,  320,  314,  281,  281,  308,  302,  309,  313,  261,
      313,  336,  315,  261,  321,  342,  335,  313,  314,  326,
      343,  322,  322,  322,  340,  308,  339,  309,  315,  345,

      322,  346,  347,  348,  341,  342,  349,  344,  314,  350,
      343,  351,  352,  353,  372,  308,  373,  309,  315,  336,
      387,  388,  347,  348,  390,  389,  313,  404,  314,  408,
      410,  321,  313,  335,  391,  391,  391,  321,  315,  322,
      395,  340,  396,  391,  405,  322,  345,  409,  398,  395,
      399,  396,  413,  372,  401,  346,  350,  398,  373,  399,
      353,  352,  349,  401,  415,  418,  404,  351,  387,  419,
      414,  390,  388,  389,  422,  420,  434,  408,  409,  421,
      424,  429,  441,  429,  442,  410,  405,  435,  443,  450,
      429,  444,  451,  452,  447,  448,  449,  453,  409,  409,

      413,  414,  395,  447,  448,  449,  456,  454,  457,  458,
      398,  460,  461,  418,  463,  464,  401,  479,  486,  415,
      419,  414,  414,  420,  421,  422,  472,  435,  472,  434,
      422,  478,  451,  442,  424,  472,  488,  443,  490,  444,
      478,  492,  450,  489,  441,  455,  455,  455,  459,  459,
      459,  453,  489,  493,  455,  452,  454,  459,  458,  497,
      498,  461,  457,  502,  626,  506,  508,  481,  456,  481,
      479,  508,  463,  460,  464,  518,  481,  487,  487,  487,
      486,  494,  494,  494,  518,  488,  487,  499,  499,  499,
      494,  490,  519,  519,  519,  492,  499,  520,  521,  523,

      521,  523,  519,  529,  529,  529,  520,  521,  523,  531,
      531,  531,  529,  497,  532,  493,  506,  533,  531,  534,
      537,  543,  498,  532,  550,  502,  533,  551,  534,  558,
      564,  558,  563,  563,  563,  565,  578,  589,  558,  564,
      579,  567,  563,  567,  565,  578,  566,  566,  566,  579,
      567,  576,  576,  576,  580,  519,  566,  590,  602,  591,
      576,  591,  595,  580,  595,  615,  633,  602,  591,  606,
      625,  595,  601,  601,  601,  537,  543,  608,  606,  533,
      609,  550,  601,  616,  551,  616,  608,  627,  628,  609,
      624,  630,  616,  639,  622,  563,  627,  628,  621,  589,

      630,  641,  639,  590,  620,  618,  641,  614,  612,  566,
      610,  604,  603,  600,  599,  615,  580,  598,  597,  594,
      593,  592,  587,  585,  584,  582,  581,  577,  633,  574,
      572,  571,  569,  562,  561,  601,  560,  557,  555,  608,
      554,  553,  552,  549,  547,  545,  544,  541,  539,  538,
      535,  530,  528,  630,  661,  661,  662,  662,  662,  662,
      662,  662,  663,  663,  663,  663,  663,  663,  664,  664,
      665,  665,  526,  665,  665,  665,  666,  525,  666,  666,
      667,  667,  667,  668,  524,  668,  668,  669,  669,  669,
      670,  670,  670,  670,  670,  670,  671,  671,  517,  671,

      671,  671,  672,  672,  672,  672,  672,  672,  673,  673,
      673,  673,  673,  673,  674,  674,  674,  674,  674,  674,
      675,  675,  675,  675,  675,  675,  676,  676,  676,  676,
      676,  676,  677,  677,  677,  677,  677,  677,  678,  678,
      678,  678,  678,  678,  679,  679,  679,  679,  679,  679,
      680,  680,  680,  680,  680,  680,  681,  681,  681,  681,
      681,  681,  682,  682,  682,  682,  682,  682,  683,  683,
      683,  683,  683,  683,  684,  684,  684,  684,  684,  684,
      685,  685,  685,  685,  685,  685,  686,  686,  686,  686,
      686,  686,  687,  687,  687,  687,  687,  687,  688,  688,

      688,  688,  688,  688,  689,  689,  689,  689,  689,  689,
      690,  690,  690,  690,  690,  690,  691,  691,  691,  691,
      691,  691,  692,  692,  692,  692,  692,  692,  693,  693,
      693,  693,  693,  693,  694,  694,  694,  694,  694,  694,
      695,  695,  695,  695,  695,  695,  696,  696,  696,  696,
      696,  696,  697,  697,  697,  697,  697,  697,  698,  698,
      698,  698,  698,  698,  699,  699,  699,  699,  699,  699,
      700,  700,  700,  700,  700,  700,  701,  701,  701,  701,
      701,  701,  702,  702,  702,  702,  702,  702,  703,  703,
      703,  703,  703,  703,  704,  704,  704,  704,  704,  704,

      705,  705,  705,  705,  705,  705,  706,  706,  706,  706,
      706,  706,  707,  707,  707,  707,  707,  707,  516,  515,
      514,  513,  512,  511,  509,  507,  503,  501,  500,  496,
      495,  491,  485,  484,  483,  482,  480,  477,  476,  475,
      474,  471,  470,  469,  468,  466,  465,  462,  445,  440,
      438,  437,  436,  433,  432,  431,  430,  428,  427,  426,
      425,  423,  392,  384,  379,  378,  377,  376,  369,  365,
      364,  363,  362,  361,  360,  359,  358,  357,  356,  316,
      312,  310,  299,  298,  297,  296,  294,  293,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  277,  276,  269,

      266,  265,  258,  255,  254,  247,  245,  244,  230,  226,
      225,  218,  217,  210,  208,  196,  195,  188,  166,  164,
      157,  155,  154,  153,  152,  149,  138,  136,  133,  129,
      127,  124,  120,  118,  115,  111,  107,  105,  101,   99,
       96,   69,   67,   65,   62,   60,   56,   53,   52,   51,
       39,   38,   35,   29,   23,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,

      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  660
    } ;

static yyconst flex_int16_t yy_rule_linenum[98] =
    {   0,
       85,   86,   87,   88,   92,   93,   94,   95,   96,   98,
       99,  101,  110,  111,  137,  174,  189,  195,  202,  208,
      213,  218,  224,  248,  255,  257,  275,  281,  286,  291,
      296,  306,  314,  322,  331,  356,  376,  377,  378,  379,
      381,  386,  401,  403,  405,  462,  463,  466,  468,  475,
      476,  477,  478,  479,  480,  481,  482,  483,  484,  485,
      486,  487,  488,  489,  490,  491,  492,  493,  494,  495,
      496,  497,  498,  499,  500,  501,  502,  503,  504,  505,
      506,  507,  508,  509,  510,  511,  516,  521,  530,  532,
      534,  536,  537,  547,  550,  551,  553

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "aprepro.ll"
/* -*- Mode: c++ -*- */
#line 3 "aprepro.ll"

#include <fstream>
#include <iostream>
#include <sstream>
#include <stack>
#include <stdio.h>
#include <string.h>
#include <fcntl.h> 

#include "apr_scanner.h"
#include "aprepro.h"
#include "apr_util.h"

#define YY_NO_UNISTD_H
/* import the parser's token type into a local typedef */
typedef SEAMS::Parser::token token;
typedef SEAMS::Parser::token_type token_type;

/* By default yylex returns int, we use token_type. Unfortunately yyterminate
 * by default returns 0, which is not of token_type. */
#define yyterminate() return token::END

#define show(x)   printf("<%s>", x);
 namespace SEAMS {
   extern int echo;
   extern char *get_temp_filename(void);
   extern char *pathopen(const char *file);
   extern void  conv_string(const char *string);
   void yyerror(const char *s);
 }
 
int ifdef;
int file_must_exist = 0; /* Global used by include/conditional include */

/* Global variables used by the looping mechanism */
int loop_lvl = 0;
std::fstream *tmp_file;
char  *temp_f;

#define MAX_IF_NESTING 64

 int if_state[MAX_IF_NESTING] = {0}; // INITIAL
 int if_case_run[MAX_IF_NESTING] = {false}; /* Has any if or elseif condition executed */
 int if_lvl = 0;
 int if_skip_level = 0;
bool suppress_nl = false;
 bool switch_active = false;   // Are we in a switch
 bool switch_case_run = false; // has there been a case which matched condition run?
 bool switch_skip_to_endcase = false;
 double switch_condition = 0.0; // Value specified in "switch(condition)"
 
/*** Flex Declarations and Options ***/
/* enable c++ scanner class generation */
/* change the name of the scanner class. results in "SEAMSFlexLexer" */
/* enable scanner to generate debug output. disable this for release
 * versions. */
/* enables the use of start condition stacks */

#line 1320 "apr_scanner.cc"

#define INITIAL 0
#define PARSING 1
#define GET_FILENAME 2
#define IF_SKIP 3
#define GET_VAR 4
#define VERBATIM 5
#define IF_WHILE_SKIP 6
#define GET_LOOP_VAR 7
#define LOOP 8
#define LOOP_SKIP 9
#define END_CASE_SKIP 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 83 "aprepro.ll"

#line 1489 "apr_scanner.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 661 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2356 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 98 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 98 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 99 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 85 "aprepro.ll"
{ BEGIN(INITIAL);   }
	YY_BREAK
case 2:
#line 87 "aprepro.ll"
case 3:
YY_RULE_SETUP
#line 87 "aprepro.ll"
{ if (echo) ECHO; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 88 "aprepro.ll"
{ if (echo) ECHO; aprepro.ap_file_list.top().lineno++;   }
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 92 "aprepro.ll"
{ BEGIN(VERBATIM);  }
	YY_BREAK
case 6:
#line 94 "aprepro.ll"
case 7:
YY_RULE_SETUP
#line 94 "aprepro.ll"
{ echo = true;	}
	YY_BREAK
case 8:
#line 96 "aprepro.ll"
case 9:
YY_RULE_SETUP
#line 96 "aprepro.ll"
{ echo = false;	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 98 "aprepro.ll"
{ aprepro.stateImmutable = true;	}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 99 "aprepro.ll"
{ aprepro.stateImmutable = aprepro.ap_options.immutable; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 101 "aprepro.ll"
{
    BEGIN(GET_LOOP_VAR);
    if (aprepro.ap_options.debugging) 
      std::cerr << "DEBUG LOOP - Found loop begin test " << yytext << " in file "
		<< aprepro.ap_file_list.top().name << "\n";
  }
	YY_BREAK


case 13:
/* rule 13 can match eol */
#line 111 "aprepro.ll"
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 111 "aprepro.ll"
{
    /* Loop control defined by integer */
    char *pt = strchr(yytext, ')');
    *pt = '\0';
    sscanf (yytext, "%lf", &yylval->val);

    if (yylval->val <= 0) {
      BEGIN(LOOP_SKIP);
    }
    else {/* Value defined and != 0. */
      temp_f = get_temp_filename();
      SEAMS::file_rec new_file(temp_f, 0, true, (int)yylval->val);
      aprepro.ap_file_list.push(new_file);

      if (aprepro.ap_options.debugging) 
	std::cerr << "DEBUG LOOP VAR = " << aprepro.ap_file_list.top().loop_count
		  << " in file " << aprepro.ap_file_list.top().name
		  << " at line " << aprepro.ap_file_list.top().lineno << "\n";

      tmp_file = new std::fstream(temp_f, std::ios::out);
      loop_lvl++;
      BEGIN(LOOP);
    }
    aprepro.ap_file_list.top().lineno++;
  }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 137 "aprepro.ll"
{
    /* Loop control defined by variable */
    symrec *s;
    char *pt = strchr(yytext, ')');
    *pt = '\0';
    if (!check_valid_var(yytext)) {
      std::cerr << "Aprepro: WARN: Invalid variable name syntax '"
		<< yytext << "' (" << aprepro.ap_file_list.top().name
		<< ", line " << aprepro.ap_file_list.top().lineno
		<< ")\n";
      BEGIN(LOOP_SKIP);
    } else {
      s = aprepro.getsym(yytext);

      if (s == 0 || (s->type != token::SVAR && s->type != token::IMMSVAR && s->value.var == 0.)) {
	BEGIN(LOOP_SKIP);
      }
      else { /* Value defined and != 0. */
	temp_f = get_temp_filename();
	SEAMS::file_rec new_file(temp_f, 0, true, (int)s->value.var);
	aprepro.ap_file_list.push(new_file);
				
	if (aprepro.ap_options.debugging) 
	  std::cerr << "DEBUG LOOP VAR = " << aprepro.ap_file_list.top().loop_count
		    << " in file " << aprepro.ap_file_list.top().name
		    << " at line " << aprepro.ap_file_list.top().lineno << "\n";

	tmp_file = new std::fstream(temp_f, std::ios::out);
	loop_lvl++;
	BEGIN(LOOP);
      }
    }
    aprepro.ap_file_list.top().lineno++;
  }
	YY_BREAK


case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 174 "aprepro.ll"
{
    aprepro.ap_file_list.top().lineno++;
    if (--loop_lvl == 0) {
      BEGIN(INITIAL);
      tmp_file->close();
      delete tmp_file;
				     
      yyin = aprepro.open_file(aprepro.ap_file_list.top().name, "r");
      yyFlexLexer::yypush_buffer_state (yyFlexLexer::yy_create_buffer( yyin, YY_BUF_SIZE));
    }
    else {
      (*tmp_file) << yytext;
    }
  }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 189 "aprepro.ll"
{
    loop_lvl++; /* Nested Loop */
    (*tmp_file) << yytext;
    aprepro.ap_file_list.top().lineno++;
  }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 195 "aprepro.ll"
{
    (*tmp_file) << yytext;
    aprepro.ap_file_list.top().lineno++;
  }
	YY_BREAK


case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 202 "aprepro.ll"
{
    aprepro.ap_file_list.top().lineno++;
    if (--loop_lvl == 0)
      BEGIN(INITIAL);
  }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 208 "aprepro.ll"
{
    loop_lvl++; /* Nested Loop */
    aprepro.ap_file_list.top().lineno++;
  }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 213 "aprepro.ll"
{
    aprepro.ap_file_list.top().lineno++;
  }
	YY_BREAK

case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 218 "aprepro.ll"
{
  yyless(0);
  BEGIN(INITIAL);
  switch_skip_to_endcase = false;
}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 224 "aprepro.ll"
{
 aprepro.ap_file_list.top().lineno++;
 if (!switch_active) {
    yyerror("default statement found outside switch statement.");
  }

  if (!switch_case_run) {
    switch_case_run = true;
    BEGIN(INITIAL);
    switch_skip_to_endcase = false;
    if (aprepro.ap_options.debugging) 
      fprintf (stderr, "DEBUG SWITCH: 'default' code executing at line %d\n",
	       aprepro.ap_file_list.top().lineno);
  } 
  else {
    if (aprepro.ap_options.debugging) 
      fprintf (stderr, "DEBUG SWITCH: 'default' not executing since a previous case already ran at line %d\n",
	       aprepro.ap_file_list.top().lineno);
    
    /* Need to skip all code until end of case */
    BEGIN(END_CASE_SKIP);
  }
}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 248 "aprepro.ll"
{
  aprepro.ap_file_list.top().lineno++;
  BEGIN(INITIAL);
  switch_active = false;
  switch_skip_to_endcase = false;
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 255 "aprepro.ll"
{  aprepro.ap_file_list.top().lineno++; }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 257 "aprepro.ll"
{
  aprepro.ap_file_list.top().lineno++;
  if (!switch_active) {
    yyerror("endswitch statement found without matching switch.");
  }
  switch_active = false;
}
	YY_BREAK

/* If an if was found while skipping, then eat
   * that entire if block until endif
   * found since there is no way that
   * any of the code in that if block could be executed.
   * Make sure to handle multiple levels of skipped ifs...
   *
   * NOTE: if_lvl was not incremented, so don't need to decrement when
   *       endif found.
   */
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 275 "aprepro.ll"
{ 
    aprepro.ap_file_list.top().lineno++;  
    if (--if_skip_level == 0)
      BEGIN(IF_SKIP);
  }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 281 "aprepro.ll"
{ 
    aprepro.ap_file_list.top().lineno++;  
    if_skip_level++;
  }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 286 "aprepro.ll"
{ 
    aprepro.ap_file_list.top().lineno++;  
    if_skip_level++;
  }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 291 "aprepro.ll"
{
    aprepro.ap_file_list.top().lineno++;  
    if_skip_level++;
  }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 296 "aprepro.ll"
{
    aprepro.ap_file_list.top().lineno++;
  }
	YY_BREAK


/* IF an if, ifdef, or ifndef found while skipping, then
   * skip the entire block up and including the endif.
   * The (IF_WHILE_SKIP) start condition handles this skipping.
   */
case 32:
YY_RULE_SETUP
#line 306 "aprepro.ll"
{ 
    if (aprepro.ap_options.debugging) 
      fprintf (stderr, "DEBUG IF: 'ifdef'  found while skipping at line %d\n",
	       aprepro.ap_file_list.top().lineno);
    if_skip_level = 1;
    BEGIN(IF_WHILE_SKIP);
  }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 314 "aprepro.ll"
{ 
    if (aprepro.ap_options.debugging) 
      fprintf (stderr, "DEBUG IF: 'ifdef'  found while skipping at line %d\n",
	       aprepro.ap_file_list.top().lineno);
    if_skip_level = 1;
    BEGIN(IF_WHILE_SKIP);
  }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 322 "aprepro.ll"
{
    if (aprepro.ap_options.debugging) 
      fprintf (stderr, "DEBUG IF: 'ifndef'  found while skipping at line %d\n",
	       aprepro.ap_file_list.top().lineno);
    if_skip_level = 1;
    BEGIN(IF_WHILE_SKIP);
  }
	YY_BREAK

case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 331 "aprepro.ll"
{ 
  aprepro.ap_file_list.top().lineno++; 
  if (aprepro.ap_options.debugging) 
    fprintf (stderr, "DEBUG IF: 'else'   at level = %d at line %d\n",
	     if_lvl, aprepro.ap_file_list.top().lineno);
  if (if_state[if_lvl] == IF_SKIP) {
    if (!if_case_run[if_lvl]) {
      BEGIN(INITIAL);
      if_state[if_lvl] = INITIAL;
      if_case_run[if_lvl] = true;
    } else {
      BEGIN(IF_SKIP);
      if_state[if_lvl] = IF_SKIP;
    }
  }
  else if (if_state[if_lvl] == INITIAL) {
    BEGIN(IF_SKIP);
    if_state[if_lvl] = IF_SKIP;
  }
  
  /* If neither is true, this is a nested 
     if that should be skipped */
}
	YY_BREAK

case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 356 "aprepro.ll"
{ 
    /* If any previous 'block' of this if has executed, then
     * just skip this block; otherwise see if condition is
     * true and execute this block
     */
    if (aprepro.ap_options.debugging) 
      fprintf (stderr, "DEBUG IF: 'elseif'   at level = %d at line %d\n",
	       if_lvl, aprepro.ap_file_list.top().lineno);

    if (if_case_run[if_lvl]) { /* A previous else/elseif has run */
      aprepro.ap_file_list.top().lineno++; 
      /* Already in IF_SKIP, so don't need to change state */
    } else {
      /* Need to check the elseif condition; push back and parse */
      yyless(0);
      BEGIN(INITIAL);
      if_state[if_lvl] = INITIAL;
    }
  }
	YY_BREAK
case 37:
#line 377 "aprepro.ll"
case 38:
#line 378 "aprepro.ll"
case 39:
#line 379 "aprepro.ll"
case 40:
YY_RULE_SETUP
#line 379 "aprepro.ll"
{ ; }
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 381 "aprepro.ll"
{
     aprepro.ap_file_list.top().lineno++;
   }
	YY_BREAK

case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 386 "aprepro.ll"
{ if (if_state[if_lvl] == IF_SKIP ||
			       if_state[if_lvl] == INITIAL)
			     BEGIN(INITIAL);
			   /* If neither is true, this is a nested 
			      if that should be skipped */
    if (aprepro.ap_options.debugging) 
	printf ("DEBUG IF: 'endif'  at level = %d at line %d\n",
		if_lvl, aprepro.ap_file_list.top().lineno);
			   if (--if_lvl < 0) {
			     if_lvl = 0;
			     yyerror("Improperly Nested ifdef/ifndef statements");
			   }
			   aprepro.ap_file_list.top().lineno++;  
			   /* Ignore endif if not skipping */ }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 401 "aprepro.ll"
{ BEGIN(GET_FILENAME); 
                             file_must_exist = true; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 403 "aprepro.ll"
{ BEGIN(GET_FILENAME);
                             file_must_exist = !true; }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 405 "aprepro.ll"
{ BEGIN(INITIAL); 
			     {
			       symrec *s;
			       int quoted = false;
			       std::fstream *yytmp;
			       char *pt = strchr(yytext, ')');
			       *pt = '\0';
			       /* Check to see if surrounded by double quote */ 
			       if ((pt = strchr(yytext, '"')) != NULL) {
				 yytext++;
				 quoted = true;
			       }
			       if ((pt = strrchr(yytext, '"')) != NULL) {
				 *pt = '\0';
				 quoted = true;
			       }

			       if (quoted == false) {
				 /* See if this is an aprepro variable referring to a name */
				 s = aprepro.getsym(yytext);
				 if (s == 0 || (s->type != token::SVAR && s->type != token::IMMSVAR)) {
				   pt = yytext;
				 } else {
				   pt = (char*)s->value.svar;
				 }
			       } else {
				 pt = yytext;
			       }
			       
			       if (file_must_exist)
				 yytmp = aprepro.open_file(pt, "r");
			       else
				 yytmp = aprepro.check_open_file(pt, "r");
			       if (yytmp != NULL) {
				 yyin = yytmp;
				 if (aprepro.ap_options.info_msg == true) {
				   std::cerr << "Aprepro: INFO: Included File: '"
					     << pt << "' (" << aprepro.ap_file_list.top().name
					     << ", line " << aprepro.ap_file_list.top().lineno
					     << ")\n";
				 }
				 SEAMS::file_rec new_file(pt, 0, false, 0);
				 aprepro.ap_file_list.push(new_file);

				 yyFlexLexer::yypush_buffer_state (
				    yyFlexLexer::yy_create_buffer( yyin, YY_BUF_SIZE));
			       } else {
				 if (aprepro.ap_options.warning_msg == true) {
				   std::cerr << "Aprepro: WARN: Can't open '"
					     << yytext << "'\n";
				 }
			       }
			       aprepro.ap_file_list.top().lineno++;
			     }
			   }
	YY_BREAK
case 46:
#line 463 "aprepro.ll"
case 47:
YY_RULE_SETUP
#line 463 "aprepro.ll"
{ sscanf (yytext, "%lf", &yylval->val);
                             return(token::NUM); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 466 "aprepro.ll"
; /* Empty Rule */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 468 "aprepro.ll"
{ symrec *s;
			     s = aprepro.getsym(yytext);
			     if (s == 0)
			       s = aprepro.putsym (yytext, SEAMS::Aprepro::UNDEFINED_VARIABLE, 0);
			     yylval->tptr = s;
			     return((token::yytokentype)s->type);
			   }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 475 "aprepro.ll"
return(token::EQUAL);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 476 "aprepro.ll"
return(token::EQ_PLUS);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 477 "aprepro.ll"
return(token::EQ_MINUS);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 478 "aprepro.ll"
return(token::EQ_TIME);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 479 "aprepro.ll"
return(token::EQ_DIV);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 480 "aprepro.ll"
return(token::EQ_POW);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 481 "aprepro.ll"
return(token::EQ_POW);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 482 "aprepro.ll"
return(token::INC);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 483 "aprepro.ll"
return(token::DEC);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 484 "aprepro.ll"
return(token::PLU);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 485 "aprepro.ll"
return(token::SUB);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 486 "aprepro.ll"
return(token::TIM);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 487 "aprepro.ll"
return(token::TIM);		/* ~ is same as multiply */
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 488 "aprepro.ll"
return(token::CONCAT);	/* String concatenation */
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 489 "aprepro.ll"
return(token::DIV);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 490 "aprepro.ll"
return(token::MOD);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 491 "aprepro.ll"
return(token::POW);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 492 "aprepro.ll"
return(token::POW);
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 493 "aprepro.ll"
aprepro.ap_file_list.top().lineno++;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 494 "aprepro.ll"
return(token::LPAR);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 495 "aprepro.ll"
return(token::RPAR);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 496 "aprepro.ll"
return(token::COMMA);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 497 "aprepro.ll"
return(token::SEMI);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 498 "aprepro.ll"
return(token::COLON);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 499 "aprepro.ll"
return(token::QUEST);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 500 "aprepro.ll"
return(token::LT);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 501 "aprepro.ll"
return(token::GT);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 502 "aprepro.ll"
return(token::LE);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 503 "aprepro.ll"
return(token::GE);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 504 "aprepro.ll"
return(token::EQ);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 505 "aprepro.ll"
return(token::NE);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 506 "aprepro.ll"
return(token::LAND);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 507 "aprepro.ll"
return(token::LOR);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 508 "aprepro.ll"
return(token::NOT);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 509 "aprepro.ll"
return(token::LBRACK);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 510 "aprepro.ll"
return(token::RBRACK);
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 511 "aprepro.ll"
{ char *pt = strrchr(yytext, '"');
			     *pt = '\0';
                             new_string(yytext+1, &yylval->string);
			     return token::QSTRING; }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 516 "aprepro.ll"
{ char *pt = strrchr(yytext, '\'');
			     *pt = '\0';
                             new_string(yytext+1, &yylval->string);
			     return token::QSTRING; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 521 "aprepro.ll"
{
  if (switch_skip_to_endcase)
    BEGIN(END_CASE_SKIP);
  else
    BEGIN(if_state[if_lvl]);
  return(token::RBRACE);
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 530 "aprepro.ll"
{ if (echo) LexerOutput("{", 1); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 532 "aprepro.ll"
{ if (echo) LexerOutput("}", 1); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 534 "aprepro.ll"
{ BEGIN(PARSING); return(token::LBRACE);  }
	YY_BREAK
case 92:
#line 537 "aprepro.ll"
case 93:
YY_RULE_SETUP
#line 537 "aprepro.ll"
{ if (aprepro.ap_options.end_on_exit)
			       {
				 if (echo) ECHO;
				 return((token::yytokentype)-1);  
			       }
                              else 
                               if (echo) ECHO;
			   }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 547 "aprepro.ll"
{ if (echo) ECHO; }
	YY_BREAK
case 95:
#line 551 "aprepro.ll"
case 96:
YY_RULE_SETUP
#line 551 "aprepro.ll"
{ if (echo) ECHO; }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 553 "aprepro.ll"
{ if (echo && !suppress_nl) ECHO; suppress_nl = false; 
                             aprepro.ap_file_list.top().lineno++; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 556 "aprepro.ll"
ECHO;
	YY_BREAK
#line 2418 "apr_scanner.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PARSING):
case YY_STATE_EOF(GET_FILENAME):
case YY_STATE_EOF(IF_SKIP):
case YY_STATE_EOF(GET_VAR):
case YY_STATE_EOF(VERBATIM):
case YY_STATE_EOF(IF_WHILE_SKIP):
case YY_STATE_EOF(GET_LOOP_VAR):
case YY_STATE_EOF(LOOP):
case YY_STATE_EOF(LOOP_SKIP):
case YY_STATE_EOF(END_CASE_SKIP):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	SEAMSfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	SEAMSfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					SEAMSrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) SEAMSrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 661 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 661 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 660);

		return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) SEAMSalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) SEAMSalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		SEAMSfree((void *) b->yy_ch_buf  );

	SEAMSfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)SEAMSalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)SEAMSrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) SEAMSalloc(new_size  );

		else
			(yy_start_stack) = (int *) SEAMSrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *SEAMSalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *SEAMSrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void SEAMSfree (void * ptr )
{
	free( (char *) ptr );	/* see SEAMSrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 556 "aprepro.ll"



/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

namespace SEAMS {

  Scanner::Scanner(Aprepro& aprepro_yyarg,
		   std::istream* in,
		   std::ostream* out)
    : SEAMSFlexLexer(in, out), aprepro(aprepro_yyarg)
  {
    aprepro.outputStream.push(out);
  }

  Scanner::~Scanner()
  { }

  void Scanner::LexerOutput(const char* buf, int size )
  {
    aprepro.outputStream.top()->write( buf, size );
    if (aprepro.ap_options.interactive && aprepro.outputStream.size() == 1) {
      // In interactive mode, output to stdout in addition to the
      // output stream, unless user has redirected output...
      std::cout << buf;
    }
  }

  int Scanner::yywrap()
  {
    if (aprepro.ap_file_list.size() <= 1) {		/* End of main file, not in nested include */
      return (1);
    }
    else {
      /* We are in an included or looping file */
      if (aprepro.ap_file_list.top().tmp_file) {
	if (aprepro.ap_options.debugging)
	  std::cerr << "DEBUG LOOP: Loop count = " << aprepro.ap_file_list.top().loop_count << "\n";
	if (--aprepro.ap_file_list.top().loop_count <= 0)  {
	  if (strcmp("_string_", aprepro.ap_file_list.top().name.c_str()) != 0) {
	    if (!aprepro.ap_options.debugging)
	      remove(aprepro.ap_file_list.top().name.c_str());	/* Delete file if temporary */
	  }
	  delete yyin;
	  aprepro.ap_file_list.pop(); 
	  yyFlexLexer::yypop_buffer_state();
	}
	else {
	  // Do not pop ap_file_list; we are rereading that file...
	  delete yyin;
	  yyFlexLexer::yypop_buffer_state();
	  yyin = aprepro.open_file(aprepro.ap_file_list.top().name, "r");
	  yyFlexLexer::yypush_buffer_state (yyFlexLexer::yy_create_buffer(yyin, YY_BUF_SIZE));
	  aprepro.ap_file_list.top().lineno = 0;
	}
      }
      else {
	delete yyin;
	yyFlexLexer::yypop_buffer_state();
	aprepro.ap_file_list.pop();
	/* Turn echoing back on at end of included files. */
	echo = true;
	/* Set immutable mode back to global immutable 
	 * state at end of included file
	 */
	aprepro.stateImmutable = aprepro.ap_options.immutable;	
      }
      return (0);
    }
  }

  /* Print error message to standard error and return.  Note: internally
   *   'lineno' starts at zero.  To avoid confusion, we add 1 to value
   *   when it is output.
   */

  void Scanner::yyerror (const char *s)
  {
    std::cerr << "Aprepro: ERROR:  " << s << " ("
	      << aprepro.ap_file_list.top().name<< ", line "
	      << aprepro.ap_file_list.top().lineno + 1 << ")\n";
  }

  char *Scanner::execute (char string[])
  {
    /* Push the contents of 'string' onto the stack to be reread.
     * 'string' will be surrounded by {} so it must be a valid expression.
     */

    /*
     * NOTE: The closing } has not yet been scanned in the call to execute();
     *       therefore, we read it ourselves using input(), then we push:
     *       '}{' + our string + '}' 
     */
    int i;
    while ((i = yyFlexLexer::yyinput ()) != '}' && i != EOF)
      ;				/* eat up values */

    /* Allocate space for string + '}' + '{' + end_of_string */
    std::string new_string;
    new_string += "}{";
    new_string += string;
    new_string += "}";

    aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));
  
    std::istringstream *ins = new std::istringstream(new_string); // Declare an input string stream.
    yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    return (NULL);
  }

  /* Push the contents of 'string' onto the stack to be reread.
   * 'string' will not be surrounded by {}.
   */

  char *Scanner::rescan (char *string)
  {
    int i;
    /*
     * NOTE: The closing } has not yet been scanned in the call to rescan();
     *       therefore, we read it ourselves using input(), then we push our
     *       string and then put the closing } back on the stack last
     *       (to be read first),
     */
    while ((i = yyFlexLexer::yyinput ()) != '}' && i != EOF)
      ;				/* eat up values */
    {
      aprepro.ap_file_list.push(SEAMS::file_rec("_string_", 0, true, -1));
      std::string new_string("}");
      new_string += string;

      std::istringstream *ins = new std::istringstream(new_string); // Declare an input string stream.
      yyFlexLexer::yypush_buffer_state(yyFlexLexer::yy_create_buffer(ins, new_string.size()));
    }
    return (NULL);
  }

  char *Scanner::if_handler(double x)
  {
    if_lvl++;
    if (if_lvl >= MAX_IF_NESTING)
      yyerror("Too many nested if statements");

    if (x == 0) {
      if_state[if_lvl] = IF_SKIP;
      if_case_run[if_lvl] = false;
    } else {
      suppress_nl = true;
      if_state[if_lvl] = INITIAL;
      if_case_run[if_lvl] = true;
    }
    if (aprepro.ap_options.debugging) 
      std::cerr << "DEBUG IF: If level " << if_lvl << " " << if_state[if_lvl] << "\n"; 
    return(NULL);
  }

  char *Scanner::elseif_handler(double x)
  {
    if (x == 0 || if_case_run[if_lvl]) {
      if_state[if_lvl] = IF_SKIP;
    } else {
      suppress_nl = 1;
      if_state[if_lvl] = INITIAL;
      if_case_run[if_lvl] = true;
    }
    if (aprepro.ap_options.debugging) 
      std::cerr << "DEBUG IF: elseif at level " << if_lvl << " " << if_state[if_lvl] << "\n";
    return(NULL);
  }

  char *Scanner::switch_handler(double x)
  {
    // save that we are in a switch statement
    // save the value of 'x' for use in deciding which case to execute
    if (switch_active) {
      yyerror("switch statement found while switch already active. Nested switch not supported.");
    }

    switch_active = true;
    switch_case_run = false;
    switch_condition = x;
    switch_skip_to_endcase = true; /* Skip everything until first case */
    suppress_nl = true;

    if (aprepro.ap_options.debugging) {
      std::cerr << "DEBUG SWITCH: 'switch' with condition = " << switch_condition
		<< " at line " << aprepro.ap_file_list.top().lineno << "\n";
    }
    return(NULL);
  }

  char *Scanner::case_handler(double x)
  {
    // make sure we are in a switch statement 
    // if 'x' matches the value saved in the switch statement 
    // and no other case has been executed, then
    // execute the code in the case and set a flag indicating
    // the switch has run;
    // if 'x' does not match the value saved, then skip to endcase
    suppress_nl = true;

    if (!switch_active) {
      yyerror("case statement found outside switch statement.");
    }

    if (!switch_case_run && x == switch_condition) {
      switch_case_run = true;
      if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG SWITCH: 'case' condition = %g matches switch condition = %g at line %d\n",
		 x, switch_condition, aprepro.ap_file_list.top().lineno);
    } 
    else {
      if (aprepro.ap_options.debugging) 
	fprintf (stderr, "DEBUG SWITCH: 'case' condition = %g does not match switch condition = %g (or case already matched) at line %d\n",
		 x, switch_condition, aprepro.ap_file_list.top().lineno);

      // Need to skip all code until end of case
      switch_skip_to_endcase = true;
    }
    return(NULL);
  }
}

/* This implementation of ExampleFlexLexer::yylex() is required to fill the
 * vtable of the class ExampleFlexLexer. We define the scanner's main yylex
 * function via YY_DECL to reside in the Scanner class instead. */

#ifdef yylex
#undef yylex
#endif
int SEAMSFlexLexer::yylex()
{
    std::cerr << "in ExampleFlexLexer::yylex() !" << std::endl;
    return 0;
}

/* When the scanner receives an end-of-file indication from YY_INPUT, it then
 * checks the yywrap() function. If yywrap() returns false (zero), then it is
 * assumed that the function has gone ahead and set up `yyin' to point to
 * another input file, and scanning continues. If it returns true (non-zero),
 * then the scanner terminates, returning 0 to its caller. */

int SEAMSFlexLexer::yywrap()
{
    return 1;
}




