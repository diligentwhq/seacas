XCOMM ----------------------------------------------------------------------
XCOMM Makefile generated from IMAKE_TEMPLATE and INCLUDE_IMAKEFILE
XCOMM $XConsortium: Imake.tmpl /main/243 1996/11/13 14:42:56 lehors $
XCOMM

/*
 * generic imake template
 */

/*
 * Modify Imake.cf when adding a new architecture, do not modify this file.
 * Platform-specific parameters may be set in the appropriate <vendor>.cf
 * configuration files.  Site-specific parameters should be set in the file
 * site.def.  Full rebuilds are recommended if any parameters are changed.
 * If your C preprocessor does not define any unique symbols, you will need
 * to set BOOTSTRAPCFLAGS when rebuilding imake (usually when doing
 * "make World" the first time).
 */

#define ImakeConfigRelease 6

#define	YES	1
#define NO	0

/* Ensure that "all" is the default target in the Makefile. */
all::

.SUFFIXES: .i

#include <Imake.cf>

XCOMM -----------------------------------------------------------------------
XCOMM site-specific configuration parameters that need to come before
XCOMM the platform-specific parameters - edit site.def to change
#define BeforeVendorCF
#include <site.def>
#undef BeforeVendorCF

#if defined(HasGcc2) && !defined(HasGcc)
# define HasGcc HasGcc2
#endif

#ifndef HasMatlab
# define HasMatlab NO
#endif

#ifndef TflopFrontEnd
# define TflopFrontEnd NO
#endif

#ifndef HasClearmake
# define HasClearmake NO
#endif

/*
 * ClearmakeOSName - insert the current OS type into the clearmake
 * build script, so .o files from different platforms cannot be winked in.
 * If clearmake finds the build script for two .o files is the same, it
 * will share the .o, even across different architectures.  Inserting the
 * O/S name into the build script in a comment prevents unwanted sharing.
 * Note the trailing double-@ in the macro: end a line using this macro
 * with backslash without the double-@ usually used.
 * Like this:
 *
 * #define SomeRule() @@\
 *     something or other @@\
 *     ClearmakeOSName \
 *     something else @@\
 *     and more
 */
#ifndef ClearmakeOSName
# if HasClearmake
#  define ClearmakeOSName @ XCOMM $(OSNAME) @@
# else
#  define ClearmakeOSName /**/
# endif
#endif

#if HasClearmake
# ifndef MakeCmd
#  define MakeCmd clearmake
# endif
#endif

#if HasClearmake
XCOMM ----------------------------------------------------------------------
.c.o:
	ClearmakeOSName	$(CC) -c $(CFLAGS) $*.c
#endif

XCOMM ----------------------------------------------------------------------
XCOMM platform-specific configuration parameters - edit MacroFile to change
#include MacroIncludeFile

XCOMM ----------------------------------------------------------------------
XCOMM site-specific configuration parameters that go after
XCOMM the platform-specific parameters - edit site.def to change
#define AfterVendorCF
#include <site.def>
#undef AfterVendorCF

/*
 * defaults for various generic parameters; set in site.def if needed
 */

/* the following are needed before we can include Imake.rules */

#ifndef SystemV
#define SystemV			NO	/* SYSV (R3) */
#endif
#ifndef SystemV4
#define SystemV4		NO	/* SVR4 */
#endif
#ifndef HasCodeCenter
#define HasCodeCenter		NO
#endif
#ifndef HasSentinel
#define HasSentinel		NO
#endif
#ifndef HasPurify
#define HasPurify		NO
#endif
#ifndef HasTestCenter
#define HasTestCenter		NO
#endif
#ifndef RemoveTargetProgramByMoving
#define RemoveTargetProgramByMoving NO
#endif
#ifndef DoRanlibCmd
#if SystemV || SystemV4
#define DoRanlibCmd NO
#else
#define DoRanlibCmd YES
#endif
#endif
#ifndef ExecableScripts
#if SystemV
#define ExecableScripts		NO
#else
#define ExecableScripts		YES	/* kernel exec() can handle #! */
#endif
#endif
#ifndef NeedsFortranFlush
#define NeedsFortranFlush NO
#endif

#ifndef HasMakefileSafeInclude	    /* -include or sinclude in a Makefile */
#if HasClearmake
#define HasMakefileSafeInclude YES
#else
#define HasMakefileSafeInclude NO   /* see also vendor-specific .cf files */
#endif
#endif

#ifndef UseSfmakedepend
#define UseSfmakedepend NO
#endif

#include <Imake.rules>

#ifndef HasSharedLibraries
#define HasSharedLibraries NO
#endif
#ifndef OSMajorVersion
#define OSMajorVersion          0
#endif
#ifndef OSMinorVersion
#define OSMinorVersion          0
#endif
#ifndef CompilerMajorVersion
#define CompilerMajorVersion    0
#endif
#ifndef UnalignedReferencesAllowed
#define UnalignedReferencesAllowed NO	/* if arbitrary deref is okay */
#endif
#ifndef AvoidNullMakeCommand
#define AvoidNullMakeCommand NO
#endif
#if AvoidNullMakeCommand
#ifndef NullMakeCommand
#define NullMakeCommand		@ echo -n
#endif
/*
 * An obscure bug in BSD4.3's original make causes it not to recognize a
 * macro definition if the macro name starts with a non-alpha and in
 * column one.
 */
 _NULLCMD_ = NullMakeCommand
#endif

#ifndef NativeCC                /* C command used to build itools executables */
#define NativeCC  CcCmd         
#endif
#ifndef NativeF77               /* FORTRAN command used to build itools executables */
#define NativeF77  FortranCmd   
#endif
#ifndef CrossCC                 /* For cross compiling: C command used */
#define CrossCC  CcCmd          /* on the target machine               */
#endif
#ifndef CrossAccessRoot
#define CrossAccessRoot  /Net/projects/seacas/janus/current
#endif
#ifndef CrossAccessSrc
#define CrossAccessSrc  $(CROSSACCESSROOT)/ACCESS
#endif
#ifndef CrossAllDefines
#define CrossAllDefines  -I$(CROSSACCESSROOT)/inc -Dcouar -DADDC_ -Usun
#endif
#ifndef CrossLibPath
#define CrossLibPath  -L./ -L$(CROSSACCESSROOT)/lib
#endif
#ifndef CrossPlibPath
#define CrossPlibPath  -L./ -L$(CROSSACCESSROOT)/plib
#endif
#ifndef CrossLibDir
#define CrossLibDir  $(CROSSACCESSROOT)/lib
#endif
#ifndef CrossPlibDir
#define CrossPlibDir  $(CROSSACCESSROOT)/plib
#endif
#ifndef CrossProjectIncs
#define CrossProjectIncs  -I./ -I$(CROSSACCESSROOT)/inc
#endif
#ifndef BourneShell			/* to force shell in makefile */
#define BourneShell		/bin/sh
#endif
#ifndef ConstructMFLAGS
#if SystemV
#define ConstructMFLAGS		YES	/* build MFLAGS from MAKEFLAGS */
#else
#define ConstructMFLAGS		NO	/* build MFLAGS from MAKEFLAGS */
#endif
#endif

#ifndef ConstructMAKEFLAGS		/* needed on old BSD-based? */
#define ConstructMAKEFLAGS	NO	/* build MAKEFLAGS from MFLAGS */
#endif

#ifndef HasLargeTmp
#define HasLargeTmp		NO	/* be paranoid */
#endif

#ifndef HasBSD44Sockets
#define HasBSD44Sockets		NO
#endif
#ifndef HasSockets
#define HasSockets		YES
#endif
#ifndef HasStreams
#define HasStreams		!HasSockets
#endif
#ifndef HasDECnet
#define HasDECnet		NO
#endif
#ifndef HasPoll
#if SystemV || SystemV4
#define HasPoll			YES
#else
#define HasPoll			NO
#endif
#endif
#ifndef HasVFork
#if SystemV
#define HasVFork		NO	/* not yet... */
#else
#define HasVFork		YES
#endif
#endif
#ifndef HasPutenv
#define HasPutenv		NO	/* assume not */
#endif
#ifndef HasVoidSignalReturn
#define HasVoidSignalReturn	YES	/* assume yes */
#endif
#ifndef HasBsearch
#define HasBsearch		YES	/* assume yes */
#endif
#ifndef HasFortran
#define HasFortran		YES
#endif
#ifndef HasCplusplus
#if HasGcc2ForCplusplus
#define HasCplusplus		YES
#else
#define HasCplusplus		YES
#endif
#endif
#ifndef HasNdbm
#define HasNdbm			NO
#endif
#ifndef HasSecureRPC
#define HasSecureRPC		NO	/* if you have Secure RPC */
#endif
#ifndef HasKrb5
#define HasKrb5			NO      /* if you have Kerberos V5 */
#endif
#ifndef HasLatex
#define HasLatex		NO
#endif
#ifndef HasShm
#if SystemV || SystemV4
#define HasShm			YES
#else
#define HasShm			NO
#endif
#endif
#ifndef HasCbrt
#define HasCbrt			YES
#endif
#ifndef HasFfs
#define HasFfs			YES
#endif
#if HasKrb5
#ifndef Krb5Includes
#define Krb5Includes -I/krb5/include
#endif
#ifndef Krb5Libraries
#define Krb5Libraries -L/krb5/lib -L/usr/isode/lib -lkrb5 -lcrypto -lisode -lcom_err -ldbm
#endif
#else
#undef Krb5Includes
#define Krb5Includes /**/
#undef Krb5Libraries
#define Krb5Libraries /**/
#endif
#if HasMatlab
#ifndef MatlabLibraries
#define MatlabLibraries -lmat -lmx
#endif
#ifndef MatlabIncludes
#define MatlabIncludes /**/
#endif
#else
#undef  MatlabLibraries
#define MatlabLibraries /**/
#undef  MatlabIncludes
#define MatlabIncludes /**/
#endif

#ifndef StripInstalledPrograms
#define StripInstalledPrograms NO	/* leave symbol table just in case */
#endif
#ifndef UseCCMakeDepend			/* use slow cc -E script */
#define UseCCMakeDepend NO
#endif

/* DefaultUsrBin is independent of ProjectRoot.
   This is a directory where programs will be found even if PATH
   is not set, for example when coming in remotely via rsh. */
#ifndef DefaultUsrBin
#define	DefaultUsrBin /usr/bin
#endif

#ifndef DestDir
#define DestDir
#endif
#ifndef UsrLibDir
#ifdef ProjectRoot
#define UsrLibDir ProjectRoot/lib
#define UsrLibDirPath ProjectRoot/lib
#ifndef AlternateUsrLibDir
#define AlternateUsrLibDir YES
#endif
#else
#define UsrLibDir /usr/lib
#define UsrLibDirPath /usr/lib
#ifndef AlternateUsrLibDir
#define AlternateUsrLibDir NO
#endif
#endif
#else
#ifndef AlternateUsrLibDir
#define AlternateUsrLibDir YES
#endif
#endif
#ifndef ShLibDir
#define ShLibDir UsrLibDir/shared
#endif
#ifndef IncRoot
#ifdef ProjectRoot
#define IncRoot ProjectRoot/inc
#ifndef AlternateIncRoot
#define AlternateIncRoot YES
#endif
#else
#define IncRoot /usr/include
#ifndef AlternateIncRoot
#define AlternateIncRoot NO
#endif
#endif
#else
#ifndef AlternateIncRoot
#define AlternateIncRoot YES
#endif
#endif
#ifndef LintlibDir
#define LintlibDir $(USRLIBDIR)/lint
#endif
#ifndef SystemManDirectory
#if SystemV4
#define SystemManDirectory /usr/share/man
#else
#define SystemManDirectory /usr/man
#endif
#endif
#ifndef ManDirectoryRoot
#ifdef ProjectRoot
#define ManDirectoryRoot ProjectRoot/man
#else
#define ManDirectoryRoot SystemManDirectory
#endif
#endif
#ifndef ManPath
#define ManPath ManDirectoryRoot
#endif
#ifndef ManSourcePath
#define ManSourcePath $(MANPATH)/man
#endif
#ifndef ManDir
#define ManDir $(MANSOURCEPATH)$(MANSUFFIX)
#endif
#ifndef LibmanDir
#define LibmanDir $(MANSOURCEPATH)$(LIBMANSUFFIX)
#endif
#ifndef FileManDir
#define FileManDir $(MANSOURCEPATH)$(FILEMANSUFFIX)
#endif
#ifndef ConfigSrc
#define ConfigSrc $(TOP)/config
#endif
#ifndef DependDir
#if UseCCMakeDepend
#define DependDir $(CONFIGSRC)/util
#else
#define DependDir $(CONFIGSRC)/makedepend
#endif
#endif
#ifndef UNCOMPRESSPATH
#define UNCOMPRESSPATH /usr/ucb/uncompress
#endif
#ifndef OptimizedDebugFlags
#define OptimizedDebugFlags -O
#endif
#ifndef OptimizedCDebugFlags
#define OptimizedCDebugFlags 
#endif
#ifndef OptimizedCplusplusDebugFlags
#define OptimizedCplusplusDebugFlags OptimizedCDebugFlags
#endif
#ifndef DebuggableCDebugFlags
#define DebuggableCDebugFlags -g
#endif
#ifndef DebuggableCplusplusDebugFlags
#define DebuggableCplusplusDebugFlags DebuggableCDebugFlags
#endif
#ifndef ProfiledCDebugFlags
#define ProfiledCDebugFlags -pg
#endif
#ifndef ProfiledCplusplusDebugFlags
#define ProfiledCplusplusDebugFlags ProfiledCDebugFlags
#endif
#ifndef NoOpCDebugFlags
#define NoOpCDebugFlags /**/
#endif
#ifndef DefaultDebugFlags
#define DefaultDebugFlags OptimizedDebugFlags
#endif
#ifndef DefaultCDebugFlags
#define DefaultCDebugFlags OptimizedCDebugFlags
#endif
#ifndef DefaultCplusplusDebugFlags
#define DefaultCplusplusDebugFlags OptimizedCplusplusDebugFlags
#endif
#ifndef DefaultCCOptions
#define DefaultCCOptions /* floating point, etc. */
#endif
#ifndef CCExtraOptions
#define CCExtraOptions
#endif
#ifndef CCompilerFlags
#define CCompilerFlags /**/
#endif
#ifndef DefaultCplusplusOptions
#define DefaultCplusplusOptions /* floating point, etc. */
#endif
#ifndef NoRConst
#define NoRConst NO /* YES if const for structs of funcs is bad */
#endif
#ifndef InstOwner
#ifdef Owner
#define InstOwner -o Owner
#else
#define InstOwner       /* as nothing */
#endif
#endif
#ifndef InstGroup
#ifdef Group
#define InstGroup -g Group
#else
#define InstGroup       /* as nothing */
#endif
#endif
#ifndef InstPgmFlags
#define InstPgmFlags -s
#endif
#ifndef InstBinFlags
#define InstBinFlags -m InstAccBin InstOwner InstGroup
#endif
#ifndef InstUidFlags
#define InstUidFlags -m InstAccUid InstOwner InstGroup
#endif
#ifndef InstLibFlags
#define InstLibFlags -m InstAccLib InstOwner InstGroup
#endif
#ifndef InstIncFlags
#define InstIncFlags -m InstAccInc InstOwner InstGroup
#endif
#ifndef InstEtcFlags
#define InstEtcFlags -m InstAccEtc InstOwner InstGroup
#endif
#ifndef InstManFlags
#define InstManFlags -m 765 InstOwner InstGroup
#endif
#ifndef InstDatFlags
#define InstDatFlags -m 765 InstOwner InstGroup
#endif
#ifndef InstKmemFlags     /* put -g kmem -m 2711 in site.def... */
#define InstKmemFlags InstUidFlags
#endif
#ifndef ArCmdBase
#define ArCmdBase ar
#endif
#ifndef ArCmd
#if HasLargeTmp || SystemV4
#define ArCmd ArCmdBase cq
#else
#define ArCmd ArCmdBase clq
#endif
#endif
#ifndef ArAddCmd
#if HasLargeTmp || SystemV4
#define ArAddCmd ArCmdBase ru
#else
#define ArAddCmd ArCmdBase rul
#endif
#endif
#ifndef ArExtCmd
#if HasLargeTmp || SystemV4
#define ArExtCmd ArCmdBase x
#else
#define ArExtCmd ArCmdBase xl
#endif
#endif
/* ArFlags is for use in the netcdf runconfigure script */
#ifndef ArFlags
#define ArFlags cru
#endif
#ifndef BootstrapCFlags
#define BootstrapCFlags /**/
#endif
#ifndef HasGcc2
#define HasGcc2 NO
#endif
#ifndef HasGcc
#define HasGcc HasGcc2
#endif
#ifndef HasGcc2ForCplusplus
#define HasGcc2ForCplusplus NO
#endif
#ifndef HasCenterLineC
#define HasCenterLineC NO
#endif
#ifndef HasCenterLineCplusplus
#define HasCenterLineCplusplus NO
#endif
#ifndef CcCmd
#if HasGcc2
#define CcCmd gcc -fpcc-struct-return 
#else
#if HasGcc
#define CcCmd gcc -fstrength-reduce -fpcc-struct-return 
#else
#if HasCenterLineC
#define CcCmd clcc
#else
#define CcCmd cc
#endif
#endif
#endif
#endif
#ifndef CplusplusCmd
#if HasGcc2ForCplusplus
#define CplusplusCmd g++
#else
#define CplusplusCmd CC
#endif
#endif
#ifndef CplusplusFilt
# define CplusplusFilt	c++filt
#endif
#ifndef CplusplusLibC
#define CplusplusLibC /**/
#endif
#ifndef CplusplusStandardDefines
#define CplusplusStandardDefines StandardDefines
#endif
#ifndef CplusplusExtraDefines
#define CplusplusExtraDefines /**/
#endif
#ifndef CplusplusExtraIncludes
#define CplusplusExtraIncludes /**/
#endif
#ifndef CplusplusDependIncludes
#define CplusplusDependIncludes /**/
#endif
#ifndef CplusplusOptions
#define CplusplusOptions /**/
#endif
#ifndef CplusplusSpecialOptions
#define CplusplusSpecialOptions /**/
#endif
#if HasFortran
#ifndef FortranCmd
#define FortranCmd f77
#endif
#ifndef Fortran90Cmd
#define Fortran90Cmd f90
#endif
#ifndef DefaultF77Options
#define DefaultF77Options /**/
#endif
#ifndef DefaultF90Options
#define DefaultF90Options /**/
#endif
#ifndef F77ExtraOptions
#define F77ExtraOptions /**/
#endif
#ifndef F77PrecOptions
#define F77PrecOptions /**/
#endif
#ifndef F90PrecOptions
#define F90PrecOptions /**/
#endif
#ifndef F90ExtraOptions
#define F90ExtraOptions /**/
#endif
#ifndef F90ExtraLdOptions
#define F90ExtraLdOptions /**/
#endif
#ifndef F90ExtraLibraries
#define F90ExtraLibraries /**/
#endif
#ifndef ExtraLoadOptions
#define ExtraLoadOptions /**/
#endif
#ifndef ParallelCcCmd
#define ParallelCcCmd CcCmd
#endif
#ifndef ParallelFortranCmd
#define ParallelFortranCmd FortranCmd
#endif
#ifndef ParallelFortran90Cmd
#define ParallelFortran90Cmd Fortran90Cmd
#endif
#ifndef ParallelCplusplusCmd
#define ParallelCplusplusCmd CplusplusCmd
#endif
#ifndef ParallelCCOptions
#define ParallelCCOptions DefaultCCOptions
#endif
#ifndef ParallelF77Options
#define ParallelF77Options DefaultF77Options
#endif
#ifndef ParallelF90Options
#define ParallelF90Options DefaultF90Options
#endif
#ifndef ParallelExtraLoadOptions
#define ParallelExtraLoadOptions ExtraLoadOptions
#endif
#ifndef FortranStaticFlags
#define FortranStaticFlags /**/
#endif
#ifndef DefaultF77DebugFlags /* for -O or -g */
#define DefaultF77DebugFlags 
#endif
#ifndef DefaultF90DebugFlags /* for -O or -g */
#define DefaultF90DebugFlags 
#endif
#ifndef F77CppFlags
#ifdef PVM
#define F77CppFlags -D$(SYSTEM) -DPVM3 -I$(PVMINC)
#else  /* else !PVM */
#define F77CppFlags -D$(SYSTEM)
#endif /* end PVM */
#endif /* end F77CppFlags */
#endif
#ifndef F90CppFlags
#ifdef PVM
#define F90CppFlags -D$(SYSTEM) -DPVM3 -I$(PVMINC) $(STD_CPP_DEFINES)
#else  /* else !PVM */
#define F90CppFlags -D$(SYSTEM) $(STD_CPP_DEFINES)
#endif /* end PVM */
#endif /* end F90CppFlags */
#ifndef AsCmd
#define AsCmd as
#endif
#ifndef CompressCmd
#define CompressCmd compress
#endif
#ifndef CppCmd
#define CppCmd /lib/cpp
#endif
#ifndef CppNoLineInfoOption
#define CppNoLineInfoOption /**/
#endif
#ifndef PreProcessCmd
#define PreProcessCmd CcCmd -E
#endif
#ifndef InstallCmd		/* hack should be in project */
#if SystemV || SystemV4
#ifdef UseInstalled		/* assume BINDIR in path */
#if defined(CrayArchitecture) || defined(HPArchitecture) || defined(SunArchitecture) || defined(AIXArchitecture)
#define InstallCmd installsh
#else
#define InstallCmd bsdinst
#endif
#else
#if defined(CrayArchitecture) || defined(HPArchitecture) || defined(SunArchitecture) || defined(AIXArchitecture)
#define InstallCmd $(SHELL) $(CONFIGSRC)/util/install.sh
#else
#define InstallCmd $(SHELL) $(CONFIGSRC)/util/bsdinst.sh
#endif
#endif
#else
#define InstallCmd install
#endif
#endif
#ifndef InstallFlags
#ifdef AIXArchitecture
#define InstallFlags -c InstOwner InstGroup
#else
#define InstallFlags -c
#endif
#endif
#ifndef LdCmd
#define LdCmd ld
#endif
#ifndef LexCmd
#define LexCmd lex
#endif
#ifndef LexLib
#define LexLib -ll
#endif
#ifndef YaccCmd
#define YaccCmd yacc
#endif
#ifndef CplusplusYaccCmd
#define CplusplusYaccCmd YaccCmd
#endif
#ifndef LintCmd
#define LintCmd lint
#endif
#ifndef LintLibFlag
#if SystemV || SystemV4
#define LintLibFlag -o
#else
#define LintLibFlag -C
#endif
#endif
#ifndef LintOpts
#if SystemV || SystemV4
#define LintOpts -bh
#else
#define LintOpts -axz
#endif
#endif
#ifndef CpCmd
#define CpCmd cp
#endif
#ifndef HasSymLinks
#define HasSymLinks YES
#endif
#ifndef UseCpInScripts 
#define UseCpInScripts NO
#endif
#ifndef LnCmd /* can use cp instead of ln if necessary */
#if HasSymLinks
#define LnCmd ln -s
#else
#define LnCmd ln
#endif
#endif
#ifndef MakeCmd
#define MakeCmd make
#endif
#ifndef MvCmd
#define MvCmd mv
#endif
#ifndef RanlibCmd
#define RanlibCmd ranlib
#endif
#ifndef RanlibInstFlags
#define RanlibInstFlags /**/
#endif
#ifndef RmCmd
#define RmCmd rm -f
#endif
#ifndef StandardIncludes	/* for platform-specifics */
#define StandardIncludes /**/
#endif
#ifndef StandardDefines
#if SystemV
#define StandardDefines -DSYSV
#else
#if SystemV4
#define StandardDefines -DSVR4
#else
#define StandardDefines /**/
#endif
#endif
#endif
#ifndef StandardCppDefines
#define StandardCppDefines StandardDefines
#endif
#ifndef Malloc0ReturnsNull
#define Malloc0ReturnsNull NO
#endif
#ifndef ToolkitStringsABIOptions
#define ToolkitStringsABIOptions /**/
#endif
#ifndef NdbmDefines
#if HasNdbm
#define NdbmDefines -DNDBM
#else
#define NdbmDefines /**/
#endif
#endif
#ifndef LdPreLib
#if !defined(UseInstalled)
#define LdPreLib -L$(BUILDLIBDIR)
#else
#if AlternateUsrLibDir
#define LdPreLib -L$(USRLIBDIR)
#else
#define LdPreLib /**/
#endif
#endif
#endif
#ifndef LdPostLib
#if !defined(UseInstalled) && AlternateUsrLibDir && !HasLdRunPath
#define LdPostLib -L$(USRLIBDIR)
#else
#define LdPostLib /**/
#endif
#endif
#ifndef MathLibrary
#define MathLibrary -lm
#endif
#ifndef DBMLibrary
#define DBMLibrary -ldbm
#endif
#ifndef DlLibrary
#define DlLibrary -ldl
#endif
#ifndef ExtraLibraries
#if SystemV4
#if HasSockets
#define ExtraLibraries -lsocket -lnsl -lw
#else
#define ExtraLibraries -lnsl -lw
#endif
#else
#define ExtraLibraries /**/
#endif
#endif
#ifndef ExtraLoadOptions
#define ExtraLoadOptions /**/
#endif
#ifndef ExtraLoadFlags
#define ExtraLoadFlags /**/
#endif
#ifndef LdCombineFlags
#if SystemV4
#define LdCombineFlags -r
#else
#define LdCombineFlags -X -r
#endif
#endif
#ifndef LdStripFlags
#define LdStripFlags -x
#endif
#ifndef TagsCmd
#define TagsCmd ctags
#endif
#ifndef LoaderLibPrefix
#define LoaderLibPrefix /**/
#endif
#ifndef ImakeCmd
#ifdef UseInstalled
#define ImakeCmd $(ETCDIR)/imake
#else
#define ImakeCmd $(IMAKESRC)/imake
#endif
#endif
#ifndef DependCmd
#ifdef UseInstalled		/* assume BINDIR in path */
#if UseSfmakedepend
#define DependCmd $(PERLCMD) $(ETCDIR)/sfmakedepend
#else
#define DependCmd $(ETCDIR)/makedepend
#endif
#else
#if UseSfmakedepend
#define DependCmd $(PERLCMD) $(ETCDIR)/sfmakedepend 
#else
#define DependCmd $(DEPENDSRC)/makedepend
#endif
#endif
#endif
#ifndef DependFlags
#if UseSfmakedepend
#define DependFlags -m M
#else
#define DependFlags /**/
#endif
#endif
#ifndef DependFileName
#define DependFileName Makefile.dep
#endif
#ifndef ExportListCmd
# ifndef ExportListGenSource
#  define ExportListCmd		/**/
# elif !defined(UseInstalled)
#  define ExportListCmd		$(CONFIGSRC)/util/exportlistgen
# else
#  define ExportListCmd		exportlistgen
# endif
#endif
#ifndef MkdirHierCmd
#ifdef UseInstalled		/* assume BINDIR in path */
#define MkdirHierCmd mkdirhier
#else
#define MkdirHierCmd $(SHELL) $(CONFIGSRC)/util/mkdirhier.sh
#endif
#endif
#ifndef TroffCmd
#define TroffCmd psroff
#endif
#ifndef NroffCmd
#define NroffCmd nroff
#endif
#ifndef MsMacros
#define MsMacros -ms
#endif
#ifndef ManMacros
#define ManMacros -man
#endif
#ifndef TblCmd
#define TblCmd tbl
#endif
#ifndef EqnCmd
#define EqnCmd eqn
#endif
#ifndef NeqnCmd
#define NeqnCmd neqn
#endif
#ifndef ColCmd
#define ColCmd col
#endif
#ifndef DvipsCmd
#define DvipsCmd dvips
#endif
#ifndef LatexCmd
#define LatexCmd latex
#endif
#if HasSentinel
#ifndef SentinelCmd
#define SentinelCmd sentinel
#endif
#ifndef SentinelOptions
#define SentinelOptions /**/
#endif
#endif
#if HasPurify
#ifndef PurifyCmd
#define PurifyCmd purify
#endif
#ifndef PurifyOptions
#define PurifyOptions /**/
#endif
#endif
#if HasTestCenter
#ifndef ProofCmd
#define ProofCmd proof
#endif
#ifndef ProofOptions
#define ProofOptions /**/
#endif
#endif
#ifndef PathSeparator
#define PathSeparator /
#endif
#ifndef Osuf
#define Osuf o
#endif
#ifndef CCsuf
#define CCsuf cxx
#endif
#ifndef ManSuffix
#define ManSuffix	n		/* use just one tab or cpp will die */
#endif
#ifndef LibManSuffix
#define LibManSuffix	3		/* use just one tab or cpp will die */
#endif
#ifndef FileManSuffix
#if SystemV || SystemV4 || defined(OSF1Architecture)
#define FileManSuffix	4		/* use just one tab or cpp will die */
#else
#define FileManSuffix	5		/* use just one tab or cpp will die */
#endif
#endif
#ifndef ExpandManNames
#if SystemV
#define ExpandManNames NO
#else
#define ExpandManNames YES
#endif
#endif
#ifndef TOPDIR
#define TOPDIR .
#endif
#ifndef CURDIR
#define CURDIR .
#endif
#ifndef System
#define System generic
#endif
#ifndef SiteIConfigFiles
#define SiteIConfigFiles /**/
#endif
#ifndef ExtraFilesToClean
#define ExtraFilesToClean /**/
#endif
#ifndef FilesToClean
#define FilesToClean *.CKP *.ln *.BAK *.bak *.Osuf *.M *.mod core errs ,* *~ *.a .emacs_* tags TAGS make.log MakeOut 
#endif
#ifndef Use32BitAddress
#define Use32BitAddress NO
#endif
#ifndef Use64BitAddress
#define Use64BitAddress NO
#endif
#ifndef Test
#define Test           /bin/test
#endif
#ifndef SerialDebugCmd
#define SerialDebugCmd "dbx"
#endif
#ifndef ParDebugCmdSngl
#define ParDebugCmdSngl "mpirun -dbx"
#endif
#ifndef ParDebugCmdMult
#define ParDebugCmdMult "mpirun -dbx"
#endif
#ifndef NeedsDoubleEscape
#define NeedsDoubleEscape NO
#endif

          PATHSEP = PathSeparator
            SHELL = BourneShell

           SYSTEM = System
          LSYSTEM = `echo $(SYSTEM) | tr "[A-Z]" "[a-z]"`

              TOP = TOPDIR
      CURRENT_DIR = CURDIR
          DESTDIR = DestDir
   SERIALDEBUGCMD = SerialDebugCmd
  PARDEBUGCMDSNGL = ParDebugCmdSngl
  PARDEBUGCMDMULT = ParDebugCmdMult

            IMAKE = ImakeCmd
           DEPEND = DependCmd
        MKDIRHIER = MkdirHierCmd
    EXPORTLISTGEN = ExportListCmd
        CONFIGSRC = ConfigSrc
         IMAKESRC = $(CONFIGSRC)/imake
        DEPENDSRC = DependDir

          INCROOT = IncRoot		/* base of where to put header files */
        USRLIBDIR = UsrLibDir		/* nonshared libraries */
         SHLIBDIR = ShLibDir            /* shared libraries */
       LINTLIBDIR = LintlibDir		/* lint libraries */
          MANPATH = ManPath		/* top of manual page tree */
    MANSOURCEPATH = ManSourcePath	/* prefix for man page sources */
           MANDIR = ManDir		/* man pages for commands */
        LIBMANDIR = LibmanDir		/* man pages for library routines */
       FILEMANDIR = FileManDir		/* man pages for config files */

               AR = ArCmd
          ARFLAGS = ArFlags
  BOOTSTRAPCFLAGS = BootstrapCFlags	/* set if cpp does not have uniq sym */
               CC = CcCmd
               FC = FortranCmd
             F90C = Fortran90Cmd
            CCPAR = ParallelCcCmd
            FCPAR = ParallelFortranCmd
          F90CPAR = ParallelFortran90Cmd
               AS = AsCmd
             TEST = Test
              M2C = /bin/true   /* To handle some makes assuming f90 .mod files are modula2 */
#if HasCplusplus

.SUFFIXES: .CCsuf

              CXX = CplusplusCmd
          CXXFILT = CplusplusFilt
           CXXLIB = CplusplusLibC
    CXXDEBUGFLAGS = DefaultCplusplusDebugFlags
CXXDEPENDINCLUDES = CplusplusDependIncludes
 CXXEXTRA_DEFINES = CplusplusExtraDefines
CXXEXTRA_INCLUDES = CplusplusExtraIncludes
   CXXSTD_DEFINES = CplusplusStandardDefines $(CXXPROJECT_DEFINES)
       CXXOPTIONS = CplusplusOptions
      CXXINCLUDES = $(CXXEXTRA_INCLUDES) $(INCLUDES) $(TOP_INCLUDES) 
       CXXDEFINES = $(CXXINCLUDES) $(CXXSTD_DEFINES) $(THREADS_CXXDEFINES) $(CXXEXTRA_DEFINES) $(DEFINES)
         CXXFLAGS = $(CXXDEBUGFLAGS) $(DEBUG) $(CXXOPTIONS) $(THREADS_CXXFLAGS) $(CXXDEFINES) $(PROJECT_INCLUDES)
#endif
         COMPRESS = CompressCmd
              CPP = CppCmd $(STD_CPP_DEFINES)		/* simple filters */
    PREPROCESSCMD = PreProcessCmd $(STD_CPP_DEFINES)	/* prefered; mdep */
          INSTALL = InstallCmd
     INSTALLFLAGS = InstallFlags
               LD = LdCmd
              LEX = LexCmd
           LEXLIB = LexLib
             YACC = YaccCmd
           CCYACC = CplusplusYaccCmd
             LINT = LintCmd
      LINTLIBFLAG = LintLibFlag
         LINTOPTS = LintOpts
               LN = LnCmd
             MAKE = MakeCmd
               MV = MvCmd
               CP = CpCmd
#if DoRanlibCmd
           RANLIB = RanlibCmd
  RANLIBINSTFLAGS = RanlibInstFlags
#else
           RANLIB = /bin/true
#endif
               RM = RmCmd
        MANSUFFIX = ManSuffix		/* suffix for command man pages */
     LIBMANSUFFIX = LibManSuffix	/* suffix for library man pages */
    FILEMANSUFFIX = FileManSuffix	/* suffix for config file man pages */
            TROFF = TroffCmd
            NROFF = NroffCmd
         MSMACROS = MsMacros
        MANMACROS = ManMacros
              TBL = TblCmd
              EQN = EqnCmd
             NEQN = NeqnCmd
              COL = ColCmd
#if HasLatex
            DVIPS = DvipsCmd
            LATEX = LatexCmd
#endif
#if HasSentinel
         SENTINEL = SentinelCmd
  SENTINELOPTIONS = SentinelOptions
#endif
#if HasPurify
           PURIFY = PurifyCmd
    PURIFYOPTIONS = PurifyOptions
#endif
#if HasTestCenter
           PROOF = ProofCmd
    PROOFOPTIONS = ProofOptions
#endif
#if ConstructMFLAGS
           MFLAGS = -$(MAKEFLAGS)
#endif
#if ConstructMAKEFLAGS
        MAKEFLAGS = $(MFLAGS)
#endif

#ifdef PositionIndependentCFlags
         PICFLAGS = PositionIndependentCFlags
#endif

#if HasSharedLibraries
    SHAREDCODEDEF = SharedCodeDef
         SHLIBDEF = SharedLibraryDef
#ifdef SharedLibraryLoadFlags
     SHLIBLDFLAGS = SharedLibraryLoadFlags
#endif
/*
 * Here we set up flags needed to produce position-independent code 
 * when doing C and C++ compilation.  The default if you specify C
 * PIC flags without also specifying C++ PIC flags is to assume that 
 * the C flags work for both.  If your C++ compiler requires different
 * flags, specify them explicitly in PositionIndependentCplusplusFlags.
 */
#ifdef PositionIndependentCFlags
         PICFLAGS = PositionIndependentCFlags
#endif
#ifdef PositionIndependentCplusplusFlags
      CXXPICFLAGS = PositionIndependentCplusplusFlags
#else
#ifdef PositionIndependentCFlags
      CXXPICFLAGS = PositionIndependentCFlags
#endif
#endif
#endif
#if !HasVoidSignalReturn
   SIGNAL_DEFINES = -DSIGNALRETURNSINT
#endif

#if StripInstalledPrograms
     INSTPGMFLAGS = InstPgmFlags	/* install flags for stripping */
#else
#ifdef AIXArchitecture
     INSTPGMFLAGS = InstOwner InstGroup
#else 
     INSTPGMFLAGS =
#endif
#endif
     INSTETCFLAGS = InstEtcFlags
     INSTBINFLAGS = InstBinFlags	/* install flags for programs */
     INSTUIDFLAGS = InstUidFlags	/* install flags for setuid programs */
     INSTLIBFLAGS = InstLibFlags	/* install flags for libraries */
     INSTINCFLAGS = InstIncFlags	/* install flags for headers */
     INSTMANFLAGS = InstManFlags	/* install flags for man pages */
     INSTDATFLAGS = InstDatFlags	/* install flags for data files */
    INSTKMEMFLAGS = InstKmemFlags	/* install flags for /dev/kmem progs */

#ifdef ProjectRoot
      PROJECTROOT = ProjectRoot
#endif
#ifdef UseInstalled
# if AlternateIncRoot
#  define TopInclude	-I$(INCROOT)
# else
#  define TopInclude	/**/
# endif
#else
# define TopInclude	-I$(TOP)
#endif
/*
 * STD_INCLUDES contains system-specific includes
 * TOP_INCLUDES specifies how to get to /usr/include or its build substitute
 * EXTRA_INCLUDES contains project-specific includes set in project incfiles
 * INCLUDES contains client-specific includes set in Imakefile
 * LOCAL_LDFLAGS contains client-specific ld flags flags set in Imakefile
 */
     STD_INCLUDES = StandardIncludes
  STD_CPP_DEFINES = StandardCppDefines $(PROJECT_DEFINES)
      STD_DEFINES = StandardDefines $(PROJECT_DEFINES)
 EXTRA_LOAD_FLAGS = ExtraLoadFlags
  EXTRA_LDOPTIONS = ExtraLoadOptions
  EXTRA_LIBRARIES = ExtraLibraries Krb5Libraries
F90EXTRALIBRARIES = F90ExtraLibraries
             TAGS = TagsCmd

      ALLINCLUDES = $(INCLUDES) $(EXTRA_INCLUDES) $(TOP_INCLUDES) $(STD_INCLUDES)
       ALLDEFINES = $(ALLINCLUDES) $(STD_DEFINES) $(EXTRA_DEFINES) $(THREADS_DEFINES) $(DEFINES)

            DEBUG = DefaultDebugFlags
      CDEBUGFLAGS = DefaultCDebugFlags
        CCOPTIONS = DefaultCCOptions
     PARCCOPTIONS = ParallelCCOptions
   CCEXTRAOPTIONS = CCExtraOptions
           CFLAGS = $(CDEBUGFLAGS)  $(DEBUG) $(CCOPTIONS) $(CCEXTRAOPTIONS) $(THREADS_CFLAGS) $(ALLDEFINES) $(PROJECT_INCLUDES)
        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES) $(DEPEND_DEFINES)

    F77DEBUGFLAGS = DefaultF77DebugFlags
       F77OPTIONS = DefaultF77Options
  F77EXTRAOPTIONS = F77ExtraOptions
   F77PRECOPTIONS = F77PrecOptions
    PARF77OPTIONS = ParallelF77Options
   F77STATICFLAGS = FortranStaticFlags
      F77CPPFLAGS = F77CppFlags
           FFLAGS = $(F77DEBUGFLAGS) $(DEBUG) $(F77OPTIONS) $(F77PRECOPTIONS) $(F77EXTRAOPTIONS) $(PROJECT_INCLUDES)

    F90DEBUGFLAGS = DefaultF90DebugFlags
       F90OPTIONS = DefaultF90Options
  F90EXTRAOPTIONS = F90ExtraOptions
    PARF90OPTIONS = ParallelF90Options
   F90STATICFLAGS = FortranStaticFlags
      F90CPPFLAGS = F90CppFlags
   F90PRECOPTIONS = F90PrecOptions
F90EXTRALDOPTIONS = F90ExtraLdOptions
         F90FLAGS = $(F90DEBUGFLAGS) $(DEBUG) $(F90OPTIONS) $(F90EXTRAOPTIONS) $(F90PRECOPTIONS) $(PROJECT_INCLUDES)

         LDPRELIB = LdPreLib
        LDPOSTLIB = LdPostLib
        LDOPTIONS = $(EXTRA_LDOPTIONS) $(THREADS_LDFLAGS) $(LOCAL_LDFLAGS) $(LDPRELIBS)
     PARLDOPTIONS = ParallelExtraLoadOptions
           LDLIBS = $(LDPOSTLIBS) $(THREADS_LIBS) $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
     CXXLDOPTIONS = $(CXXOPTIONS) $(EXTRA_LDOPTIONS) $(THREADS_CXXLDFLAGS) $(LOCAL_LDFLAGS) $(LDPRELIBS)

#if HasBrokenCCForLink
           CCLINK = LdCmd
#else
#if AlternateUsrLibDir && HasLdRunPath
       CCENVSETUP = LD_RUN_PATH=$(USRLIBDIRPATH)
           CCLINK = $(CCENVSETUP) $(CC)
#else
           CCLINK = $(CC)
#endif
#endif

         NATIVECC = NativeCC
        NATIVEF77 = NativeF77
          CROSSCC = CrossCC
  CROSSACCESSROOT = CrossAccessRoot
   CROSSACCESSSRC = CrossAccessSrc
  CROSSALLDEFINES = CrossAllDefines
     CROSSLIBPATH = CrossLibPath
    CROSSPLIBPATH = CrossPlibPath
      CROSSLIBDIR = CrossLibDir
     CROSSPLIBDIR = CrossPlibDir
 CROSSPROJECTINCS = CrossProjectIncs


#if AlternateUsrLibDir && HasLdRunPath
      CXXENVSETUP = LD_RUN_PATH=$(USRLIBDIRPATH)
          CXXLINK = $(CXXENVSETUP) $(CXX)
#else
          CXXLINK = $(CXX)
#endif
     LDSTRIPFLAGS = LdStripFlags
   LDCOMBINEFLAGS = LdCombineFlags
      DEPENDFLAGS = DependFlags

        MACROFILE = MacroFile
           RM_CMD = $(RM)

    IMAKE_DEFINES = /* leave blank, for command line use only */
   ITOOLS_DEFINES = -DUseSfmakedepend=NO
#ifdef UseInstalled
         IRULESRC = $(CONFIGDIR)	/* used in rules file */
        IMAKE_CMD = $(IMAKE) -DUseInstalled -I$(IRULESRC) $(IMAKE_DEFINES)
#else
         IRULESRC = $(CONFIGSRC)/cf
        IMAKE_CMD = $(IMAKE) -I$(IRULESRC) $(IMAKE_DEFINES) $(ITOOLS_DEFINES)
#endif

#ifndef TopLevelProject
# define TopLevelProject	X11
#endif

#include <ACCESS.rules>

#include <noop.rules>

/*
 * get project-specific configuration and rules
 */
#include <ACCESS.tmpl>

#include <noop.rules>

#if !HasClearmake
     /* clearmake records relevant defines and flags in the build script,
	so it knows when they change and we don't need this coarser-level
	dependency.  We also don't want it, since it prevents sharing if
	even one config file, say site.def or host.def, changes. */
     ICONFIGFILES = $(IRULESRC)/Imake.tmpl $(IRULESRC)/ACCESS.tmpl \
			$(IRULESRC)/site.def $(IRULESRC)/$(MACROFILE) \
			SiteIConfigFiles $(EXTRA_ICONFIGFILES)
#endif

#ifdef FixupLibReferences
FixupLibReferences()
#endif

/* ConfigDir comes from X11.tmpl */
        CONFIGDIR = ConfigDir		/* build configuration information */
#if HasClearmake
           OSNAME = OSName
#endif
    USRLIBDIRPATH = UsrLibDirPath
        LDPRELIBS = LdPreLibs
       LDPOSTLIBS = LdPostLibs
     TOP_INCLUDES = TopIncludes
  PROJECT_DEFINES = ProjectDefines
#if HasCplusplus
CXXPROJECT_DEFINES = CplusplusProjectDefines
#endif

XCOMM ----------------------------------------------------------------------
XCOMM start of Imakefile
#include INCLUDE_IMAKEFILE

XCOMM ----------------------------------------------------------------------
XCOMM common rules for all Makefiles - do not edit

.c.i:
	CPPOnlyCompile($*.c,$(_NOOP_))
/*
 * These need to be here so that rules in Imakefile occur first;  the blank
 * emptyrule is to make sure that an empty Imakefile does not default to make
 * clean.
 */
emptyrule::

CleanTarget()

#ifndef IHaveSpecialMakefileTarget
MakefileTarget()
#endif

TagsTarget()
#ifdef MakefileAdditions
MakefileAdditions()
#endif

CenterLoadTarget(debug_src,$(SRCS),NullParameter,$(ALLDEFINES))

CenterLoadTarget(debug_obj,$(OBJS),NullParameter,$(ALLDEFINES))

ManKeywordsTarget($(MANPATH))

#ifdef IHaveSubdirs
XCOMM ----------------------------------------------------------------------
XCOMM rules for building in SUBDIRS - do not edit

InstallSubdirs($(SUBDIRS))
InstallManSubdirs($(SUBDIRS))
InstallLinkKitSubdirs($(SUBDIRS))
CleanSubdirs($(SUBDIRS))
TagSubdirs($(SUBDIRS))
MakefileSubdirs($(SUBDIRS))
IncludesSubdirs($(SUBDIRS))

#endif

/* must be after all install.man rules that install anything */
#if MakeManKeywords		/* typically only at top level */
install.man:: man_keywords
#endif

#ifndef IHaveSubdirs
XCOMM ----------------------------------------------------------------------
XCOMM empty rules for directories that do not have SUBDIRS - do not edit

install::
	@echo "install in $(CURRENT_DIR) done"

install.man::
	@echo "install.man in $(CURRENT_DIR) done"

install.linkkit::
	@echo "install.linkkit in $(CURRENT_DIR) done"

Makefiles::

includes::

depend::

#endif /* if subdirectory rules are needed */

XCOMM ----------------------------------------------------------------------
#if !DoSharedLib
NormalObjectRule()
#endif

XCOMM ----------------------------------------------------------------------
XCOMM dependencies generated by makedepend or sfmakedepend
IncludeMakefile(DependFileName)
