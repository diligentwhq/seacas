If the cpp used by imake doesn't work properly for building Makefiles,
you need to use a different one.  The correct way to do this is to compile
the new cpp's name into imake.  But before you do that, you can test
out a different cpp using environment variables.  This lets you figure out
whether an alternative cpp actually does work before you decide to rebuild
imake.

To use a different cpp set the environment variable IMAKECPP.  For instance,
if you want to try der Mouse's cpp, and you've got it installed in
/usr/local/mouse-cpp, do this:

	% setenv IMAKECPP /usr/local/mouse-cpp

Then try running imake.

In some cases, use of an alternate cpp will also require that you pass it
extra flags.  For instance, your native cpp might predefine your vendor symbol
whereas an alternate cpp might not.  When you rebuild imake, you'd put these
symbols in cpp_argv[] in imakemdep.h, but use the variable IMAKEINCLUDE to
test which flags you need.  The first thing in IMAKEINCLUDE must be a -I
flag, so you need to do something like this:

	% setenv IMAKEINCLUDE "-I. other-flags-here"

For example, if I use mouse-cpp on my Ultrix machine, it doesn't predefine
"ultrix" as the native cpp does.  So I have to do this:

	% setenv IMAKEINCLUDE "-I. -Dultrix"
