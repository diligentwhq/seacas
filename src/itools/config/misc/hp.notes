hp.cf defines SystemV, which causes bsdinst to be used for installing
programs.  I've had better luck using install.sh, i.e., by putting this
in hp.cf:

#define InstallCmd sh $(SCRIPTSRC)/install.sh

(The particular case where install.sh works better than bsdinst in my
experience is when trying to install a readonly file on top of an existing
version.  bsdinst didn't work; install.sh did.)

However, the above won't work for the case when UseInstalled is defined.
Write this instead:

#ifdef UseInstalled
#define InstallCmd install.sh
#else
#define InstallCmd sh $(SCRIPTSRC)/install.sh
#endif

Then "install.sh" (from util/scripts) in a directory in your search path.
Don't forget to make it executable.
(Make sure it's executable.)

The X11R5 hp.cf also defines RemoveTargetProgramByMoving as YES.  I'd
recommend changing this to NO.

-------------------

There is a distribution of imake available from LUCS (Liverpool University,
Department of Computer Science), available from ftp.csc.liv.ac.uk.  If you're
building that distribution and get errors when imake runs complaining about
"the # operator must precede a parameter", try the following.   Look in
config/imakedep.h and see if it has this near the top:

	#ifdef __hpux
	#define USE_CC_E
	#endif

Apparently this results in use of cc, which invokes cpp.ansi - which
doesn't like "#define XCOMM #".  You can verify this as follows:

	% /lib/cpp.ansi
	# define XCOMM #
	^D
	: 1: The '#' operator must precede a parameter.

If you have the "# operator" problem, you'll probably be able to build the
LUCS distribution by commenting out the __hpux thing:

	/*
	#ifdef __hpux
	#define USE_CC_E
	#endif
	*/
