EXTRA_ARGS=$@

### Change this to point to the root of your SEACAS sources...
ACCESS=/Users/gdsjaar/src/seacas.git

### The SEACAS code will install in ${INSTALL_PATH}/bin, ${INSTALL_PATH}/lib, and ${INSTALL_PATH}/include.
INSTALL_PATH=${ACCESS}

### Make sure these point to the locations to find the libraries and includes in lib and include
### subdirectories of the specified paths.
### For example, netcdf.h should be in ${NETCDF_PATH}/include
NETCDF_PATH=${ACCESS}
MATIO_PATH=${ACCESS}
HDF5_PATH=${ACCESS}
CGNS_PATH=${ACCESS}

### Set to ON for parallel compile; otherwise OFF for serial (default)
MPI=OFF

### Change this to point to the compilers you want to use
if [ "$MPI" == "ON" ]
then
  CXX=mpicxx
  CC=mpicc
  FC=mpif77
else
  CXX=g++
  CC=gcc
  FC=gfortran
fi

### Switch for Debug or Release build:
BUILD_TYPE=Release
#BUILD_TYPE=Debug

### To use the clang sanitizers:
#sanitizer=address     #: AddressSanitizer, a memory error detector.
#sanitizer=integer     #: Enables checks for undefined or suspicious integer behavior.
#sanitizer=thread      #: ThreadSanitizer, a data race detector.
#sanitizer=memory      #: MemorySanitizer, experimental detector of uninitialized reads.
#sanitizer=undefined   #: Fast and compatible undefined behavior checker. 
#sanitizer=dataflow    #: DataFlowSanitizer, a general data flow analysis.
#sanitizer=cfi         #: control flow integrity checks. Requires -flto.
#sanitizer=safe-stack  #: safe stack protection against stack-based memory corruption errors.
#-D CMAKE_CXX_FLAGS="-g -O0 -fsanitize=${sanitizer} -fno-omit-frame-pointer -fPIC" \
#-D CMAKE_C_FLAGS="-g -O0 -fsanitize=${sanitizer} -fno-omit-frame-pointer" \
#-D CMAKE_Fortran_FLAGS="-g -O0 -fsanitize=${sanitizer} -fno-omit-frame-pointer" \

### If you do not have the X11 developer package on your system
### which provides X11/Xlib.h and the libX11, then you will need
### to add the line below.  It will disable blot and fastq
#-D TPL_ENABLE_X11=OFF \

rm -f CMakeCache.txt

### You can add these below if you want more verbosity...
#-D CMAKE_VERBOSE_MAKEFILE:BOOL=ON \
#-D SEACASProj_VERBOSE_CONFIGURE=ON \

### You can add these below to regenerate the flex and bison files for
### aprepro and aprepro_lib May have to touch aprepro.l aprepro.y
### aprepro.ll and aprepro.yy to have them regenerate 
#-D GENERATE_FLEX_FILES=ON \
#-D GENERATE_BISON_FILES=ON \


###------------------------------------------------------------------------
cmake  \
-D CMAKE_BUILD_TYPE=${BUILD_TYPE} \
-D SEACASProj_ENABLE_ALL_PACKAGES:BOOL=ON \
-D SEACASProj_ENABLE_SEACASBlot:BOOL=ON \
-D SEACASProj_ENABLE_SEACASFastq:BOOL=ON \
-D SEACASProj_ENABLE_SEACASExo2mat:BOOL=ON \
-D SEACASProj_ENABLE_SEACASMat2exo:BOOL=ON \
-D SEACASProj_ENABLE_SEACASEx1ex2v2:BOOL=ON \
-D SEACASProj_ENABLE_SEACASEx2ex1v2:BOOL=ON \
-D SEACASProj_ENABLE_SEACASConex:BOOL=ON \
-D SEACASProj_ENABLE_TESTS=ON \
-D CMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH} \
-D BUILD_SHARED_LIBS:BOOL=OFF \
-D CMAKE_CXX_COMPILER:FILEPATH=${CXX} \
-D CMAKE_C_COMPILER:FILEPATH=${CC} \
-D CMAKE_Fortran_COMPILER:FILEPATH=${FC} \
-D SEACASProj_SKIP_FORTRANCINTERFACE_VERIFY_TEST:BOOL=ON \
\
-D TPL_ENABLE_HDF5:BOOL=ON \
-D TPL_ENABLE_Netcdf:BOOL=ON \
-D TPL_ENABLE_Matio:BOOL=ON \
-D TPL_ENABLE_MPI=${MPI} \
-D TPL_ENABLE_Pamgen=OFF \
-D TPL_ENABLE_CGNS:BOOL=OFF \
\
-D NetCDF_DIR:PATH=${NETCDF_PATH} \
-D HDF5_ROOT:PATH=${HDF5_PATH} \
-D HDF5_NO_SYSTEM_PATHS=ON \
-D CGNS_ROOT:PATH=${CGNS_PATH} \
-D Matio_LIBRARY_DIRS:PATH=${MATIO_PATH}/lib \
-D TPL_Matio_INCLUDE_DIRS:PATH=${MATIO_PATH}/include \
\
$EXTRA_ARGS \
..



